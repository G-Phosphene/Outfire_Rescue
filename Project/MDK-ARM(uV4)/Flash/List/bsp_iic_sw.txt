; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_iic_sw.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_iic_sw.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_iic_sw.crf ..\..\User\bsp\BSP_IIC_SW.c]
                          THUMB

                          AREA ||i.BSP_IIC_Ack||, CODE, READONLY, ALIGN=2

                  BSP_IIC_Ack PROC
;;;236    */
;;;237    void BSP_IIC_Ack(void){
000000  b510              PUSH     {r4,lr}
;;;238    	IIC_SCL=0;
000002  4b0d              LDR      r3,|L1.56|
000004  2400              MOVS     r4,#0
000006  601c              STR      r4,[r3,#0]
;;;239    	SDA_OUT();
000008  480c              LDR      r0,|L1.60|
00000a  6801              LDR      r1,[r0,#0]
00000c  f0214170          BIC      r1,r1,#0xf0000000
000010  6001              STR      r1,[r0,#0]
000012  6801              LDR      r1,[r0,#0]
000014  f0415140          ORR      r1,r1,#0x30000000
000018  6001              STR      r1,[r0,#0]
;;;240    	IIC_SDA=0;
00001a  605c              STR      r4,[r3,#4]
;;;241    	IIC_Delay();
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       IIC_SW_Delay
;;;242    	IIC_SCL=1;
000022  2001              MOVS     r0,#1
000024  6018              STR      r0,[r3,#0]
;;;243    	IIC_Delay();
000026  f7fffffe          BL       IIC_SW_Delay
;;;244    	IIC_SCL=0;
00002a  601c              STR      r4,[r3,#0]
;;;245    	IIC_Delay();
00002c  e8bd4010          POP      {r4,lr}
000030  2001              MOVS     r0,#1
000032  f7ffbffe          B.W      IIC_SW_Delay
;;;246    }
;;;247    
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      0x422181a0
                  |L1.60|
                          DCD      0x40010c00

                          AREA ||i.BSP_IIC_CheckDevice||, CODE, READONLY, ALIGN=2

                  BSP_IIC_CheckDevice PROC
;;;333    */
;;;334    uint8_t BSP_IIC_CheckDevice(uint8_t Device_Address){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;335    	uint8_t ucAck;
;;;336    
;;;337    	if (READ_SDA && READ_SCL){
000004  490a              LDR      r1,|L2.48|
000006  f8d12124          LDR      r2,[r1,#0x124]
00000a  2a00              CMP      r2,#0
00000c  d00e              BEQ      |L2.44|
00000e  f8d11120          LDR      r1,[r1,#0x120]
000012  b159              CBZ      r1,|L2.44|
;;;338    		BSP_IIC_Start();		/* 发送启动信号 */
000014  f7fffffe          BL       BSP_IIC_Start
;;;339    
;;;340    		/* 发送设备地址+读写控制bit（0 = w， 1 = r) bit7 先传 */
;;;341    		BSP_IIC_Send_Byte(Device_Address | IIC_WR);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       BSP_IIC_Send_Byte
;;;342    		ucAck = BSP_IIC_Wait_Ack();		/* 检测设备的ACK应答 */
00001e  f7fffffe          BL       BSP_IIC_Wait_Ack
000022  4604              MOV      r4,r0
;;;343    
;;;344    		BSP_IIC_Stop();		/* 发送停止信号 */
000024  f7fffffe          BL       BSP_IIC_Stop
;;;345    
;;;346    		return ucAck;
000028  4620              MOV      r0,r4
;;;347    	}
;;;348    	return 1;	/* I2C总线异常 */
;;;349    }
00002a  bd10              POP      {r4,pc}
                  |L2.44|
00002c  2001              MOVS     r0,#1                 ;348
00002e  bd10              POP      {r4,pc}
                          ENDP

                  |L2.48|
                          DCD      0x42218000

                          AREA ||i.BSP_IIC_NAck||, CODE, READONLY, ALIGN=2

                  BSP_IIC_NAck PROC
;;;257    */
;;;258    void BSP_IIC_NAck(void){
000000  b530              PUSH     {r4,r5,lr}
;;;259    	IIC_SCL=0;
000002  4b0d              LDR      r3,|L3.56|
000004  2400              MOVS     r4,#0
000006  601c              STR      r4,[r3,#0]
;;;260    	SDA_OUT();
000008  480c              LDR      r0,|L3.60|
00000a  6801              LDR      r1,[r0,#0]
00000c  f0214170          BIC      r1,r1,#0xf0000000
000010  6001              STR      r1,[r0,#0]
000012  6801              LDR      r1,[r0,#0]
000014  f0415140          ORR      r1,r1,#0x30000000
000018  6001              STR      r1,[r0,#0]
;;;261    	IIC_SDA=1;
00001a  2501              MOVS     r5,#1
00001c  605d              STR      r5,[r3,#4]
;;;262    	IIC_Delay();
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       IIC_SW_Delay
;;;263    	IIC_SCL=1;
000024  601d              STR      r5,[r3,#0]
;;;264    	IIC_Delay();
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       IIC_SW_Delay
;;;265    	IIC_SCL=0;
00002c  601c              STR      r4,[r3,#0]
;;;266    	IIC_Delay();
00002e  e8bd4030          POP      {r4,r5,lr}
000032  2001              MOVS     r0,#1
000034  f7ffbffe          B.W      IIC_SW_Delay
;;;267    }					 				     
;;;268    
                          ENDP

                  |L3.56|
                          DCD      0x422181a0
                  |L3.60|
                          DCD      0x40010c00

                          AREA ||i.BSP_IIC_ReadData||, CODE, READONLY, ALIGN=2

                  BSP_IIC_ReadData PROC
;;;73     */
;;;74     unsigned char BSP_IIC_ReadData(u8 dev_addr,u8 regAddr,u8 *buf,u8 length){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;75     	BSP_IIC_Start();
00000c  f7fffffe          BL       BSP_IIC_Start
;;;76     	/*************发送器件地址***************/
;;;77     	BSP_IIC_Send_Byte(dev_addr);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       BSP_IIC_Send_Byte
;;;78     	if(BSP_IIC_Wait_Ack()){	//等待应答
000016  f7fffffe          BL       BSP_IIC_Wait_Ack
00001a  b120              CBZ      r0,|L4.38|
;;;79     		BSP_IIC_Stop();
00001c  f7fffffe          BL       BSP_IIC_Stop
;;;80     		return 1;
000020  2001              MOVS     r0,#1
                  |L4.34|
;;;81     	}
;;;82     	/*************发送寄存器地址***************/
;;;83     	BSP_IIC_Send_Byte(regAddr);
;;;84     	if(BSP_IIC_Wait_Ack()){	//等待应答
;;;85     		BSP_IIC_Stop();	
;;;86     		return 1;
;;;87     	}
;;;88     	/*************发送读数据命令***************/
;;;89     	BSP_IIC_Start();
;;;90     	BSP_IIC_Send_Byte(dev_addr+1);
;;;91     	if(BSP_IIC_Wait_Ack()){	//等待应答
;;;92     		BSP_IIC_Stop();	
;;;93     		printf("hehe3\r\n");
;;;94     		return 1;
;;;95     	}
;;;96     	while(length){
;;;97     		if(length==1)
;;;98     			*buf = BSP_IIC_Read_Byte(0);	//读数据,发送nACK 
;;;99     		else 
;;;100    			*buf = BSP_IIC_Read_Byte(1);	//读数据,发送ACK  
;;;101    		length--;
;;;102    		buf++;
;;;103    	}
;;;104    	
;;;105    	BSP_IIC_Stop();	
;;;106    	return 0;
;;;107    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L4.38|
000026  4638              MOV      r0,r7                 ;83
000028  f7fffffe          BL       BSP_IIC_Send_Byte
00002c  f7fffffe          BL       BSP_IIC_Wait_Ack
000030  b118              CBZ      r0,|L4.58|
000032  f7fffffe          BL       BSP_IIC_Stop
000036  2001              MOVS     r0,#1                 ;86
000038  e7f3              B        |L4.34|
                  |L4.58|
00003a  f7fffffe          BL       BSP_IIC_Start
00003e  1c76              ADDS     r6,r6,#1              ;90
000040  b2f0              UXTB     r0,r6                 ;90
000042  f7fffffe          BL       BSP_IIC_Send_Byte
000046  f7fffffe          BL       BSP_IIC_Wait_Ack
00004a  b178              CBZ      r0,|L4.108|
00004c  f7fffffe          BL       BSP_IIC_Stop
000050  a00c              ADR      r0,|L4.132|
000052  f7fffffe          BL       __2printf
000056  2001              MOVS     r0,#1                 ;94
000058  e7e3              B        |L4.34|
                  |L4.90|
00005a  2d01              CMP      r5,#1                 ;97
00005c  d00c              BEQ      |L4.120|
00005e  2001              MOVS     r0,#1                 ;100
000060  f7fffffe          BL       BSP_IIC_Read_Byte
000064  7020              STRB     r0,[r4,#0]            ;100
                  |L4.102|
000066  1e6d              SUBS     r5,r5,#1              ;101
000068  b2ed              UXTB     r5,r5                 ;101
00006a  1c64              ADDS     r4,r4,#1              ;102
                  |L4.108|
00006c  2d00              CMP      r5,#0                 ;96
00006e  d1f4              BNE      |L4.90|
000070  f7fffffe          BL       BSP_IIC_Stop
000074  2000              MOVS     r0,#0                 ;106
000076  e7d4              B        |L4.34|
                  |L4.120|
000078  2000              MOVS     r0,#0                 ;98
00007a  f7fffffe          BL       BSP_IIC_Read_Byte
00007e  7020              STRB     r0,[r4,#0]            ;98
000080  e7f1              B        |L4.102|
;;;108    
                          ENDP

000082  0000              DCW      0x0000
                  |L4.132|
000084  68656865          DCB      "hehe3\r\n",0
000088  330d0a00

                          AREA ||i.BSP_IIC_Read_Byte||, CODE, READONLY, ALIGN=2

                  BSP_IIC_Read_Byte PROC
;;;303    */
;;;304    u8 BSP_IIC_Read_Byte(unsigned char ack){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
;;;305    	unsigned char i,receive=0;
000006  2400              MOVS     r4,#0
;;;306    	SDA_IN();//SDA设置为输入
000008  4816              LDR      r0,|L5.100|
00000a  6801              LDR      r1,[r0,#0]
00000c  f0214170          BIC      r1,r1,#0xf0000000
000010  6001              STR      r1,[r0,#0]
000012  6801              LDR      r1,[r0,#0]
000014  f0414100          ORR      r1,r1,#0x80000000
000018  6001              STR      r1,[r0,#0]
;;;307    	for(i=0;i<8;i++ ){
00001a  2300              MOVS     r3,#0
00001c  2600              MOVS     r6,#0
;;;308    		IIC_SCL=0; 
00001e  4d12              LDR      r5,|L5.104|
;;;309    		IIC_Delay();
000020  2701              MOVS     r7,#1
                  |L5.34|
000022  f8c561a0          STR      r6,[r5,#0x1a0]        ;308
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       IIC_SW_Delay
;;;310    		IIC_SCL=1;
00002c  f8c571a0          STR      r7,[r5,#0x1a0]
;;;311    		receive<<=1;
000030  0660              LSLS     r0,r4,#25
000032  0e04              LSRS     r4,r0,#24
;;;312    		if(READ_SDA)	receive++;   
000034  f8d50124          LDR      r0,[r5,#0x124]
000038  b108              CBZ      r0,|L5.62|
00003a  1c64              ADDS     r4,r4,#1
00003c  b2e4              UXTB     r4,r4
                  |L5.62|
;;;313    		IIC_Delay(); 
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       IIC_SW_Delay
000044  1c5b              ADDS     r3,r3,#1              ;307
000046  b2db              UXTB     r3,r3                 ;307
000048  2b08              CMP      r3,#8                 ;307
00004a  d3ea              BCC      |L5.34|
;;;314    	}					 
;;;315    	if (ack)
00004c  f1b80f00          CMP      r8,#0
000050  d002              BEQ      |L5.88|
;;;316    		BSP_IIC_Ack(); //发送ACK 
000052  f7fffffe          BL       BSP_IIC_Ack
000056  e001              B        |L5.92|
                  |L5.88|
;;;317    	else
;;;318    		BSP_IIC_NAck();//发送nACK 
000058  f7fffffe          BL       BSP_IIC_NAck
                  |L5.92|
;;;319    	return receive;
00005c  4620              MOV      r0,r4
;;;320    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;321    
                          ENDP

000062  0000              DCW      0x0000
                  |L5.100|
                          DCD      0x40010c00
                  |L5.104|
                          DCD      0x42218000

                          AREA ||i.BSP_IIC_SW_Init||, CODE, READONLY, ALIGN=2

                  BSP_IIC_SW_Init PROC
;;;147    */
;;;148    void BSP_IIC_SW_Init(){
000000  b508              PUSH     {r3,lr}
;;;149    	GPIO_InitTypeDef GPIO_InitStructure;
;;;150    	RCC_APB2PeriphClockCmd(RCC_IIC_SW,ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;151    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
00000a  f44f7040          MOV      r0,#0x300
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;152    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000012  2010              MOVS     r0,#0x10
000014  f88d0003          STRB     r0,[sp,#3]
;;;153    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;154    	GPIO_Init(GPIOB,&GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4803              LDR      r0,|L6.48|
000022  f7fffffe          BL       GPIO_Init
;;;155    	IIC_SCL=1;
000026  4803              LDR      r0,|L6.52|
000028  2101              MOVS     r1,#1
00002a  6001              STR      r1,[r0,#0]
;;;156    	IIC_SDA=1;
00002c  6041              STR      r1,[r0,#4]
;;;157    }
00002e  bd08              POP      {r3,pc}
;;;158    
                          ENDP

                  |L6.48|
                          DCD      0x40010c00
                  |L6.52|
                          DCD      0x422181a0

                          AREA ||i.BSP_IIC_Send_Byte||, CODE, READONLY, ALIGN=2

                  BSP_IIC_Send_Byte PROC
;;;278    */
;;;279    void BSP_IIC_Send_Byte(u8 txd){                        
000000  b5f0              PUSH     {r4-r7,lr}
000002  4604              MOV      r4,r0
;;;280    	u8 t;   
;;;281    	SDA_OUT(); 	    
000004  4812              LDR      r0,|L7.80|
000006  6801              LDR      r1,[r0,#0]
000008  f0214170          BIC      r1,r1,#0xf0000000
00000c  6001              STR      r1,[r0,#0]
00000e  6801              LDR      r1,[r0,#0]
000010  f0415140          ORR      r1,r1,#0x30000000
000014  6001              STR      r1,[r0,#0]
;;;282    	IIC_SCL = 0;//拉低时钟开始数据传输
000016  4d0f              LDR      r5,|L7.84|
000018  2700              MOVS     r7,#0
00001a  f8c571a0          STR      r7,[r5,#0x1a0]
;;;283    	for(t=0;t<8;t++){              
00001e  2300              MOVS     r3,#0
;;;284    		IIC_SDA=(txd&0x80)>>7;
;;;285    		txd<<=1; 	  
;;;286    		IIC_Delay();
000020  2601              MOVS     r6,#1
                  |L7.34|
000022  09e0              LSRS     r0,r4,#7              ;284
000024  f8c501a4          STR      r0,[r5,#0x1a4]        ;284
000028  0660              LSLS     r0,r4,#25             ;285
00002a  0e04              LSRS     r4,r0,#24             ;285
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       IIC_SW_Delay
;;;287    		IIC_SCL=1;
000032  f8c561a0          STR      r6,[r5,#0x1a0]
;;;288    		IIC_Delay(); 
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       IIC_SW_Delay
;;;289    		IIC_SCL=0;	
00003c  f8c571a0          STR      r7,[r5,#0x1a0]
;;;290    		IIC_Delay();
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       IIC_SW_Delay
000046  1c5b              ADDS     r3,r3,#1              ;283
000048  b2db              UXTB     r3,r3                 ;283
00004a  2b08              CMP      r3,#8                 ;283
00004c  d3e9              BCC      |L7.34|
;;;291    	}	 
;;;292    } 	 
00004e  bdf0              POP      {r4-r7,pc}
;;;293    
                          ENDP

                  |L7.80|
                          DCD      0x40010c00
                  |L7.84|
                          DCD      0x42218000

                          AREA ||i.BSP_IIC_Start||, CODE, READONLY, ALIGN=2

                  BSP_IIC_Start PROC
;;;168    */
;;;169    void BSP_IIC_Start(void){
000000  b510              PUSH     {r4,lr}
;;;170    	SDA_OUT();     //sda线输出
000002  480b              LDR      r0,|L8.48|
000004  6801              LDR      r1,[r0,#0]
000006  f0214170          BIC      r1,r1,#0xf0000000
00000a  6001              STR      r1,[r0,#0]
00000c  6801              LDR      r1,[r0,#0]
00000e  f0415140          ORR      r1,r1,#0x30000000
000012  6001              STR      r1,[r0,#0]
;;;171    	IIC_SDA=1;	  	  
000014  4b07              LDR      r3,|L8.52|
000016  2001              MOVS     r0,#1
000018  6058              STR      r0,[r3,#4]
;;;172    	IIC_SCL=1;
00001a  6018              STR      r0,[r3,#0]
;;;173    	IIC_Delay();
00001c  f7fffffe          BL       IIC_SW_Delay
;;;174     	IIC_SDA=0;//START:when CLK is high,DATA change form high to low 
000020  2400              MOVS     r4,#0
000022  605c              STR      r4,[r3,#4]
;;;175    	IIC_Delay();
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       IIC_SW_Delay
;;;176    	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据 
00002a  601c              STR      r4,[r3,#0]
;;;177    }	  
00002c  bd10              POP      {r4,pc}
;;;178    
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      0x40010c00
                  |L8.52|
                          DCD      0x422181a0

                          AREA ||i.BSP_IIC_Stop||, CODE, READONLY, ALIGN=2

                  BSP_IIC_Stop PROC
;;;188    */
;;;189    void BSP_IIC_Stop(void){
000000  b500              PUSH     {lr}
;;;190    	SDA_OUT();//sda线输出
000002  480b              LDR      r0,|L9.48|
000004  6801              LDR      r1,[r0,#0]
000006  f0214170          BIC      r1,r1,#0xf0000000
00000a  6001              STR      r1,[r0,#0]
00000c  6801              LDR      r1,[r0,#0]
00000e  f0415140          ORR      r1,r1,#0x30000000
000012  6001              STR      r1,[r0,#0]
;;;191    	IIC_SCL=0;
000014  4b07              LDR      r3,|L9.52|
000016  2000              MOVS     r0,#0
000018  6018              STR      r0,[r3,#0]
;;;192    	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
00001a  6058              STR      r0,[r3,#4]
;;;193     	IIC_Delay();
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       IIC_SW_Delay
;;;194    	IIC_SCL=1; 
000022  2001              MOVS     r0,#1
000024  6018              STR      r0,[r3,#0]
;;;195    	IIC_SDA=1;//发送I2C总线结束信号
000026  6058              STR      r0,[r3,#4]
;;;196    	IIC_Delay();							   	
000028  f85deb04          POP      {lr}
00002c  f7ffbffe          B.W      IIC_SW_Delay
;;;197    }
;;;198    
                          ENDP

                  |L9.48|
                          DCD      0x40010c00
                  |L9.52|
                          DCD      0x422181a0

                          AREA ||i.BSP_IIC_Wait_Ack||, CODE, READONLY, ALIGN=2

                  BSP_IIC_Wait_Ack PROC
;;;209    */
;;;210    u8 BSP_IIC_Wait_Ack(void){
000000  b530              PUSH     {r4,r5,lr}
;;;211    	u16 ucErrTime=0;
000002  2300              MOVS     r3,#0
;;;212    	IIC_SDA=1;
000004  4c13              LDR      r4,|L10.84|
000006  2501              MOVS     r5,#1
000008  f8c451a4          STR      r5,[r4,#0x1a4]
;;;213    	SDA_IN();      //SDA设置为输入  
00000c  4812              LDR      r0,|L10.88|
00000e  6801              LDR      r1,[r0,#0]
000010  f0214170          BIC      r1,r1,#0xf0000000
000014  6001              STR      r1,[r0,#0]
000016  6801              LDR      r1,[r0,#0]
000018  f0414100          ORR      r1,r1,#0x80000000
00001c  6001              STR      r1,[r0,#0]
;;;214    	IIC_Delay();	   
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       IIC_SW_Delay
;;;215    	IIC_SCL=1;IIC_Delay();	 
000024  f8c451a0          STR      r5,[r4,#0x1a0]
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       IIC_SW_Delay
;;;216    	while(READ_SDA){
;;;217    		ucErrTime++;
;;;218    		if(ucErrTime>1000){
00002e  f44f717a          MOV      r1,#0x3e8
000032  e007              B        |L10.68|
                  |L10.52|
000034  1c5b              ADDS     r3,r3,#1              ;217
000036  b29b              UXTH     r3,r3                 ;217
000038  428b              CMP      r3,r1
00003a  d903              BLS      |L10.68|
;;;219    			BSP_IIC_Stop();
00003c  f7fffffe          BL       BSP_IIC_Stop
;;;220    			return 1;
000040  2001              MOVS     r0,#1
;;;221    		}
;;;222    	}
;;;223    	IIC_SCL=0;//时钟输出0 	   
;;;224    	return 0;  
;;;225    } 
000042  bd30              POP      {r4,r5,pc}
                  |L10.68|
000044  f8d40124          LDR      r0,[r4,#0x124]        ;216
000048  2800              CMP      r0,#0                 ;216
00004a  d1f3              BNE      |L10.52|
00004c  f8c401a0          STR      r0,[r4,#0x1a0]        ;223
000050  bd30              POP      {r4,r5,pc}
;;;226    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      0x42218000
                  |L10.88|
                          DCD      0x40010c00

                          AREA ||i.BSP_IIC_WriteData||, CODE, READONLY, ALIGN=1

                  BSP_IIC_WriteData PROC
;;;36     */
;;;37     unsigned char BSP_IIC_WriteData(u8 dev_addr,u8 regAddr,u8 data){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;38     	BSP_IIC_Start();
000008  f7fffffe          BL       BSP_IIC_Start
;;;39     	/*************发送器件地址***************/
;;;40     	BSP_IIC_Send_Byte(dev_addr);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       BSP_IIC_Send_Byte
;;;41     	if(BSP_IIC_Wait_Ack()){	//等待应答
000012  f7fffffe          BL       BSP_IIC_Wait_Ack
000016  b118              CBZ      r0,|L11.32|
;;;42     		BSP_IIC_Stop();		 
000018  f7fffffe          BL       BSP_IIC_Stop
;;;43     		return 1;
00001c  2001              MOVS     r0,#1
;;;44     	}
;;;45     	/*************发送寄存器地址***************/
;;;46     	BSP_IIC_Send_Byte(regAddr);
;;;47     	if(BSP_IIC_Wait_Ack()){	//等待应答
;;;48     		BSP_IIC_Stop();		 
;;;49     		return 1;
;;;50     	}
;;;51     	/*************发送数据***************/
;;;52     	BSP_IIC_Send_Byte(data);
;;;53     	if(BSP_IIC_Wait_Ack()){	//等待应答
;;;54     		BSP_IIC_Stop();		 
;;;55     		return 1;
;;;56     	}
;;;57     	BSP_IIC_Stop();	
;;;58     	return 0;
;;;59     }
00001e  bd70              POP      {r4-r6,pc}
                  |L11.32|
000020  4630              MOV      r0,r6                 ;46
000022  f7fffffe          BL       BSP_IIC_Send_Byte
000026  f7fffffe          BL       BSP_IIC_Wait_Ack
00002a  b118              CBZ      r0,|L11.52|
00002c  f7fffffe          BL       BSP_IIC_Stop
000030  2001              MOVS     r0,#1                 ;49
000032  bd70              POP      {r4-r6,pc}
                  |L11.52|
000034  4628              MOV      r0,r5                 ;52
000036  f7fffffe          BL       BSP_IIC_Send_Byte
00003a  f7fffffe          BL       BSP_IIC_Wait_Ack
00003e  b118              CBZ      r0,|L11.72|
000040  f7fffffe          BL       BSP_IIC_Stop
000044  2001              MOVS     r0,#1                 ;55
000046  bd70              POP      {r4-r6,pc}
                  |L11.72|
000048  f7fffffe          BL       BSP_IIC_Stop
00004c  2000              MOVS     r0,#0                 ;58
00004e  bd70              POP      {r4-r6,pc}
;;;60     
                          ENDP


                          AREA ||i.IIC_SW_Delay||, CODE, READONLY, ALIGN=1

                  IIC_SW_Delay PROC
;;;16     
;;;17     void IIC_SW_Delay(unsigned int t){
000000  2200              MOVS     r2,#0
000002  e005              B        |L12.16|
                  |L12.4|
;;;18     	unsigned int i;
;;;19     	unsigned char a;
;;;20     	for( i=0;i<t;i++){
;;;21     		for (a = 0; a < 6; a++);
000004  2100              MOVS     r1,#0
                  |L12.6|
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
00000a  2906              CMP      r1,#6
00000c  d3fb              BCC      |L12.6|
00000e  1c52              ADDS     r2,r2,#1              ;20
                  |L12.16|
000010  4282              CMP      r2,r0                 ;20
000012  d3f7              BCC      |L12.4|
;;;22     	}
;;;23     }
000014  4770              BX       lr
;;;24     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\BSP_IIC_SW.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_BSP_IIC_SW_c_d6069fdc____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_BSP_IIC_SW_c_d6069fdc____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_BSP_IIC_SW_c_d6069fdc____REVSH|
#line 128
|__asm___12_BSP_IIC_SW_c_d6069fdc____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
