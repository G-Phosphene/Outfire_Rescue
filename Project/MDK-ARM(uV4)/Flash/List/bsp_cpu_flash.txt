; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_cpu_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_cpu_flash.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_cpu_flash.crf ..\..\User\bsp\bsp_cpu_flash.c]
                          THUMB

                          AREA ||i.bsp_CmpCpuFlash||, CODE, READONLY, ALIGN=2

                  bsp_CmpCpuFlash PROC
;;;83     */
;;;84     uint8_t bsp_CmpCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpBuf, uint32_t _ulSize)
000000  4b0d              LDR      r3,|L1.56|
;;;85     {
;;;86     	uint32_t i;
;;;87     	uint8_t ucIsEqu;	/* 相等标志 */
;;;88     	uint8_t ucByte;
;;;89     
;;;90     	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;91     	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
000002  1881              ADDS     r1,r0,r2
000004  4299              CMP      r1,r3
000006  d901              BLS      |L1.12|
;;;92     	{
;;;93     		return FLASH_PARAM_ERR;		/*　函数参数错误　*/
000008  2003              MOVS     r0,#3
;;;94     	}
;;;95     
;;;96     	/* 长度为0时返回正确 */
;;;97     	if (_ulSize == 0)
;;;98     	{
;;;99     		return FLASH_IS_EQU;		/* Flash内容和待写入的数据相等 */
;;;100    	}
;;;101    
;;;102    	ucIsEqu = 1;			/* 先假设所有字节和待写入的数据相等，如果遇到任何一个不相等，则设置为 0 */
;;;103    	for (i = 0; i < _ulSize; i++)
;;;104    	{
;;;105    		ucByte = *(uint8_t *)_ulFlashAddr;
;;;106    
;;;107    //		if (ucByte != *_ucpBuf)
;;;108    //		{
;;;109    			if (ucByte != 0xFF)
;;;110    			{
;;;111    				return FLASH_REQ_ERASE;		/* 需要擦除后再写 */
;;;112    			}
;;;113    			else
;;;114    			{
;;;115    				ucIsEqu = 0;	/* 不相等，需要写 */
;;;116    			}
;;;117    //		}
;;;118    
;;;119    		_ulFlashAddr++;
;;;120    		_ucpBuf++;
;;;121    	}
;;;122    
;;;123    	if (ucIsEqu == 1)
;;;124    	{
;;;125    		return FLASH_IS_EQU;	/* Flash内容和待写入的数据相等，不需要擦除和写操作 */
;;;126    	}
;;;127    	else
;;;128    	{
;;;129    		return FLASH_REQ_WRITE;	/* Flash不需要擦除，直接写 */
;;;130    	}
;;;131    }
00000a  4770              BX       lr
                  |L1.12|
00000c  b112              CBZ      r2,|L1.20|
00000e  2301              MOVS     r3,#1                 ;102
000010  2100              MOVS     r1,#0                 ;103
000012  e009              B        |L1.40|
                  |L1.20|
000014  2000              MOVS     r0,#0                 ;99
000016  4770              BX       lr
                  |L1.24|
000018  7803              LDRB     r3,[r0,#0]            ;105
00001a  2bff              CMP      r3,#0xff              ;109
00001c  d001              BEQ      |L1.34|
00001e  2002              MOVS     r0,#2                 ;111
000020  4770              BX       lr
                  |L1.34|
000022  2300              MOVS     r3,#0                 ;115
000024  1c40              ADDS     r0,r0,#1              ;119
000026  1c49              ADDS     r1,r1,#1              ;103
                  |L1.40|
000028  4291              CMP      r1,r2                 ;103
00002a  d3f5              BCC      |L1.24|
00002c  2b01              CMP      r3,#1                 ;123
00002e  d001              BEQ      |L1.52|
000030  2001              MOVS     r0,#1                 ;129
000032  4770              BX       lr
                  |L1.52|
000034  2000              MOVS     r0,#0                 ;125
000036  4770              BX       lr
;;;132    
                          ENDP

                  |L1.56|
                          DCD      0x08040000

                          AREA ||i.bsp_GetSector||, CODE, READONLY, ALIGN=1

                  bsp_GetSector PROC
;;;26     */
;;;27     uint32_t bsp_GetSector(uint32_t _ulWrAddr)
000000  f36f000a          BFC      r0,#0,#11
;;;28     {
;;;29     	uint32_t sector = 0;
;;;30     
;;;31     	sector = _ulWrAddr & SECTOR_MASK;
;;;32     
;;;33     	return sector;
;;;34     }
000004  4770              BX       lr
;;;35     
                          ENDP


                          AREA ||i.bsp_ReadCpuFlash||, CODE, READONLY, ALIGN=2

                  bsp_ReadCpuFlash PROC
;;;45     */
;;;46     uint8_t bsp_ReadCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpDst, uint32_t _ulSize)
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48     	uint32_t i;
;;;49     
;;;50     	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;51     	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
000002  4c0a              LDR      r4,|L3.44|
000004  1883              ADDS     r3,r0,r2
000006  42a3              CMP      r3,r4
000008  d901              BLS      |L3.14|
;;;52     	{
;;;53     		return 1;
00000a  2001              MOVS     r0,#1
;;;54     	}
;;;55     
;;;56     	/* 长度为0时不继续操作,否则起始地址为奇地址会出错 */
;;;57     	if (_ulSize == 0)
;;;58     	{
;;;59     		return 1;
;;;60     	}
;;;61     
;;;62     	for (i = 0; i < _ulSize; i++)
;;;63     	{
;;;64     		*_ucpDst++ = *(uint8_t *)_ulFlashAddr++;
;;;65     	}
;;;66     
;;;67     	return 0;
;;;68     }
00000c  bd10              POP      {r4,pc}
                  |L3.14|
00000e  b10a              CBZ      r2,|L3.20|
000010  2300              MOVS     r3,#0                 ;62
000012  e006              B        |L3.34|
                  |L3.20|
000014  2001              MOVS     r0,#1                 ;59
000016  bd10              POP      {r4,pc}
                  |L3.24|
000018  f8104b01          LDRB     r4,[r0],#1            ;64
00001c  f8014b01          STRB     r4,[r1],#1            ;64
000020  1c5b              ADDS     r3,r3,#1              ;62
                  |L3.34|
000022  4293              CMP      r3,r2                 ;62
000024  d3f8              BCC      |L3.24|
000026  2000              MOVS     r0,#0                 ;67
000028  bd10              POP      {r4,pc}
;;;69     
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      0x08040000

                          AREA ||i.bsp_WriteCpuFlash||, CODE, READONLY, ALIGN=2

                  bsp_WriteCpuFlash PROC
;;;142    */
;;;143    uint8_t bsp_WriteCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpSrc, uint32_t _ulSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;144    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;145    	uint32_t i;
;;;146    	uint8_t ucRet;
;;;147    	uint16_t usTemp;
;;;148    	FLASH_Status status = FLASH_COMPLETE;
00000a  2504              MOVS     r5,#4
;;;149    
;;;150    	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
;;;151    	if (_ulFlashAddr + _ulSize > FLASH_BASE_ADDR + FLASH_SIZE)
00000c  4925              LDR      r1,|L4.164|
00000e  19b8              ADDS     r0,r7,r6
000010  4288              CMP      r0,r1
000012  d902              BLS      |L4.26|
;;;152    	{
;;;153    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;154    	}
;;;155    
;;;156    	/* 长度为0 时不继续操作  */
;;;157    	if (_ulSize == 0)
;;;158    	{
;;;159    		return 0;
;;;160    	}
;;;161    
;;;162    	/* 长度为奇数时不继续操作  */
;;;163    	if ((_ulSize % 2) != 0)
;;;164    	{
;;;165    		return 1;
;;;166    	}	
;;;167    
;;;168    	ucRet = bsp_CmpCpuFlash(_ulFlashAddr, _ucpSrc, _ulSize);
;;;169    
;;;170    	if (ucRet == FLASH_IS_EQU)
;;;171    	{
;;;172    		return 0;
;;;173    	}
;;;174    
;;;175    	__set_PRIMASK(1);  		/* 关中断 */	
;;;176    
;;;177    	/* FLASH 解锁 */
;;;178    	FLASH_Unlock();
;;;179    
;;;180      	/* Clear pending flags (if any) */
;;;181    	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);	
;;;182    
;;;183    	/* 需要擦除 */
;;;184    	if (ucRet == FLASH_REQ_ERASE)
;;;185    	{
;;;186    		status = FLASH_ErasePage(bsp_GetSector(_ulFlashAddr));
;;;187    		if (status != FLASH_COMPLETE)
;;;188    		{
;;;189    			return 2;
;;;190    		}		
;;;191    	}
;;;192    
;;;193    	/* 按字节模式编程（为提高效率，可以按字编程，一次写入4字节） */
;;;194    	for (i = 0; i < _ulSize / 2; i++)
;;;195    	{		
;;;196    		usTemp = _ucpSrc[2 * i];
;;;197    		usTemp |= (_ucpSrc[2 * i + 1] << 8);
;;;198    		status = FLASH_ProgramHalfWord(_ulFlashAddr, usTemp);
;;;199    		if (status != FLASH_COMPLETE)
;;;200    		{
;;;201    			break;
;;;202    		}
;;;203    		
;;;204    		_ulFlashAddr += 2;
;;;205    	}
;;;206    
;;;207      	/* Flash 加锁，禁止写Flash控制寄存器 */
;;;208      	FLASH_Lock();
;;;209    
;;;210      	__set_PRIMASK(0);  		/* 开中断 */	
;;;211    
;;;212    	if (status == FLASH_COMPLETE)
;;;213    	{
;;;214    		return 0;
;;;215    	}
;;;216    	return 2;
;;;217    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  b11e              CBZ      r6,|L4.36|
00001c  07f0              LSLS     r0,r6,#31             ;163
00001e  d003              BEQ      |L4.40|
000020  2001              MOVS     r0,#1                 ;165
000022  e7f8              B        |L4.22|
                  |L4.36|
000024  2000              MOVS     r0,#0                 ;159
000026  e7f6              B        |L4.22|
                  |L4.40|
000028  4632              MOV      r2,r6                 ;168
00002a  4641              MOV      r1,r8                 ;168
00002c  4638              MOV      r0,r7                 ;168
00002e  f7fffffe          BL       bsp_CmpCpuFlash
000032  4604              MOV      r4,r0                 ;168
000034  b154              CBZ      r4,|L4.76|
000036  2001              MOVS     r0,#1                 ;175
000038  f3808810          MSR      PRIMASK,r0            ;175
00003c  f7fffffe          BL       FLASH_Unlock
000040  2035              MOVS     r0,#0x35              ;181
000042  f7fffffe          BL       FLASH_ClearFlag
000046  2c02              CMP      r4,#2                 ;184
000048  d002              BEQ      |L4.80|
00004a  e00b              B        |L4.100|
                  |L4.76|
00004c  2000              MOVS     r0,#0                 ;172
00004e  e7e2              B        |L4.22|
                  |L4.80|
000050  4638              MOV      r0,r7                 ;186
000052  f7fffffe          BL       bsp_GetSector
000056  f7fffffe          BL       FLASH_ErasePage
00005a  4605              MOV      r5,r0                 ;186
00005c  2d04              CMP      r5,#4                 ;187
00005e  d001              BEQ      |L4.100|
000060  2002              MOVS     r0,#2                 ;189
000062  e7d8              B        |L4.22|
                  |L4.100|
000064  2400              MOVS     r4,#0                 ;194
000066  e00e              B        |L4.134|
                  |L4.104|
000068  f8180014          LDRB     r0,[r8,r4,LSL #1]     ;196
00006c  eb080144          ADD      r1,r8,r4,LSL #1       ;197
000070  7849              LDRB     r1,[r1,#1]            ;197
000072  ea402101          ORR      r1,r0,r1,LSL #8       ;197
000076  4638              MOV      r0,r7                 ;198
000078  f7fffffe          BL       FLASH_ProgramHalfWord
00007c  4605              MOV      r5,r0                 ;198
00007e  2d04              CMP      r5,#4                 ;199
000080  d104              BNE      |L4.140|
000082  1cbf              ADDS     r7,r7,#2              ;204
000084  1c64              ADDS     r4,r4,#1              ;194
                  |L4.134|
000086  ebb40f56          CMP      r4,r6,LSR #1          ;194
00008a  d3ed              BCC      |L4.104|
                  |L4.140|
00008c  f7fffffe          BL       FLASH_Lock
000090  2000              MOVS     r0,#0                 ;210
000092  f3808810          MSR      PRIMASK,r0            ;210
000096  2d04              CMP      r5,#4                 ;212
000098  d001              BEQ      |L4.158|
00009a  2002              MOVS     r0,#2                 ;216
00009c  e7bb              B        |L4.22|
                  |L4.158|
00009e  2000              MOVS     r0,#0                 ;214
0000a0  e7b9              B        |L4.22|
;;;218    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      0x08040000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\bsp_cpu_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_cpu_flash_c_4320bcf1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_cpu_flash_c_4320bcf1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_cpu_flash_c_4320bcf1____REVSH|
#line 128
|__asm___15_bsp_cpu_flash_c_4320bcf1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
