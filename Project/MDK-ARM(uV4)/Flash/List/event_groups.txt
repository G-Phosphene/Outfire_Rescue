; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\event_groups.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\event_groups.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\event_groups.crf ..\..\FreeRTOS\event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;612    
;;;613    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  4603              MOV      r3,r0
;;;614    {
;;;615    BaseType_t xWaitConditionMet = pdFALSE;
000002  2000              MOVS     r0,#0
;;;616    
;;;617    	if( xWaitForAllBits == pdFALSE )
000004  2a00              CMP      r2,#0
000006  d003              BEQ      |L1.16|
;;;618    	{
;;;619    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;620    		set.  Is one already set? */
;;;621    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
;;;622    		{
;;;623    			xWaitConditionMet = pdTRUE;
;;;624    		}
;;;625    		else
;;;626    		{
;;;627    			mtCOVERAGE_TEST_MARKER();
;;;628    		}
;;;629    	}
;;;630    	else
;;;631    	{
;;;632    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;633    		Are they set already? */
;;;634    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000008  4399              BICS     r1,r1,r3
00000a  d100              BNE      |L1.14|
;;;635    		{
;;;636    			xWaitConditionMet = pdTRUE;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;637    		}
;;;638    		else
;;;639    		{
;;;640    			mtCOVERAGE_TEST_MARKER();
;;;641    		}
;;;642    	}
;;;643    
;;;644    	return xWaitConditionMet;
;;;645    }
00000e  4770              BX       lr
                  |L1.16|
000010  420b              TST      r3,r1                 ;621
000012  d0fc              BEQ      |L1.14|
000014  2001              MOVS     r0,#1                 ;623
000016  4770              BX       lr
;;;646    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;606    an interrupt. */
;;;607    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  f7ffbffe          B.W      xEventGroupClearBits
;;;608    {
;;;609    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
;;;610    }
;;;611    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;573    
;;;574    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;575    {
000004  4606              MOV      r6,r0
;;;576    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;577    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000006  1d34              ADDS     r4,r6,#4
;;;578    
;;;579    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;580    	{
;;;581    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;582    
;;;583    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
;;;584    		{
;;;585    			/* Unblock the task, returning 0 as the event list is being deleted
;;;586    			and	cannot therefore have any bits set. */
;;;587    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00000c  f1040508          ADD      r5,r4,#8
;;;588    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000010  f04f7700          MOV      r7,#0x2000000
000014  e008              B        |L3.40|
                  |L3.22|
000016  68e0              LDR      r0,[r4,#0xc]          ;587
000018  42a8              CMP      r0,r5                 ;587
00001a  d102              BNE      |L3.34|
00001c  f7fffffe          BL       ulPortSetInterruptMask
                  |L3.32|
000020  e7fe              B        |L3.32|
                  |L3.34|
000022  4639              MOV      r1,r7
000024  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L3.40|
000028  6820              LDR      r0,[r4,#0]            ;583
00002a  2800              CMP      r0,#0                 ;583
00002c  d1f3              BNE      |L3.22|
;;;589    		}
;;;590    
;;;591    		vPortFree( pxEventBits );
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       vPortFree
;;;592    	}
;;;593    	( void ) xTaskResumeAll();
000034  e8bd41f0          POP      {r4-r8,lr}
000038  f7ffbffe          B.W      xTaskResumeAll
;;;594    }
;;;595    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;598    an interrupt. */
;;;599    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  f7ffbffe          B.W      xEventGroupSetBits
;;;600    {
;;;601    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
;;;602    }
;;;603    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;421    
;;;422    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;423    {
000002  460e              MOV      r6,r1
;;;424    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  4604              MOV      r4,r0
;;;425    EventBits_t uxReturn;
;;;426    
;;;427    	/* Check the user is not attempting to clear the bits used by the kernel
;;;428    	itself. */
;;;429    	configASSERT( xEventGroup );
000006  2800              CMP      r0,#0
000008  d004              BEQ      |L5.20|
;;;430    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000a  0e30              LSRS     r0,r6,#24
00000c  d005              BEQ      |L5.26|
00000e  f7fffffe          BL       ulPortSetInterruptMask
                  |L5.18|
000012  e7fe              B        |L5.18|
                  |L5.20|
000014  f7fffffe          BL       ulPortSetInterruptMask
                  |L5.24|
000018  e7fe              B        |L5.24|
                  |L5.26|
;;;431    
;;;432    	taskENTER_CRITICAL();
00001a  f7fffffe          BL       vPortEnterCritical
;;;433    	{
;;;434    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;435    
;;;436    		/* The value returned is the event group value prior to the bits being
;;;437    		cleared. */
;;;438    		uxReturn = pxEventBits->uxEventBits;
00001e  6825              LDR      r5,[r4,#0]
;;;439    
;;;440    		/* Clear the bits. */
;;;441    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000020  ea250006          BIC      r0,r5,r6
000024  6020              STR      r0,[r4,#0]
;;;442    	}
;;;443    	taskEXIT_CRITICAL();
000026  f7fffffe          BL       vPortExitCritical
;;;444    
;;;445    	return uxReturn;
00002a  4628              MOV      r0,r5
;;;446    }
00002c  bd70              POP      {r4-r6,pc}
;;;447    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;137    
;;;138    EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140    EventGroup_t *pxEventBits;
;;;141    
;;;142    	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  2018              MOVS     r0,#0x18
000004  f7fffffe          BL       pvPortMalloc
000008  4604              MOV      r4,r0
;;;143    	if( pxEventBits != NULL )
00000a  b124              CBZ      r4,|L6.22|
;;;144    	{
;;;145    		pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;146    		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L6.22|
;;;147    		traceEVENT_GROUP_CREATE( pxEventBits );
;;;148    	}
;;;149    	else
;;;150    	{
;;;151    		traceEVENT_GROUP_CREATE_FAILED();
;;;152    	}
;;;153    
;;;154    	return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;155    }
000018  bd10              POP      {r4,pc}
;;;156    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;463    
;;;464    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  b510              PUSH     {r4,lr}
;;;465    {
000002  4604              MOV      r4,r0
;;;466    UBaseType_t uxSavedInterruptStatus;
;;;467    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;468    EventBits_t uxReturn;
;;;469    
;;;470    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000004  f7fffffe          BL       ulPortSetInterruptMask
;;;471    	{
;;;472    		uxReturn = pxEventBits->uxEventBits;
000008  6824              LDR      r4,[r4,#0]
;;;473    	}
;;;474    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00000a  f7fffffe          BL       vPortClearInterruptMask
;;;475    
;;;476    	return uxReturn;
00000e  4620              MOV      r0,r4
;;;477    }
000010  bd10              POP      {r4,pc}
;;;478    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;479    
;;;480    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;481    {
000004  4688              MOV      r8,r1
;;;482    ListItem_t *pxListItem, *pxNext;
;;;483    ListItem_t const *pxListEnd;
;;;484    List_t *pxList;
;;;485    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000006  2500              MOVS     r5,#0
;;;486    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000008  4604              MOV      r4,r0
;;;487    BaseType_t xMatchFound = pdFALSE;
;;;488    
;;;489    	/* Check the user is not attempting to set the bits used by the kernel
;;;490    	itself. */
;;;491    	configASSERT( xEventGroup );
00000a  2800              CMP      r0,#0
00000c  d005              BEQ      |L8.26|
;;;492    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000e  ea5f6018          LSRS     r0,r8,#24
000012  d005              BEQ      |L8.32|
000014  f7fffffe          BL       ulPortSetInterruptMask
                  |L8.24|
000018  e7fe              B        |L8.24|
                  |L8.26|
00001a  f7fffffe          BL       ulPortSetInterruptMask
                  |L8.30|
00001e  e7fe              B        |L8.30|
                  |L8.32|
;;;493    
;;;494    	pxList = &( pxEventBits->xTasksWaitingForBits );
000020  1d26              ADDS     r6,r4,#4
;;;495    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000022  f1060708          ADD      r7,r6,#8
;;;496    	vTaskSuspendAll();
000026  f7fffffe          BL       vTaskSuspendAll
;;;497    	{
;;;498    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;499    
;;;500    		pxListItem = listGET_HEAD_ENTRY( pxList );
00002a  68f0              LDR      r0,[r6,#0xc]
;;;501    
;;;502    		/* Set the bits. */
;;;503    		pxEventBits->uxEventBits |= uxBitsToSet;
00002c  6821              LDR      r1,[r4,#0]
00002e  ea410108          ORR      r1,r1,r8
000032  6021              STR      r1,[r4,#0]
;;;504    
;;;505    		/* See if the new bit value should unblock any tasks. */
;;;506    		while( pxListItem != pxListEnd )
000034  e020              B        |L8.120|
                  |L8.54|
;;;507    		{
;;;508    			pxNext = listGET_NEXT( pxListItem );
000036  6846              LDR      r6,[r0,#4]
;;;509    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
000038  6801              LDR      r1,[r0,#0]
;;;510    			xMatchFound = pdFALSE;
00003a  2200              MOVS     r2,#0
;;;511    
;;;512    			/* Split the bits waited for from the control bits. */
;;;513    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
00003c  f001437f          AND      r3,r1,#0xff000000
;;;514    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
000040  f021417f          BIC      r1,r1,#0xff000000
;;;515    
;;;516    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
000044  ea5f1c43          LSLS     r12,r3,#5
000048  d406              BMI      |L8.88|
;;;517    			{
;;;518    				/* Just looking for single bit being set. */
;;;519    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
00004a  f8d4c000          LDR      r12,[r4,#0]
00004e  ea1c0f01          TST      r12,r1
000052  d007              BEQ      |L8.100|
;;;520    				{
;;;521    					xMatchFound = pdTRUE;
000054  2201              MOVS     r2,#1
000056  e005              B        |L8.100|
                  |L8.88|
;;;522    				}
;;;523    				else
;;;524    				{
;;;525    					mtCOVERAGE_TEST_MARKER();
;;;526    				}
;;;527    			}
;;;528    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
000058  f8d4c000          LDR      r12,[r4,#0]
00005c  ea310c0c          BICS     r12,r1,r12
000060  d100              BNE      |L8.100|
;;;529    			{
;;;530    				/* All bits are set. */
;;;531    				xMatchFound = pdTRUE;
000062  2201              MOVS     r2,#1
                  |L8.100|
;;;532    			}
;;;533    			else
;;;534    			{
;;;535    				/* Need all bits to be set, but not all the bits were set. */
;;;536    			}
;;;537    
;;;538    			if( xMatchFound != pdFALSE )
000064  b13a              CBZ      r2,|L8.118|
;;;539    			{
;;;540    				/* The bits match.  Should the bits be cleared on exit? */
;;;541    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
000066  01da              LSLS     r2,r3,#7
000068  d500              BPL      |L8.108|
;;;542    				{
;;;543    					uxBitsToClear |= uxBitsWaitedFor;
00006a  430d              ORRS     r5,r5,r1
                  |L8.108|
;;;544    				}
;;;545    				else
;;;546    				{
;;;547    					mtCOVERAGE_TEST_MARKER();
;;;548    				}
;;;549    
;;;550    				/* Store the actual event flag value in the task's event list
;;;551    				item before removing the task from the event list.  The
;;;552    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;553    				that is was unblocked due to its required bits matching, rather
;;;554    				than because it timed out. */
;;;555    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
00006c  6821              LDR      r1,[r4,#0]
00006e  f0417100          ORR      r1,r1,#0x2000000
000072  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L8.118|
;;;556    			}
;;;557    
;;;558    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;559    			used here as the list item may have been removed from the event list
;;;560    			and inserted into the ready/pending reading list. */
;;;561    			pxListItem = pxNext;
000076  4630              MOV      r0,r6
                  |L8.120|
000078  42b8              CMP      r0,r7                 ;506
00007a  d1dc              BNE      |L8.54|
;;;562    		}
;;;563    
;;;564    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;565    		bit was set in the control word. */
;;;566    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00007c  6820              LDR      r0,[r4,#0]
00007e  43a8              BICS     r0,r0,r5
000080  6020              STR      r0,[r4,#0]
;;;567    	}
;;;568    	( void ) xTaskResumeAll();
000082  f7fffffe          BL       xTaskResumeAll
;;;569    
;;;570    	return pxEventBits->uxEventBits;
000086  6820              LDR      r0,[r4,#0]
;;;571    }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;572    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=1

                  xEventGroupSync PROC
;;;157    
;;;158    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;159    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;160    EventBits_t uxOriginalBitValue, uxReturn;
;;;161    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;162    BaseType_t xAlreadyYielded;
;;;163    BaseType_t xTimeoutOccurred = pdFALSE;
;;;164    
;;;165    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000c  0e28              LSRS     r0,r5,#24
00000e  d002              BEQ      |L9.22|
000010  f7fffffe          BL       ulPortSetInterruptMask
                  |L9.20|
000014  e7fe              B        |L9.20|
                  |L9.22|
;;;166    	configASSERT( uxBitsToWaitFor != 0 );
000016  b1a5              CBZ      r5,|L9.66|
;;;167    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;168    	{
;;;169    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;170    	}
;;;171    	#endif
;;;172    
;;;173    	vTaskSuspendAll();
000018  f7fffffe          BL       vTaskSuspendAll
;;;174    	{
;;;175    		uxOriginalBitValue = pxEventBits->uxEventBits;
00001c  6826              LDR      r6,[r4,#0]
;;;176    
;;;177    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
00001e  4641              MOV      r1,r8
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       xEventGroupSetBits
;;;178    
;;;179    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
000026  ea460608          ORR      r6,r6,r8
00002a  ea350006          BICS     r0,r5,r6
00002e  d00b              BEQ      |L9.72|
;;;180    		{
;;;181    			/* All the rendezvous bits are now set - no need to block. */
;;;182    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
;;;183    
;;;184    			/* Rendezvous always clear the bits.  They will have been cleared
;;;185    			already unless this is the only task in the rendezvous. */
;;;186    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;187    
;;;188    			xTicksToWait = 0;
;;;189    		}
;;;190    		else
;;;191    		{
;;;192    			if( xTicksToWait != ( TickType_t ) 0 )
000030  b17f              CBZ      r7,|L9.82|
;;;193    			{
;;;194    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;195    
;;;196    				/* Store the bits that the calling task is waiting for in the
;;;197    				task's event list item so the kernel knows when a match is
;;;198    				found.  Then enter the blocked state. */
;;;199    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
000032  f04561a0          ORR      r1,r5,#0x5000000
000036  463a              MOV      r2,r7
000038  1d20              ADDS     r0,r4,#4
00003a  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;200    
;;;201    				/* This assignment is obsolete as uxReturn will get set after
;;;202    				the task unblocks, but some compilers mistakenly generate a
;;;203    				warning about uxReturn being returned without being set if the
;;;204    				assignment is omitted. */
;;;205    				uxReturn = 0;
00003e  2600              MOVS     r6,#0
000040  e008              B        |L9.84|
                  |L9.66|
000042  f7fffffe          BL       ulPortSetInterruptMask
                  |L9.70|
000046  e7fe              B        |L9.70|
                  |L9.72|
000048  6820              LDR      r0,[r4,#0]            ;186
00004a  43a8              BICS     r0,r0,r5              ;186
00004c  6020              STR      r0,[r4,#0]            ;186
00004e  2700              MOVS     r7,#0                 ;188
000050  e000              B        |L9.84|
                  |L9.82|
;;;206    			}
;;;207    			else
;;;208    			{
;;;209    				/* The rendezvous bits were not set, but no block time was
;;;210    				specified - just return the current event bit value. */
;;;211    				uxReturn = pxEventBits->uxEventBits;
000052  6826              LDR      r6,[r4,#0]
                  |L9.84|
;;;212    			}
;;;213    		}
;;;214    	}
;;;215    	xAlreadyYielded = xTaskResumeAll();
000054  f7fffffe          BL       xTaskResumeAll
;;;216    
;;;217    	if( xTicksToWait != ( TickType_t ) 0 )
000058  b1a7              CBZ      r7,|L9.132|
;;;218    	{
;;;219    		if( xAlreadyYielded == pdFALSE )
00005a  b908              CBNZ     r0,|L9.96|
;;;220    		{
;;;221    			portYIELD_WITHIN_API();
00005c  f7fffffe          BL       vPortYield
                  |L9.96|
;;;222    		}
;;;223    		else
;;;224    		{
;;;225    			mtCOVERAGE_TEST_MARKER();
;;;226    		}
;;;227    
;;;228    		/* The task blocked to wait for its required bits to be set - at this
;;;229    		point either the required bits were set or the block time expired.  If
;;;230    		the required bits were set they will have been stored in the task's
;;;231    		event list item, and they should now be retrieved then cleared. */
;;;232    		uxReturn = uxTaskResetEventItemValue();
000060  f7fffffe          BL       uxTaskResetEventItemValue
000064  4606              MOV      r6,r0
;;;233    
;;;234    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
000066  01b0              LSLS     r0,r6,#6
000068  d40a              BMI      |L9.128|
;;;235    		{
;;;236    			/* The task timed out, just return the current event bit value. */
;;;237    			taskENTER_CRITICAL();
00006a  f7fffffe          BL       vPortEnterCritical
;;;238    			{
;;;239    				uxReturn = pxEventBits->uxEventBits;
00006e  6826              LDR      r6,[r4,#0]
;;;240    
;;;241    				/* Although the task got here because it timed out before the
;;;242    				bits it was waiting for were set, it is possible that since it
;;;243    				unblocked another task has set the bits.  If this is the case
;;;244    				then it needs to clear the bits before exiting. */
;;;245    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
000070  ea350006          BICS     r0,r5,r6
000074  d102              BNE      |L9.124|
;;;246    				{
;;;247    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000076  ea260005          BIC      r0,r6,r5
00007a  6020              STR      r0,[r4,#0]
                  |L9.124|
;;;248    				}
;;;249    				else
;;;250    				{
;;;251    					mtCOVERAGE_TEST_MARKER();
;;;252    				}
;;;253    			}
;;;254    			taskEXIT_CRITICAL();
00007c  f7fffffe          BL       vPortExitCritical
                  |L9.128|
;;;255    
;;;256    			xTimeoutOccurred = pdTRUE;
;;;257    		}
;;;258    		else
;;;259    		{
;;;260    			/* The task unblocked because the bits were set. */
;;;261    		}
;;;262    
;;;263    		/* Control bits might be set as the task had blocked should not be
;;;264    		returned. */
;;;265    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000080  f026467f          BIC      r6,r6,#0xff000000
                  |L9.132|
;;;266    	}
;;;267    
;;;268    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;269    
;;;270    	return uxReturn;
000084  4630              MOV      r0,r6
;;;271    }
000086  e8bd81f0          POP      {r4-r8,pc}
;;;272    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=1

                  xEventGroupWaitBits PROC
;;;273    
;;;274    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;275    {
000004  460d              MOV      r5,r1
000006  f8dda020          LDR      r10,[sp,#0x20]
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
;;;276    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
00000e  4604              MOV      r4,r0
;;;277    EventBits_t uxReturn, uxControlBits = 0;
000010  2600              MOVS     r6,#0
;;;278    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;279    BaseType_t xTimeoutOccurred = pdFALSE;
;;;280    
;;;281    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;282    	itself, and that at least one bit is being requested. */
;;;283    	configASSERT( xEventGroup );
000012  2800              CMP      r0,#0
000014  d004              BEQ      |L10.32|
;;;284    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000016  0e28              LSRS     r0,r5,#24
000018  d005              BEQ      |L10.38|
00001a  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.30|
00001e  e7fe              B        |L10.30|
                  |L10.32|
000020  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.36|
000024  e7fe              B        |L10.36|
                  |L10.38|
;;;285    	configASSERT( uxBitsToWaitFor != 0 );
000026  b195              CBZ      r5,|L10.78|
;;;286    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;287    	{
;;;288    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;289    	}
;;;290    	#endif
;;;291    
;;;292    	vTaskSuspendAll();
000028  f7fffffe          BL       vTaskSuspendAll
;;;293    	{
;;;294    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
00002c  6827              LDR      r7,[r4,#0]
;;;295    
;;;296    		/* Check to see if the wait condition is already met or not. */
;;;297    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
00002e  464a              MOV      r2,r9
000030  4629              MOV      r1,r5
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       prvTestWaitCondition
;;;298    
;;;299    		if( xWaitConditionMet != pdFALSE )
000038  b160              CBZ      r0,|L10.84|
;;;300    		{
;;;301    			/* The wait condition has already been met so there is no need to
;;;302    			block. */
;;;303    			uxReturn = uxCurrentEventBits;
00003a  463e              MOV      r6,r7
;;;304    			xTicksToWait = ( TickType_t ) 0;
00003c  f04f0a00          MOV      r10,#0
;;;305    
;;;306    			/* Clear the wait bits if requested to do so. */
;;;307    			if( xClearOnExit != pdFALSE )
000040  f1b80f00          CMP      r8,#0
000044  d01a              BEQ      |L10.124|
;;;308    			{
;;;309    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000046  6820              LDR      r0,[r4,#0]
000048  43a8              BICS     r0,r0,r5
00004a  6020              STR      r0,[r4,#0]
00004c  e016              B        |L10.124|
                  |L10.78|
00004e  f7fffffe          BL       ulPortSetInterruptMask
                  |L10.82|
000052  e7fe              B        |L10.82|
                  |L10.84|
;;;310    			}
;;;311    			else
;;;312    			{
;;;313    				mtCOVERAGE_TEST_MARKER();
;;;314    			}
;;;315    		}
;;;316    		else if( xTicksToWait == ( TickType_t ) 0 )
000054  f1ba0f00          CMP      r10,#0
000058  d017              BEQ      |L10.138|
;;;317    		{
;;;318    			/* The wait condition has not been met, but no block time was
;;;319    			specified, so just return the current value. */
;;;320    			uxReturn = uxCurrentEventBits;
;;;321    		}
;;;322    		else
;;;323    		{
;;;324    			/* The task is going to block to wait for its required bits to be
;;;325    			set.  uxControlBits are used to remember the specified behaviour of
;;;326    			this call to xEventGroupWaitBits() - for use when the event bits
;;;327    			unblock the task. */
;;;328    			if( xClearOnExit != pdFALSE )
00005a  f1b80f00          CMP      r8,#0
00005e  d001              BEQ      |L10.100|
;;;329    			{
;;;330    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
000060  f04f7680          MOV      r6,#0x1000000
                  |L10.100|
;;;331    			}
;;;332    			else
;;;333    			{
;;;334    				mtCOVERAGE_TEST_MARKER();
;;;335    			}
;;;336    
;;;337    			if( xWaitForAllBits != pdFALSE )
000064  f1b90f00          CMP      r9,#0
000068  d001              BEQ      |L10.110|
;;;338    			{
;;;339    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
00006a  f0466680          ORR      r6,r6,#0x4000000
                  |L10.110|
;;;340    			}
;;;341    			else
;;;342    			{
;;;343    				mtCOVERAGE_TEST_MARKER();
;;;344    			}
;;;345    
;;;346    			/* Store the bits that the calling task is waiting for in the
;;;347    			task's event list item so the kernel knows when a match is
;;;348    			found.  Then enter the blocked state. */
;;;349    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
00006e  ea450106          ORR      r1,r5,r6
000072  4652              MOV      r2,r10
000074  1d20              ADDS     r0,r4,#4
000076  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;350    
;;;351    			/* This is obsolete as it will get set after the task unblocks, but
;;;352    			some compilers mistakenly generate a warning about the variable
;;;353    			being returned without being set if it is not done. */
;;;354    			uxReturn = 0;
00007a  2600              MOVS     r6,#0
                  |L10.124|
;;;355    
;;;356    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;357    		}
;;;358    	}
;;;359    	xAlreadyYielded = xTaskResumeAll();
00007c  f7fffffe          BL       xTaskResumeAll
;;;360    
;;;361    	if( xTicksToWait != ( TickType_t ) 0 )
000080  f1ba0f00          CMP      r10,#0
000084  d01d              BEQ      |L10.194|
;;;362    	{
;;;363    		if( xAlreadyYielded == pdFALSE )
000086  b110              CBZ      r0,|L10.142|
000088  e003              B        |L10.146|
                  |L10.138|
00008a  463e              MOV      r6,r7                 ;320
00008c  e7f6              B        |L10.124|
                  |L10.142|
;;;364    		{
;;;365    			portYIELD_WITHIN_API();
00008e  f7fffffe          BL       vPortYield
                  |L10.146|
;;;366    		}
;;;367    		else
;;;368    		{
;;;369    			mtCOVERAGE_TEST_MARKER();
;;;370    		}
;;;371    
;;;372    		/* The task blocked to wait for its required bits to be set - at this
;;;373    		point either the required bits were set or the block time expired.  If
;;;374    		the required bits were set they will have been stored in the task's
;;;375    		event list item, and they should now be retrieved then cleared. */
;;;376    		uxReturn = uxTaskResetEventItemValue();
000092  f7fffffe          BL       uxTaskResetEventItemValue
000096  4606              MOV      r6,r0
;;;377    
;;;378    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
000098  01b0              LSLS     r0,r6,#6
00009a  d410              BMI      |L10.190|
;;;379    		{
;;;380    			taskENTER_CRITICAL();
00009c  f7fffffe          BL       vPortEnterCritical
;;;381    			{
;;;382    				/* The task timed out, just return the current event bit value. */
;;;383    				uxReturn = pxEventBits->uxEventBits;
0000a0  6826              LDR      r6,[r4,#0]
;;;384    
;;;385    				/* It is possible that the event bits were updated between this
;;;386    				task leaving the Blocked state and running again. */
;;;387    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
0000a2  464a              MOV      r2,r9
0000a4  4629              MOV      r1,r5
0000a6  4630              MOV      r0,r6
0000a8  f7fffffe          BL       prvTestWaitCondition
0000ac  b128              CBZ      r0,|L10.186|
;;;388    				{
;;;389    					if( xClearOnExit != pdFALSE )
0000ae  f1b80f00          CMP      r8,#0
0000b2  d002              BEQ      |L10.186|
;;;390    					{
;;;391    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000b4  6820              LDR      r0,[r4,#0]
0000b6  43a8              BICS     r0,r0,r5
0000b8  6020              STR      r0,[r4,#0]
                  |L10.186|
;;;392    					}
;;;393    					else
;;;394    					{
;;;395    						mtCOVERAGE_TEST_MARKER();
;;;396    					}
;;;397    				}
;;;398    				else
;;;399    				{
;;;400    					mtCOVERAGE_TEST_MARKER();
;;;401    				}
;;;402    			}
;;;403    			taskEXIT_CRITICAL();
0000ba  f7fffffe          BL       vPortExitCritical
                  |L10.190|
;;;404    
;;;405    			/* Prevent compiler warnings when trace macros are not used. */
;;;406    			xTimeoutOccurred = pdFALSE;
;;;407    		}
;;;408    		else
;;;409    		{
;;;410    			/* The task unblocked because the bits were set. */
;;;411    		}
;;;412    
;;;413    		/* The task blocked so control bits may have been set. */
;;;414    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000be  f026467f          BIC      r6,r6,#0xff000000
                  |L10.194|
;;;415    	}
;;;416    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;417    
;;;418    	return uxReturn;
0000c2  4630              MOV      r0,r6
;;;419    }
0000c4  e8bd87f0          POP      {r4-r10,pc}
;;;420    /*-----------------------------------------------------------*/
                          ENDP

