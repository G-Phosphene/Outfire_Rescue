; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\util.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\util.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\util.crf ..\..\User\Util\util.c]
                          THUMB

                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;163    
;;;164    void delay_ms(u16 nms)
000000  b510              PUSH     {r4,lr}
;;;165    {
;;;166    	int i;
;;;167    	for( i=0;i<nms;i++)
000002  2200              MOVS     r2,#0
;;;168    	{
;;;169    		int a=72000; //at 72MHz 72000 is ok
000004  4c04              LDR      r4,|L1.24|
000006  e004              B        |L1.18|
                  |L1.8|
000008  4621              MOV      r1,r4
                  |L1.10|
;;;170    		while(a--);
00000a  1e49              SUBS     r1,r1,#1
00000c  1c4b              ADDS     r3,r1,#1
00000e  d1fc              BNE      |L1.10|
000010  1c52              ADDS     r2,r2,#1              ;167
                  |L1.18|
000012  4282              CMP      r2,r0                 ;167
000014  dbf8              BLT      |L1.8|
;;;171    	}
;;;172    }
000016  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L1.24|
                          DCD      0x00011940

                          AREA ||i.delay_us||, CODE, READONLY, ALIGN=1

                  delay_us PROC
;;;173    
;;;174    void delay_us(u32 nus)
000000  2200              MOVS     r2,#0
;;;175    {
000002  e004              B        |L2.14|
                  |L2.4|
;;;176    	int i;
;;;177    	for( i=0;i<nus;i++)
;;;178    	{
;;;179    		int a=72;  //at 72MHz 72 is ok,the higher the number the more timing precise
000004  2148              MOVS     r1,#0x48
                  |L2.6|
;;;180    		while(a--);
000006  1e49              SUBS     r1,r1,#1
000008  1c4b              ADDS     r3,r1,#1
00000a  d1fc              BNE      |L2.6|
00000c  1c52              ADDS     r2,r2,#1              ;177
                  |L2.14|
00000e  4282              CMP      r2,r0                 ;177
000010  d3f8              BCC      |L2.4|
;;;181    	}
;;;182    }
000012  4770              BX       lr
                          ENDP


                          AREA ||i.removeDeadBand||, CODE, READONLY, ALIGN=1

                  removeDeadBand PROC
;;;78     
;;;79     float removeDeadBand(float value,float deadBand){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;80     	float factvalue;
;;;81     	if(value > deadBand)
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_cfrcmple
00000e  d205              BCS      |L3.28|
;;;82     		factvalue = value - deadBand;
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  e8bd4070          POP      {r4-r6,lr}
000018  f7ffbffe          B.W      __aeabi_fsub
                  |L3.28|
;;;83     	else
;;;84     		factvalue = value + deadBand;
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      __aeabi_fadd
;;;85     	return factvalue;
;;;86     }
;;;87     
                          ENDP


                          AREA ||i.utilFilter||, CODE, READONLY, ALIGN=1

                  utilFilter PROC
;;;118    /*--------- 作用：一节平滑滤波，跟低通类似 ---------*/
;;;119    float utilFilter(utilFilter_t *f, float signal) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
;;;120        register float z1;
;;;121    		//表达式可翻译为 out = out_last + (in - out_last)* (0.05 || 0.04)
;;;122        z1 = f->z1 + (signal - f->z1) * f->tc;			
000006  6865              LDR      r5,[r4,#4]
000008  4629              MOV      r1,r5
00000a  f7fffffe          BL       __aeabi_fsub
00000e  6821              LDR      r1,[r4,#0]
000010  f7fffffe          BL       __aeabi_fmul
000014  4629              MOV      r1,r5
000016  f7fffffe          BL       __aeabi_fadd
;;;123    
;;;124        f->z1 = z1;
00001a  6060              STR      r0,[r4,#4]
;;;125        return z1;
;;;126    }
00001c  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||i.utilFilter2||, CODE, READONLY, ALIGN=1

                  utilFilter2 PROC
;;;128    /*--------- 作用：进行二阶平滑滤波 ---------*/
;;;129    float utilFilter2(utilFilter_t *f, float signal) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;130        return utilFilter(&f[0], utilFilter(&f[1],signal));
000004  f1040008          ADD      r0,r4,#8
000008  f7fffffe          BL       utilFilter
00000c  4601              MOV      r1,r0
00000e  4620              MOV      r0,r4
000010  e8bd4010          POP      {r4,lr}
000014  f7ffbffe          B.W      utilFilter
;;;131    }
;;;132    
                          ENDP


                          AREA ||i.utilFilter3||, CODE, READONLY, ALIGN=1

                  utilFilter3 PROC
;;;134    /*--------- 作用：进行三阶平滑滤波 ---------*/
;;;135    float utilFilter3(utilFilter_t *f, float signal) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;136        return utilFilter(&f[0], utilFilter(&f[1], utilFilter(&f[2], signal)));
000004  f1040010          ADD      r0,r4,#0x10
000008  f7fffffe          BL       utilFilter
00000c  4601              MOV      r1,r0
00000e  f1040008          ADD      r0,r4,#8
000012  f7fffffe          BL       utilFilter
000016  4601              MOV      r1,r0
000018  4620              MOV      r0,r4
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      utilFilter
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.utilFilterInit||, CODE, READONLY, ALIGN=1

                  utilFilterInit PROC
;;;102    
;;;103    void utilFilterInit(utilFilter_t *f, float dt, float tau, float setpoint) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
000006  4611              MOV      r1,r2
000008  461d              MOV      r5,r3
;;;104        f->tc = dt / tau;			//tau=0.1 ==> f->tc= 0.05		tau=0.125 ==> f->tc= 0.04	
00000a  f7fffffe          BL       __aeabi_fdiv
00000e  6020              STR      r0,[r4,#0]
;;;105        utilFilterReset(f, setpoint);
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  e8bd4070          POP      {r4-r6,lr}
000018  f7ffbffe          B.W      utilFilterReset
;;;106    }
;;;107    
                          ENDP


                          AREA ||i.utilFilterInit2||, CODE, READONLY, ALIGN=1

                  utilFilterInit2 PROC
;;;107    
;;;108    void utilFilterInit2(utilFilter_t *f, float dt, float tau, float setpoint) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;109        utilFilterInit(&f[0], dt, tau, setpoint);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       utilFilterInit
;;;110        utilFilterInit(&f[1], dt, tau, setpoint);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  f1040008          ADD      r0,r4,#8
000022  e8bd41f0          POP      {r4-r8,lr}
000026  f7ffbffe          B.W      utilFilterInit
;;;111    }
;;;112    
                          ENDP


                          AREA ||i.utilFilterInit3||, CODE, READONLY, ALIGN=1

                  utilFilterInit3 PROC
;;;112    
;;;113    void utilFilterInit3(utilFilter_t *f, float dt, float tau, float setpoint) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;114        utilFilterInit(&f[0], dt, tau, setpoint);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       utilFilterInit
;;;115        utilFilterInit(&f[1], dt, tau, setpoint);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  f1040008          ADD      r0,r4,#8
000022  f7fffffe          BL       utilFilterInit
;;;116        utilFilterInit(&f[2], dt, tau, setpoint);
000026  463b              MOV      r3,r7
000028  4632              MOV      r2,r6
00002a  4629              MOV      r1,r5
00002c  f1040010          ADD      r0,r4,#0x10
000030  e8bd41f0          POP      {r4-r8,lr}
000034  f7ffbffe          B.W      utilFilterInit
;;;117    }
;;;118    /*--------- 作用：一节平滑滤波，跟低通类似 ---------*/
                          ENDP


                          AREA ||i.utilFilterReset||, CODE, READONLY, ALIGN=1

                  utilFilterReset PROC
;;;87     
;;;88     void utilFilterReset(utilFilter_t *f, float setpoint) {
000000  6041              STR      r1,[r0,#4]
;;;89         f->z1 = setpoint;
;;;90     }
000002  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.utilFilterReset2||, CODE, READONLY, ALIGN=1

                  utilFilterReset2 PROC
;;;91     
;;;92     void utilFilterReset2(utilFilter_t *f, float setpoint){
000000  b500              PUSH     {lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;93         utilFilterReset(&f[0], setpoint);
000006  4619              MOV      r1,r3
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       utilFilterReset
;;;94         utilFilterReset(&f[1], setpoint);		
00000e  4619              MOV      r1,r3
000010  f1020008          ADD      r0,r2,#8
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      utilFilterReset
;;;95     }
;;;96     
                          ENDP


                          AREA ||i.utilFilterReset3||, CODE, READONLY, ALIGN=1

                  utilFilterReset3 PROC
;;;96     
;;;97     void utilFilterReset3(utilFilter_t *f, float setpoint) {
000000  b500              PUSH     {lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;98         utilFilterReset(&f[0], setpoint);
000006  4619              MOV      r1,r3
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       utilFilterReset
;;;99         utilFilterReset(&f[1], setpoint);
00000e  4619              MOV      r1,r3
000010  f1020008          ADD      r0,r2,#8
000014  f7fffffe          BL       utilFilterReset
;;;100        utilFilterReset(&f[2], setpoint);
000018  4619              MOV      r1,r3
00001a  f1020010          ADD      r0,r2,#0x10
00001e  f85deb04          POP      {lr}
000022  f7ffbffe          B.W      utilFilterReset
;;;101    }
;;;102    
                          ENDP


                          AREA ||i.utilFirFilter||, CODE, READONLY, ALIGN=1

                  utilFirFilter PROC
;;;138    
;;;139    float utilFirFilter(utilFirFilter_t *f, float newValue) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;140        float result = 0.0f;
000006  2700              MOVS     r7,#0
;;;141        int i;
;;;142    
;;;143        f->data[f->i] = newValue;
000008  7a6a              LDRB     r2,[r5,#9]
00000a  6868              LDR      r0,[r5,#4]
00000c  f8401022          STR      r1,[r0,r2,LSL #2]
;;;144        f->i = (f->i + 1) % f->n;
000010  7a68              LDRB     r0,[r5,#9]
000012  7a2e              LDRB     r6,[r5,#8]
000014  1c40              ADDS     r0,r0,#1
000016  fbb0f1f6          UDIV     r1,r0,r6
00001a  fb060011          MLS      r0,r6,r1,r0
00001e  f00008ff          AND      r8,r0,#0xff
000022  f8858009          STRB     r8,[r5,#9]
;;;145    
;;;146        for (i = 0; i < f->n; i++)
000026  2400              MOVS     r4,#0
000028  e012              B        |L13.80|
                  |L13.42|
;;;147            result += f->window[i] * f->data[(f->i + i) % f->n];
00002a  eb080004          ADD      r0,r8,r4
00002e  fb90f1f6          SDIV     r1,r0,r6
000032  fb060011          MLS      r0,r6,r1,r0
000036  6869              LDR      r1,[r5,#4]
000038  f8511020          LDR      r1,[r1,r0,LSL #2]
00003c  6828              LDR      r0,[r5,#0]
00003e  f8500024          LDR      r0,[r0,r4,LSL #2]
000042  f7fffffe          BL       __aeabi_fmul
000046  4639              MOV      r1,r7
000048  f7fffffe          BL       __aeabi_fadd
00004c  4607              MOV      r7,r0
00004e  1c64              ADDS     r4,r4,#1              ;146
                  |L13.80|
000050  42a6              CMP      r6,r4                 ;146
000052  dcea              BGT      |L13.42|
;;;148    
;;;149        return result;
000054  4638              MOV      r0,r7
;;;150    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;151    
                          ENDP


                          AREA ||i.utilFirFilterInit||, CODE, READONLY, ALIGN=1

                  utilFirFilterInit PROC
;;;151    
;;;152    void utilFirFilterInit(utilFirFilter_t *f, const float *window, float *buffer, uint8_t n) {
000000  b510              PUSH     {r4,lr}
;;;153        int i;
;;;154    
;;;155        f->window = window;
000002  6001              STR      r1,[r0,#0]
;;;156        f->data = buffer;
000004  6042              STR      r2,[r0,#4]
;;;157        f->n = n;
000006  7203              STRB     r3,[r0,#8]
;;;158        f->i = 0;
000008  2200              MOVS     r2,#0
00000a  7242              STRB     r2,[r0,#9]
;;;159    
;;;160        for (i = 0; i < n; i++)
00000c  2100              MOVS     r1,#0
00000e  e003              B        |L14.24|
                  |L14.16|
;;;161            f->data[i] = 0.0f;
000010  6844              LDR      r4,[r0,#4]
000012  f8442021          STR      r2,[r4,r1,LSL #2]
000016  1c49              ADDS     r1,r1,#1              ;160
                  |L14.24|
000018  4299              CMP      r1,r3                 ;160
00001a  dbf9              BLT      |L14.16|
;;;162    }
00001c  bd10              POP      {r4,pc}
;;;163    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Util\\util.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_util_c_43fe29a0____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_util_c_43fe29a0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_util_c_43fe29a0____REVSH|
#line 128
|__asm___6_util_c_43fe29a0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
