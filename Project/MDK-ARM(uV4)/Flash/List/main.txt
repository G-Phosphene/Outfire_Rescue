; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.app_Init||, CODE, READONLY, ALIGN=1

                  app_Init PROC
;;;41     
;;;42     void app_Init(void)
000000  b510              PUSH     {r4,lr}
;;;43     {
;;;44     	
;;;45     	
;;;46     	bsp_Init();
000002  f7fffffe          BL       bsp_Init
;;;47     	driver_Init();
000006  f7fffffe          BL       driver_Init
;;;48     	app_ParameterInit();
00000a  f7fffffe          BL       app_ParameterInit
;;;49     	GUI_Init();								//1
00000e  f7fffffe          BL       GUI_Init
;;;50     	
;;;51     	appfindFire_Init();
000012  f7fffffe          BL       appfindFire_Init
;;;52     	app_walkTaskInit();	
000016  f7fffffe          BL       app_walkTaskInit
;;;53     	
;;;54     	app_echoInit();					//3
00001a  f7fffffe          BL       app_echoInit
;;;55     	app_WorkTaskInit();    // 4
00001e  f7fffffe          BL       app_WorkTaskInit
;;;56     	app_inputTaskInit();     //2
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      app_inputTaskInit
;;;57     	
;;;58     			//4
;;;59     								//删除当前任务
;;;60     }
;;;61     int main(void)
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;60     }
;;;61     int main(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63     	/* 
;;;64     	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;65     	  这样做的好处是：
;;;66     	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;67     	  2. 保证系统正常启动，不受别的中断影响。
;;;68     	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;69     	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;70     	  和cpsie i是等效的。
;;;71          */
;;;72     	__set_PRIMASK(1);  
000002  2001              MOVS     r0,#1
000004  f3808810          MSR      PRIMASK,r0
;;;73     	
;;;74     	/* 硬件初始化 */
;;;75     	//bsp_Init(); 
;;;76     	
;;;77     	/* 创建任务 */
;;;78     	app_Init();
000008  f7fffffe          BL       app_Init
;;;79     //	xTaskCreate(app_Init,"INIT",INIT_STACK_SIZE,NULL,INIT_PRIORITY,NULL);
;;;80     	
;;;81         /* 启动调度，开始执行任务 */
;;;82        vTaskStartScheduler();
00000c  f7fffffe          BL       vTaskStartScheduler
;;;83     
;;;84     	/* 
;;;85     	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;86     	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;87     	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;88     	*/
;;;89     //	while(1);
;;;90     }
000010  2000              MOVS     r0,#0
000012  bd10              POP      {r4,pc}
;;;91     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_app_Init____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_app_Init____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_app_Init____REVSH|
#line 128
|__asm___6_main_c_app_Init____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
