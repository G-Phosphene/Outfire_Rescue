; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp\BSP_Timer.c]
                          THUMB

                          AREA ||i.BSP_TIM_ICAP_Init||, CODE, READONLY, ALIGN=2

                  BSP_TIM_ICAP_Init PROC
;;;220    */
;;;221    void BSP_TIM_ICAP_Init(TIM_TypeDef* BSP_TIMx,uint32_t Period,u16 Prescaler,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;222    											BSP_TIM_ICAP_TypeDef* ICAP1,
;;;223    											BSP_TIM_ICAP_TypeDef* ICAP2,
;;;224    											BSP_TIM_ICAP_TypeDef* ICAP3,
;;;225    											BSP_TIM_ICAP_TypeDef* ICAP4,
;;;226    											u8 PreemptionPriority, u8 SubPriority){
000004  b087              SUB      sp,sp,#0x1c
000006  460e              MOV      r6,r1
000008  e9dd9b16          LDRD     r9,r11,[sp,#0x58]
00000c  e9dd8a14          LDRD     r8,r10,[sp,#0x50]
000010  4617              MOV      r7,r2
000012  461d              MOV      r5,r3
;;;227    	TIM_TimeBaseInitTypeDef		TIM_TimeBaseStructure;
;;;228    	TIM_ICInitTypeDef					TIM_ICInitStructure;
;;;229    	NVIC_InitTypeDef 					NVIC_InitStructure;
;;;230    	uint16_t TIM_IT;
;;;231    	
;;;232    	/*************初始化TIMx时钟***************/
;;;233    	BSP_TIM_RCC_Init(BSP_TIMx);	//使能定时器TIMx时钟
000014  9807              LDR      r0,[sp,#0x1c]
000016  f7fffffe          BL       BSP_TIM_RCC_Init
;;;234    	
;;;235    	/*************配置ICAP输出引脚***************/
;;;236    	if(ICAP1 != NULL){
00001a  b145              CBZ      r5,|L1.46|
;;;237    		BSP_GPIO_Init(ICAP1->ICAP_GPIO,GPIO_Mode_AF_PP);	//配置ICAP1引脚为复用推挽模式
00001c  2118              MOVS     r1,#0x18
00001e  6828              LDR      r0,[r5,#0]
000020  f7fffffe          BL       BSP_GPIO_Init
;;;238    		GPIO_Pin_TO_PinAFConfig(TIM_TO_GPIO_PinRemap(BSP_TIMx));	//ICAP1引脚复用为定时器TIMx
000024  9807              LDR      r0,[sp,#0x1c]
000026  f7fffffe          BL       TIM_TO_GPIO_PinRemap
00002a  f7fffffe          BL       GPIO_Pin_TO_PinAFConfig
                  |L1.46|
;;;239    	}
;;;240    	if(ICAP2 != NULL){
00002e  f1b80f00          CMP      r8,#0
000032  d009              BEQ      |L1.72|
;;;241    		BSP_GPIO_Init(ICAP2->ICAP_GPIO,GPIO_Mode_AF_PP);	//配置ICAP2引脚为复用推挽模式
000034  2118              MOVS     r1,#0x18
000036  f8d80000          LDR      r0,[r8,#0]
00003a  f7fffffe          BL       BSP_GPIO_Init
;;;242    		GPIO_Pin_TO_PinAFConfig(TIM_TO_GPIO_PinRemap(BSP_TIMx));	//ICAP2引脚复用为定时器TIMx
00003e  9807              LDR      r0,[sp,#0x1c]
000040  f7fffffe          BL       TIM_TO_GPIO_PinRemap
000044  f7fffffe          BL       GPIO_Pin_TO_PinAFConfig
                  |L1.72|
;;;243    	}
;;;244    	if(ICAP3 != NULL){
000048  f1ba0f00          CMP      r10,#0
00004c  d008              BEQ      |L1.96|
;;;245    		BSP_GPIO_Init(ICAP1->ICAP_GPIO,GPIO_Mode_AF_PP);	//配置ICAP3引脚为复用推挽模式
00004e  2118              MOVS     r1,#0x18
000050  6828              LDR      r0,[r5,#0]
000052  f7fffffe          BL       BSP_GPIO_Init
;;;246    		GPIO_Pin_TO_PinAFConfig(TIM_TO_GPIO_PinRemap(BSP_TIMx));	//ICAP3引脚复用为定时器TIMx
000056  9807              LDR      r0,[sp,#0x1c]
000058  f7fffffe          BL       TIM_TO_GPIO_PinRemap
00005c  f7fffffe          BL       GPIO_Pin_TO_PinAFConfig
                  |L1.96|
;;;247    	}
;;;248    	if(ICAP4 != NULL){
000060  f1b90f00          CMP      r9,#0
000064  d009              BEQ      |L1.122|
;;;249    		BSP_GPIO_Init(ICAP4->ICAP_GPIO,GPIO_Mode_AF_PP);	//配置ICAP4引脚为复用推挽模式
000066  2118              MOVS     r1,#0x18
000068  f8d90000          LDR      r0,[r9,#0]
00006c  f7fffffe          BL       BSP_GPIO_Init
;;;250    		GPIO_Pin_TO_PinAFConfig(TIM_TO_GPIO_PinRemap(BSP_TIMx));	//ICAP4引脚复用为定时器TIMx
000070  9807              LDR      r0,[sp,#0x1c]
000072  f7fffffe          BL       TIM_TO_GPIO_PinRemap
000076  f7fffffe          BL       GPIO_Pin_TO_PinAFConfig
                  |L1.122|
;;;251    	}
;;;252    	
;;;253    	/*************配置定时器TIMx***************/
;;;254    	TIM_TimeBaseStructure.TIM_Prescaler = Period;  	//定时器分频
00007a  f8ad6010          STRH     r6,[sp,#0x10]
;;;255    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //向上计数模式
00007e  2600              MOVS     r6,#0
000080  f8ad6012          STRH     r6,[sp,#0x12]
;;;256    	TIM_TimeBaseStructure.TIM_Period = Prescaler;   //自动重装载值
000084  f8ad7014          STRH     r7,[sp,#0x14]
;;;257    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; 
000088  f8ad6016          STRH     r6,[sp,#0x16]
;;;258    	
;;;259    	TIM_TimeBaseInit(BSP_TIMx,&TIM_TimeBaseStructure);//初始化定时器TIMx
00008c  a904              ADD      r1,sp,#0x10
00008e  9807              LDR      r0,[sp,#0x1c]
000090  f7fffffe          BL       TIM_TimeBaseInit
;;;260    	
;;;261    	
;;;262    	/*************初始化TIMx各通道的输入捕获参数***************/
;;;263    	if(ICAP1 != NULL){
;;;264    		TIM_IT |= TIM_IT_CC1;
;;;265    		TIM_ICInitStructure.TIM_Channel 		= TIM_Channel_1; 						//选择输入端 IC1映射到TI1上
;;;266    		TIM_ICInitStructure.TIM_ICPolarity 	= ICAP1->TIM_ICPolarity;			//上升沿捕获
;;;267    		TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI1上
000094  2701              MOVS     r7,#1
000096  b185              CBZ      r5,|L1.186|
000098  f0440402          ORR      r4,r4,#2              ;264
00009c  f8ad6004          STRH     r6,[sp,#4]            ;265
0000a0  88a8              LDRH     r0,[r5,#4]            ;266
0000a2  f8ad0006          STRH     r0,[sp,#6]            ;266
0000a6  f8ad7008          STRH     r7,[sp,#8]
;;;268    		TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 					//配置输入分频,不分频 
0000aa  f8ad600a          STRH     r6,[sp,#0xa]
;;;269    		TIM_ICInitStructure.TIM_ICFilter 		= 0x00;											//配置输入滤波器 不滤波
0000ae  f8ad600c          STRH     r6,[sp,#0xc]
;;;270    		TIM_ICInit(BSP_TIMx, &TIM_ICInitStructure);
0000b2  a901              ADD      r1,sp,#4
0000b4  9807              LDR      r0,[sp,#0x1c]
0000b6  f7fffffe          BL       TIM_ICInit
                  |L1.186|
;;;271    	}
;;;272    	if(ICAP2 != NULL){
0000ba  f1b80f00          CMP      r8,#0
0000be  d011              BEQ      |L1.228|
;;;273    		TIM_IT |= TIM_IT_CC2;
0000c0  f0440404          ORR      r4,r4,#4
;;;274    		TIM_ICInitStructure.TIM_Channel 		= TIM_Channel_2; 						//选择输入端 IC2映射到TI2上
0000c4  2004              MOVS     r0,#4
0000c6  f8ad0004          STRH     r0,[sp,#4]
;;;275    		TIM_ICInitStructure.TIM_ICPolarity 	= ICAP1->TIM_ICPolarity;			//上升沿捕获
0000ca  88a8              LDRH     r0,[r5,#4]
0000cc  f8ad0006          STRH     r0,[sp,#6]
;;;276    		TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI2上
0000d0  f8ad7008          STRH     r7,[sp,#8]
;;;277    		TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 					//配置输入分频,不分频 
0000d4  f8ad600a          STRH     r6,[sp,#0xa]
;;;278    		TIM_ICInitStructure.TIM_ICFilter 		= 0x00;											//配置输入滤波器 不滤波
0000d8  f8ad600c          STRH     r6,[sp,#0xc]
;;;279    		TIM_ICInit(BSP_TIMx, &TIM_ICInitStructure);
0000dc  a901              ADD      r1,sp,#4
0000de  9807              LDR      r0,[sp,#0x1c]
0000e0  f7fffffe          BL       TIM_ICInit
                  |L1.228|
;;;280    	}
;;;281    	if(ICAP3 != NULL){
0000e4  f1ba0f00          CMP      r10,#0
0000e8  d011              BEQ      |L1.270|
;;;282    		TIM_IT |= TIM_IT_CC3;
0000ea  f0440408          ORR      r4,r4,#8
;;;283    		TIM_ICInitStructure.TIM_Channel 		= TIM_Channel_3; 						//选择输入端 IC3映射到TI3上
0000ee  2008              MOVS     r0,#8
0000f0  f8ad0004          STRH     r0,[sp,#4]
;;;284    		TIM_ICInitStructure.TIM_ICPolarity 	= ICAP1->TIM_ICPolarity;			//上升沿捕获
0000f4  88a8              LDRH     r0,[r5,#4]
0000f6  f8ad0006          STRH     r0,[sp,#6]
;;;285    		TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI3上
0000fa  f8ad7008          STRH     r7,[sp,#8]
;;;286    		TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 					//配置输入分频,不分频 
0000fe  f8ad600a          STRH     r6,[sp,#0xa]
;;;287    		TIM_ICInitStructure.TIM_ICFilter 		= 0x00;											//配置输入滤波器 不滤波
000102  f8ad600c          STRH     r6,[sp,#0xc]
;;;288    		TIM_ICInit(BSP_TIMx, &TIM_ICInitStructure);
000106  a901              ADD      r1,sp,#4
000108  9807              LDR      r0,[sp,#0x1c]
00010a  f7fffffe          BL       TIM_ICInit
                  |L1.270|
;;;289    	}
;;;290    	if(ICAP4 != NULL){
00010e  f1b90f00          CMP      r9,#0
000112  d011              BEQ      |L1.312|
;;;291    		TIM_IT |= TIM_IT_CC4;
000114  f0440410          ORR      r4,r4,#0x10
;;;292    		TIM_ICInitStructure.TIM_Channel 		= TIM_Channel_4; 						//选择输入端 IC4映射到TI4上
000118  200c              MOVS     r0,#0xc
00011a  f8ad0004          STRH     r0,[sp,#4]
;;;293    		TIM_ICInitStructure.TIM_ICPolarity 	= ICAP1->TIM_ICPolarity;			//上升沿捕获
00011e  88a8              LDRH     r0,[r5,#4]
000120  f8ad0006          STRH     r0,[sp,#6]
;;;294    		TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI4上
000124  f8ad7008          STRH     r7,[sp,#8]
;;;295    		TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 					//配置输入分频,不分频 
000128  f8ad600a          STRH     r6,[sp,#0xa]
;;;296    		TIM_ICInitStructure.TIM_ICFilter 		= 0x00;											//配置输入滤波器 不滤波
00012c  f8ad600c          STRH     r6,[sp,#0xc]
;;;297    		TIM_ICInit(BSP_TIMx, &TIM_ICInitStructure);
000130  a901              ADD      r1,sp,#4
000132  9807              LDR      r0,[sp,#0x1c]
000134  f7fffffe          BL       TIM_ICInit
                  |L1.312|
;;;298    	}
;;;299    	
;;;300    	TIM_ITConfig(TIM5,TIM_IT_Update | TIM_IT,ENABLE);//允许更新中断 ,允许通道捕获中断
000138  f0440101          ORR      r1,r4,#1
00013c  2201              MOVS     r2,#1
00013e  480d              LDR      r0,|L1.372|
000140  f7fffffe          BL       TIM_ITConfig
;;;301    //	TIM_Cmd(BSP_TIMx, ENABLE);  //使能TIMx定时器
;;;302    	
;;;303    	
;;;304    	/*********************配置NVIC寄存器***********************/
;;;305    	if( (PreemptionPriority != 0xff) && (SubPriority != 0xff) ){
000144  f1bb0fff          CMP      r11,#0xff
000148  d011              BEQ      |L1.366|
00014a  9818              LDR      r0,[sp,#0x60]
00014c  28ff              CMP      r0,#0xff
00014e  d00e              BEQ      |L1.366|
;;;306    		NVIC_InitStructure.NVIC_IRQChannel = TIM_TO_NVIC_IRQChannel(BSP_TIMx);	//定时器TIMx中断
000150  9807              LDR      r0,[sp,#0x1c]
000152  f7fffffe          BL       TIM_TO_NVIC_IRQChannel
000156  f88d0000          STRB     r0,[sp,#0]
;;;307    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PreemptionPriority;//抢占优先级
00015a  f88db001          STRB     r11,[sp,#1]
;;;308    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = SubPriority;		//子优先级
00015e  9818              LDR      r0,[sp,#0x60]
000160  f88d0002          STRB     r0,[sp,#2]
;;;309    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
000164  f88d7003          STRB     r7,[sp,#3]
;;;310    		NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化NVIC寄存器
000168  4668              MOV      r0,sp
00016a  f7fffffe          BL       NVIC_Init
                  |L1.366|
;;;311    	}
;;;312    }
00016e  b00b              ADD      sp,sp,#0x2c
000170  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L1.372|
                          DCD      0x40000c00

                          AREA ||i.BSP_TIM_INT_Init||, CODE, READONLY, ALIGN=1

                  BSP_TIM_INT_Init PROC
;;;179    */
;;;180    void BSP_TIM_INT_Init(TIM_TypeDef* BSP_TIMx,uint32_t Period,u16 Prescaler,u8 PreemptionPriority,u8 SubPriority){
000000  e92d41ff          PUSH     {r0-r8,lr}
000004  4680              MOV      r8,r0
000006  9f0a              LDR      r7,[sp,#0x28]
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
00000c  461d              MOV      r5,r3
;;;181    	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;182    	NVIC_InitTypeDef NVIC_InitStructure;
;;;183    	
;;;184    	BSP_TIM_RCC_Init(BSP_TIMx);		//使能定时器TIMx时钟
00000e  4640              MOV      r0,r8
000010  f7fffffe          BL       BSP_TIM_RCC_Init
;;;185    	
;;;186    	TIM_TimeBaseInitStructure.TIM_Period 			= Period; 			//自动重装载值
000014  f8ad4008          STRH     r4,[sp,#8]
;;;187    	TIM_TimeBaseInitStructure.TIM_Prescaler 		= Prescaler;  	//定时器分频
000018  f8ad6004          STRH     r6,[sp,#4]
;;;188    	TIM_TimeBaseInitStructure.TIM_CounterMode 		= TIM_CounterMode_Up; //向上计数模式
00001c  2100              MOVS     r1,#0
00001e  f8ad1006          STRH     r1,[sp,#6]
;;;189    	TIM_TimeBaseInitStructure.TIM_ClockDivision 	= TIM_CKD_DIV1; 
000022  f8ad100a          STRH     r1,[sp,#0xa]
;;;190    	
;;;191    	TIM_TimeBaseInit(BSP_TIMx,&TIM_TimeBaseInitStructure);
000026  a901              ADD      r1,sp,#4
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       TIM_TimeBaseInit
;;;192    	
;;;193    	TIM_ITConfig(BSP_TIMx,TIM_IT_Update,ENABLE); //允许定时器TIMx更新中断
00002e  2201              MOVS     r2,#1
000030  4611              MOV      r1,r2
000032  4640              MOV      r0,r8
000034  f7fffffe          BL       TIM_ITConfig
;;;194    	TIM_Cmd(BSP_TIMx,ENABLE); 		//使能定时器TIMx
000038  2101              MOVS     r1,#1
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       TIM_Cmd
;;;195    	
;;;196    	NVIC_InitStructure.NVIC_IRQChannel = TIM_TO_NVIC_IRQChannel(BSP_TIMx); //定时器TIMx中断
000040  4640              MOV      r0,r8
000042  f7fffffe          BL       TIM_TO_NVIC_IRQChannel
000046  f88d0000          STRB     r0,[sp,#0]
;;;197    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PreemptionPriority; //抢占优先级
00004a  f88d5001          STRB     r5,[sp,#1]
;;;198    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = SubPriority; //子优先级
00004e  f88d7002          STRB     r7,[sp,#2]
;;;199    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000052  2001              MOVS     r0,#1
000054  f88d0003          STRB     r0,[sp,#3]
;;;200    	NVIC_Init(&NVIC_InitStructure);		
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       NVIC_Init
;;;201    }
00005e  e8bd81ff          POP      {r0-r8,pc}
;;;202    	
                          ENDP


                          AREA ||i.BSP_TIM_Init||, CODE, READONLY, ALIGN=1

                  BSP_TIM_Init PROC
;;;149    */
;;;150    void BSP_TIM_Init(TIM_TypeDef* BSP_TIMx,uint32_t Period,u16 Prescaler){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;151    	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;152    	
;;;153    	BSP_TIM_RCC_Init(BSP_TIMx);		//使能定时器TIMx时钟
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       BSP_TIM_RCC_Init
;;;154    	
;;;155    	TIM_TimeBaseInitStructure.TIM_Period 			= Period; 			//自动重装载值
00000e  f8ad4004          STRH     r4,[sp,#4]
;;;156    	TIM_TimeBaseInitStructure.TIM_Prescaler 		= Prescaler;  	//定时器分频
000012  f8ad5000          STRH     r5,[sp,#0]
;;;157    	TIM_TimeBaseInitStructure.TIM_CounterMode 		= TIM_CounterMode_Up; //向上计数模式
000016  2100              MOVS     r1,#0
000018  f8ad1002          STRH     r1,[sp,#2]
;;;158    	TIM_TimeBaseInitStructure.TIM_ClockDivision 	= TIM_CKD_DIV1; 
00001c  f8ad1006          STRH     r1,[sp,#6]
;;;159    	
;;;160    	TIM_TimeBaseInit(BSP_TIMx,&TIM_TimeBaseInitStructure);
000020  4669              MOV      r1,sp
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;161    	
;;;162    	TIM_ARRPreloadConfig(BSP_TIMx, ENABLE);	
000028  2101              MOVS     r1,#1
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       TIM_ARRPreloadConfig
;;;163    	TIM_Cmd(BSP_TIMx,ENABLE); 		//使能定时器TIMx	
000030  2101              MOVS     r1,#1
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       TIM_Cmd
;;;164    }
000038  bdfe              POP      {r1-r7,pc}
;;;165    
                          ENDP


                          AREA ||i.BSP_TIM_RCC_Init||, CODE, READONLY, ALIGN=2

                  BSP_TIM_RCC_Init PROC
;;;34     */
;;;35     void BSP_TIM_RCC_Init(TIM_TypeDef* BSP_TIMx){
000000  4931              LDR      r1,|L4.200|
;;;36     	if(BSP_TIMx == TIM1)
000002  4288              CMP      r0,r1
000004  d103              BNE      |L4.14|
;;;37     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);		//使能定时器TIM1的时钟
000006  2101              MOVS     r1,#1
000008  14c0              ASRS     r0,r0,#19
00000a  f7ffbffe          B.W      RCC_APB2PeriphClockCmd
                  |L4.14|
;;;38     	else if(BSP_TIMx == TIM2)
00000e  f1b04f80          CMP      r0,#0x40000000
000012  d006              BEQ      |L4.34|
;;;39     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);		//使能定时器TIM2的时钟
;;;40     	else if(BSP_TIMx == TIM3)
000014  492d              LDR      r1,|L4.204|
000016  4288              CMP      r0,r1
000018  d107              BNE      |L4.42|
;;;41     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);		//使能定时器TIM3的时钟
00001a  2101              MOVS     r1,#1
00001c  2002              MOVS     r0,#2
00001e  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.34|
000022  2101              MOVS     r1,#1                 ;39
000024  4608              MOV      r0,r1                 ;39
000026  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.42|
;;;42     	else if(BSP_TIMx == TIM4)
00002a  4929              LDR      r1,|L4.208|
00002c  4288              CMP      r0,r1
00002e  d103              BNE      |L4.56|
;;;43     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);		//使能定时器TIM4的时钟
000030  2101              MOVS     r1,#1
000032  2004              MOVS     r0,#4
000034  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.56|
;;;44     	else if(BSP_TIMx == TIM5)
000038  4926              LDR      r1,|L4.212|
00003a  4288              CMP      r0,r1
00003c  d103              BNE      |L4.70|
;;;45     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);		//使能定时器TIM5的时钟
00003e  2101              MOVS     r1,#1
000040  2008              MOVS     r0,#8
000042  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.70|
;;;46     	else if(BSP_TIMx == TIM6)
000046  4924              LDR      r1,|L4.216|
000048  4288              CMP      r0,r1
00004a  d103              BNE      |L4.84|
;;;47     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6,ENABLE);		//使能定时器TIM6的时钟
00004c  2101              MOVS     r1,#1
00004e  2010              MOVS     r0,#0x10
000050  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.84|
;;;48     	else if(BSP_TIMx == TIM7)
000054  4921              LDR      r1,|L4.220|
000056  4288              CMP      r0,r1
000058  d103              BNE      |L4.98|
;;;49     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,ENABLE);		//使能定时器TIM7的时钟
00005a  2101              MOVS     r1,#1
00005c  2020              MOVS     r0,#0x20
00005e  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.98|
;;;50     	else if(BSP_TIMx == TIM8)
000062  491f              LDR      r1,|L4.224|
000064  4288              CMP      r0,r1
000066  d103              BNE      |L4.112|
;;;51     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8,ENABLE);		//使能定时器TIM8的时钟
000068  2101              MOVS     r1,#1
00006a  1440              ASRS     r0,r0,#17
00006c  f7ffbffe          B.W      RCC_APB2PeriphClockCmd
                  |L4.112|
;;;52     	else if(BSP_TIMx == TIM9)
000070  491c              LDR      r1,|L4.228|
000072  4288              CMP      r0,r1
000074  d103              BNE      |L4.126|
;;;53     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9,ENABLE);		//使能定时器TIM9的时钟
000076  2101              MOVS     r1,#1
000078  04c8              LSLS     r0,r1,#19
00007a  f7ffbffe          B.W      RCC_APB2PeriphClockCmd
                  |L4.126|
;;;54     	else if(BSP_TIMx == TIM10)
00007e  491a              LDR      r1,|L4.232|
000080  4288              CMP      r0,r1
000082  d103              BNE      |L4.140|
;;;55     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10,ENABLE);	//使能定时器TIM10的时钟
000084  2101              MOVS     r1,#1
000086  0508              LSLS     r0,r1,#20
000088  f7ffbffe          B.W      RCC_APB2PeriphClockCmd
                  |L4.140|
;;;56     	else if(BSP_TIMx == TIM11)
00008c  4917              LDR      r1,|L4.236|
00008e  4288              CMP      r0,r1
000090  d103              BNE      |L4.154|
;;;57     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11,ENABLE);	//使能定时器TIM11的时钟
000092  2101              MOVS     r1,#1
000094  0548              LSLS     r0,r1,#21
000096  f7ffbffe          B.W      RCC_APB2PeriphClockCmd
                  |L4.154|
;;;58     	else if(BSP_TIMx == TIM12)
00009a  4915              LDR      r1,|L4.240|
00009c  4288              CMP      r0,r1
00009e  d103              BNE      |L4.168|
;;;59     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12,ENABLE);	//使能定时器TIM12的时钟
0000a0  2101              MOVS     r1,#1
0000a2  2040              MOVS     r0,#0x40
0000a4  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.168|
;;;60     	else if(BSP_TIMx == TIM13)
0000a8  4912              LDR      r1,|L4.244|
0000aa  4288              CMP      r0,r1
0000ac  d103              BNE      |L4.182|
;;;61     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13,ENABLE);	//使能定时器TIM13的时钟
0000ae  2101              MOVS     r1,#1
0000b0  2080              MOVS     r0,#0x80
0000b2  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.182|
;;;62     	else if(BSP_TIMx == TIM14)
0000b6  4910              LDR      r1,|L4.248|
0000b8  4288              CMP      r0,r1
0000ba  d103              BNE      |L4.196|
;;;63     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14,ENABLE);	//使能定时器TIM14的时钟
0000bc  2101              MOVS     r1,#1
0000be  1580              ASRS     r0,r0,#22
0000c0  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
                  |L4.196|
;;;64     }
0000c4  4770              BX       lr
;;;65     
                          ENDP

0000c6  0000              DCW      0x0000
                  |L4.200|
                          DCD      0x40012c00
                  |L4.204|
                          DCD      0x40000400
                  |L4.208|
                          DCD      0x40000800
                  |L4.212|
                          DCD      0x40000c00
                  |L4.216|
                          DCD      0x40001000
                  |L4.220|
                          DCD      0x40001400
                  |L4.224|
                          DCD      0x40013400
                  |L4.228|
                          DCD      0x40014c00
                  |L4.232|
                          DCD      0x40015000
                  |L4.236|
                          DCD      0x40015400
                  |L4.240|
                          DCD      0x40001800
                  |L4.244|
                          DCD      0x40001c00
                  |L4.248|
                          DCD      0x40002000

                          AREA ||i.TIM_TO_GPIO_PinRemap||, CODE, READONLY, ALIGN=2

                  TIM_TO_GPIO_PinRemap PROC
;;;108    */
;;;109    uint32_t TIM_TO_GPIO_PinRemap(TIM_TypeDef* BSP_TIMx){
000000  4601              MOV      r1,r0
;;;110    	uint32_t GPIO_PinReamp;
;;;111    	
;;;112    	if(BSP_TIMx == TIM1)				
000002  4a1d              LDR      r2,|L5.120|
000004  4291              CMP      r1,r2
000006  d101              BNE      |L5.12|
;;;113    		GPIO_PinReamp = GPIO_FullRemap_TIM1;
000008  481c              LDR      r0,|L5.124|
;;;114    	else if(BSP_TIMx == TIM2)		
;;;115    		GPIO_PinReamp = GPIO_FullRemap_TIM2;
;;;116    	else if(BSP_TIMx == TIM3)		
;;;117    		GPIO_PinReamp = GPIO_FullRemap_TIM3;
;;;118    	else if(BSP_TIMx == TIM4)		
;;;119    		GPIO_PinReamp = GPIO_Remap_TIM4;
;;;120    	else if(BSP_TIMx == TIM5)		
;;;121    		GPIO_PinReamp = GPIO_Remap_TIM5CH4_LSI;
;;;122    	else if(BSP_TIMx == TIM9)		
;;;123    		GPIO_PinReamp = GPIO_Remap_TIM9;
;;;124    	else if(BSP_TIMx == TIM10)	
;;;125    		GPIO_PinReamp = GPIO_Remap_TIM10;
;;;126    	else if(BSP_TIMx == TIM11)	
;;;127    		GPIO_PinReamp = GPIO_Remap_TIM11;
;;;128    	else if(BSP_TIMx == TIM12)	
;;;129    		GPIO_PinReamp = GPIO_Remap_TIM12;
;;;130    	else if(BSP_TIMx == TIM13)	
;;;131    		GPIO_PinReamp = GPIO_Remap_TIM13;
;;;132    	else if(BSP_TIMx == TIM14)	
;;;133    		GPIO_PinReamp = GPIO_Remap_TIM14;
;;;134    	
;;;135    	return GPIO_PinReamp;	
;;;136    }
00000a  4770              BX       lr
                  |L5.12|
00000c  f1b14f80          CMP      r1,#0x40000000        ;114
000010  d004              BEQ      |L5.28|
000012  4a1b              LDR      r2,|L5.128|
000014  4291              CMP      r1,r2                 ;116
000016  d103              BNE      |L5.32|
000018  481a              LDR      r0,|L5.132|
00001a  4770              BX       lr
                  |L5.28|
00001c  481a              LDR      r0,|L5.136|
00001e  4770              BX       lr
                  |L5.32|
000020  4a1a              LDR      r2,|L5.140|
000022  4291              CMP      r1,r2                 ;118
000024  d101              BNE      |L5.42|
000026  1488              ASRS     r0,r1,#18             ;119
000028  4770              BX       lr
                  |L5.42|
00002a  4a19              LDR      r2,|L5.144|
00002c  4291              CMP      r1,r2                 ;120
00002e  d101              BNE      |L5.52|
000030  4818              LDR      r0,|L5.148|
000032  4770              BX       lr
                  |L5.52|
000034  4a18              LDR      r2,|L5.152|
000036  4291              CMP      r1,r2                 ;122
000038  d101              BNE      |L5.62|
00003a  4818              LDR      r0,|L5.156|
00003c  4770              BX       lr
                  |L5.62|
00003e  4a18              LDR      r2,|L5.160|
000040  4291              CMP      r1,r2                 ;124
000042  d102              BNE      |L5.74|
000044  4815              LDR      r0,|L5.156|
000046  3020              ADDS     r0,r0,#0x20           ;125
000048  4770              BX       lr
                  |L5.74|
00004a  4a16              LDR      r2,|L5.164|
00004c  4291              CMP      r1,r2                 ;126
00004e  d102              BNE      |L5.86|
000050  4812              LDR      r0,|L5.156|
000052  3060              ADDS     r0,r0,#0x60           ;127
000054  4770              BX       lr
                  |L5.86|
000056  4a14              LDR      r2,|L5.168|
000058  4291              CMP      r1,r2                 ;128
00005a  d101              BNE      |L5.96|
00005c  4813              LDR      r0,|L5.172|
00005e  4770              BX       lr
                  |L5.96|
000060  4a13              LDR      r2,|L5.176|
000062  4291              CMP      r1,r2                 ;130
000064  d102              BNE      |L5.108|
000066  480d              LDR      r0,|L5.156|
000068  30e0              ADDS     r0,r0,#0xe0           ;131
                  |L5.106|
00006a  4770              BX       lr
                  |L5.108|
00006c  4a11              LDR      r2,|L5.180|
00006e  4291              CMP      r1,r2                 ;132
000070  d1fb              BNE      |L5.106|
000072  4811              LDR      r0,|L5.184|
000074  4770              BX       lr
;;;137    
                          ENDP

000076  0000              DCW      0x0000
                  |L5.120|
                          DCD      0x40012c00
                  |L5.124|
                          DCD      0x001600c0
                  |L5.128|
                          DCD      0x40000400
                  |L5.132|
                          DCD      0x001a0c00
                  |L5.136|
                          DCD      0x00180300
                  |L5.140|
                          DCD      0x40000800
                  |L5.144|
                          DCD      0x40000c00
                  |L5.148|
                          DCD      0x00200001
                  |L5.152|
                          DCD      0x40014c00
                  |L5.156|
                          DCD      0x80000020
                  |L5.160|
                          DCD      0x40015000
                  |L5.164|
                          DCD      0x40015400
                  |L5.168|
                          DCD      0x40001800
                  |L5.172|
                          DCD      0x80001000
                  |L5.176|
                          DCD      0x40001c00
                  |L5.180|
                          DCD      0x40002000
                  |L5.184|
                          DCD      0x80000200

                          AREA ||i.TIM_TO_NVIC_IRQChannel||, CODE, READONLY, ALIGN=2

                  TIM_TO_NVIC_IRQChannel PROC
;;;76     */
;;;77     uint8_t	TIM_TO_NVIC_IRQChannel(TIM_TypeDef* BSP_TIMx){
000000  4601              MOV      r1,r0
;;;78     	uint8_t NVIC_IRQChannel;
;;;79     	
;;;80     	if(BSP_TIMx == TIM2)				
000002  f1b14f80          CMP      r1,#0x40000000
000006  d004              BEQ      |L6.18|
;;;81     		NVIC_IRQChannel = TIM2_IRQn;
;;;82     	else if(BSP_TIMx == TIM3)		
000008  4a12              LDR      r2,|L6.84|
00000a  4291              CMP      r1,r2
00000c  d103              BNE      |L6.22|
;;;83     		NVIC_IRQChannel = TIM3_IRQn;
00000e  201d              MOVS     r0,#0x1d
;;;84     	else if(BSP_TIMx == TIM4)		
;;;85     		NVIC_IRQChannel = TIM4_IRQn;
;;;86     	else if(BSP_TIMx == TIM5)		
;;;87     		NVIC_IRQChannel = TIM5_IRQn;
;;;88     	else if(BSP_TIMx == TIM6)		
;;;89     		NVIC_IRQChannel = TIM6_IRQn;
;;;90     	else if(BSP_TIMx == TIM7)		
;;;91     		NVIC_IRQChannel = TIM7_IRQn;
;;;92     	else if(BSP_TIMx == TIM1)   
;;;93     		NVIC_IRQChannel = TIM1_UP_IRQn;
;;;94     	else if(BSP_TIMx == TIM8)   
;;;95     		NVIC_IRQChannel = TIM8_UP_IRQn;
;;;96     	return NVIC_IRQChannel;	
;;;97     }
000010  4770              BX       lr
                  |L6.18|
000012  201c              MOVS     r0,#0x1c              ;81
000014  4770              BX       lr
                  |L6.22|
000016  4a10              LDR      r2,|L6.88|
000018  4291              CMP      r1,r2                 ;84
00001a  d101              BNE      |L6.32|
00001c  201e              MOVS     r0,#0x1e              ;85
00001e  4770              BX       lr
                  |L6.32|
000020  4a0e              LDR      r2,|L6.92|
000022  4291              CMP      r1,r2                 ;86
000024  d101              BNE      |L6.42|
000026  2032              MOVS     r0,#0x32              ;87
000028  4770              BX       lr
                  |L6.42|
00002a  4a0d              LDR      r2,|L6.96|
00002c  4291              CMP      r1,r2                 ;88
00002e  d101              BNE      |L6.52|
000030  2036              MOVS     r0,#0x36              ;89
000032  4770              BX       lr
                  |L6.52|
000034  4a0b              LDR      r2,|L6.100|
000036  4291              CMP      r1,r2                 ;90
000038  d101              BNE      |L6.62|
00003a  2037              MOVS     r0,#0x37              ;91
00003c  4770              BX       lr
                  |L6.62|
00003e  4a0a              LDR      r2,|L6.104|
000040  4291              CMP      r1,r2                 ;92
000042  d101              BNE      |L6.72|
000044  2019              MOVS     r0,#0x19              ;93
                  |L6.70|
000046  4770              BX       lr
                  |L6.72|
000048  4a08              LDR      r2,|L6.108|
00004a  4291              CMP      r1,r2                 ;94
00004c  d1fb              BNE      |L6.70|
00004e  202c              MOVS     r0,#0x2c              ;95
000050  4770              BX       lr
;;;98     
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      0x40000400
                  |L6.88|
                          DCD      0x40000800
                  |L6.92|
                          DCD      0x40000c00
                  |L6.96|
                          DCD      0x40001000
                  |L6.100|
                          DCD      0x40001400
                  |L6.104|
                          DCD      0x40012c00
                  |L6.108|
                          DCD      0x40013400

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\BSP_Timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_BSP_Timer_c_91ca5421____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_BSP_Timer_c_91ca5421____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_BSP_Timer_c_91ca5421____REVSH|
#line 128
|__asm___11_BSP_Timer_c_91ca5421____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
