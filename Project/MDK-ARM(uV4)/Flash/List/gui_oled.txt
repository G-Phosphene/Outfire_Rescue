; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\gui_oled.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\gui_oled.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\User_App -I..\..\User\User_Driver -I..\..\User\Font_And_Bmp -I..\..\User\User_GUI -I..\..\User\Util -I.\RTE\_FreeRTOS_STM32F1 -I"D:\Keil MDK\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include" -I"D:\Keil MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\gui_oled.crf ..\..\User\User_GUI\GUI_OLED.c]
                          THUMB

                          AREA ||i.OLEDKeyNoReset||, CODE, READONLY, ALIGN=2

                  OLEDKeyNoReset PROC
;;;246    */
;;;247    static void OLEDKeyNoReset(uint8_t noReset)
000000  b510              PUSH     {r4,lr}
;;;248    {
;;;249    	uint8_t i = 0;
000002  2100              MOVS     r1,#0
;;;250    	for(i = 0;i < OLED_KEY_LIST;i++){
;;;251    		/*除了指定的按键时间外其他全清零*/
;;;252    		if(i != noReset){
;;;253    			GUI.waitKeyTime[i] = NULL;
000004  4b05              LDR      r3,|L1.28|
000006  2200              MOVS     r2,#0                 ;250
                  |L1.8|
000008  4281              CMP      r1,r0                 ;252
00000a  d002              BEQ      |L1.18|
00000c  eb030481          ADD      r4,r3,r1,LSL #2
000010  60e2              STR      r2,[r4,#0xc]
                  |L1.18|
000012  1c49              ADDS     r1,r1,#1              ;250
000014  b2c9              UXTB     r1,r1                 ;250
000016  2906              CMP      r1,#6                 ;250
000018  d3f6              BCC      |L1.8|
;;;254    		}
;;;255    	}
;;;256    }
00001a  bd10              POP      {r4,pc}
;;;257    /*
                          ENDP

                  |L1.28|
                          DCD      GUI

                          AREA ||i.adFunction||, CODE, READONLY, ALIGN=2

                  adFunction PROC
;;;664    
;;;665    void adFunction(void){
000000  b538              PUSH     {r3-r5,lr}
;;;666    	switch(oled.keyValue){
000002  481a              LDR      r0,|L2.108|
;;;667    		case OLED_BACK:{
;;;668    			outfireRobotState.step = INIT;
;;;669    			currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
000004  4c19              LDR      r4,|L2.108|
000006  7840              LDRB     r0,[r0,#1]            ;666  ; oled
000008  3c10              SUBS     r4,r4,#0x10
00000a  2801              CMP      r0,#1                 ;666
00000c  d00e              BEQ      |L2.44|
00000e  2201              MOVS     r2,#1                 ;666
000010  4917              LDR      r1,|L2.112|
000012  2804              CMP      r0,#4                 ;666
000014  d002              BEQ      |L2.28|
000016  2805              CMP      r0,#5                 ;666
000018  d108              BNE      |L2.44|
00001a  e005              B        |L2.40|
                  |L2.28|
00001c  2000              MOVS     r0,#0                 ;668
00001e  7148              STRB     r0,[r1,#5]            ;668
000020  68e0              LDR      r0,[r4,#0xc]  ; currentMenu
000022  f8802070          STRB     r2,[r0,#0x70]
;;;670    			break;
000026  e001              B        |L2.44|
                  |L2.40|
;;;671    		}
;;;672    		case OLED_ENTER:{
;;;673    			break;
;;;674    		}
;;;675    		case OLED_SAVE:{
;;;676    			outfireRobotState.workMode = OUT_FIRE;
000028  720a              STRB     r2,[r1,#8]
;;;677    			outfireRobotState.step = READY;
00002a  714a              STRB     r2,[r1,#5]
                  |L2.44|
;;;678    		break;
;;;679    		}
;;;680    	}
;;;681    	adShowData(&adcTestData,0,0,L_ADC,16);
00002c  2300              MOVS     r3,#0
00002e  2510              MOVS     r5,#0x10
000030  461a              MOV      r2,r3
000032  4619              MOV      r1,r3
000034  480f              LDR      r0,|L2.116|
000036  9500              STR      r5,[sp,#0]
000038  f7fffffe          BL       adShowData
;;;682    	adShowData(&adcTestData,80,0,R_ADC,16);
00003c  2301              MOVS     r3,#1
00003e  2200              MOVS     r2,#0
000040  2150              MOVS     r1,#0x50
000042  480c              LDR      r0,|L2.116|
000044  9500              STR      r5,[sp,#0]
000046  f7fffffe          BL       adShowData
;;;683    	OLED_ShowString(16,6,"LEFT",16);
00004a  2310              MOVS     r3,#0x10
00004c  a20a              ADR      r2,|L2.120|
00004e  2106              MOVS     r1,#6
000050  4618              MOV      r0,r3
000052  f7fffffe          BL       OLED_ShowString
;;;684    	OLED_ShowString(80,6,"RIGHT",16);
000056  2310              MOVS     r3,#0x10
000058  a209              ADR      r2,|L2.128|
00005a  2106              MOVS     r1,#6
00005c  2050              MOVS     r0,#0x50
00005e  f7fffffe          BL       OLED_ShowString
;;;685    	currentMenu->displayFlag = FUNCTION_AUTO_FLAG;
000062  68e1              LDR      r1,[r4,#0xc]  ; currentMenu
000064  2003              MOVS     r0,#3
000066  f8810070          STRB     r0,[r1,#0x70]
;;;686    }
00006a  bd38              POP      {r3-r5,pc}
;;;687    
                          ENDP

                  |L2.108|
                          DCD      ||.data||+0x10
                  |L2.112|
                          DCD      outfireRobotState
                  |L2.116|
                          DCD      adcTestData
                  |L2.120|
000078  4c454654          DCB      "LEFT",0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L2.128|
000080  52494748          DCB      "RIGHT",0
000084  5400    
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.adShowData||, CODE, READONLY, ALIGN=1

                  adShowData PROC
;;;660    
;;;661    void adShowData(adcTestStruct_t *adcShowData,uint8_t x,uint8_t y,adcDevice_e device,uint8_t Char_Size){
000000  b5f8              PUSH     {r3-r7,lr}
000002  460c              MOV      r4,r1
000004  9e06              LDR      r6,[sp,#0x18]
000006  4615              MOV      r5,r2
;;;662    	OLED_ShowNum(x,y,(uint8_t)(adcShowData->adcData[device]),4,Char_Size);
000008  f8500023          LDR      r0,[r0,r3,LSL #2]
00000c  f7fffffe          BL       __aeabi_f2uiz
000010  b2c2              UXTB     r2,r0
000012  2304              MOVS     r3,#4
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  9600              STR      r6,[sp,#0]
00001a  f7fffffe          BL       OLED_ShowNum
;;;663    }
00001e  bdf8              POP      {r3-r7,pc}
;;;664    
                          ENDP


                          AREA ||i.backHandle||, CODE, READONLY, ALIGN=2

                  backHandle PROC
;;;444    */
;;;445    static void backHandle()
000000  b510              PUSH     {r4,lr}
;;;446    {
;;;447    	/*清零除了BACK外的其他键值长按时间*/
;;;448    	OLEDKeyNoReset(OLED_BACK);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       OLEDKeyNoReset
;;;449    	/*如果在菜单函数内*/
;;;450    	if((currentMenu ->displayFlag == FUNCTION_MANUAL_FLAG)||(currentMenu ->displayFlag == TEST_FLAG)||(currentMenu ->displayFlag == WORK_FLAG)){
000008  4810              LDR      r0,|L4.76|
;;;451    		/*执行菜单函数*/
;;;452    		if( currentMenu -> func[currentMenu -> currentOption] != NULL ){
;;;453    			currentMenu -> func[currentMenu -> currentOption]();
;;;454    		}
;;;455    	}
;;;456    	/*如果不在菜单函数内*/
;;;457    	else{
;;;458    		/*先执行一次操作*/
;;;459    		if(!GUI.waitKeyTime[OLED_BACK]){
00000a  4c11              LDR      r4,|L4.80|
00000c  68c0              LDR      r0,[r0,#0xc]          ;450  ; currentMenu
00000e  f8901070          LDRB     r1,[r0,#0x70]         ;450
000012  2902              CMP      r1,#2                 ;450
000014  d00a              BEQ      |L4.44|
000016  2906              CMP      r1,#6                 ;450
000018  d008              BEQ      |L4.44|
00001a  2904              CMP      r1,#4                 ;450
00001c  d006              BEQ      |L4.44|
00001e  69e0              LDR      r0,[r4,#0x1c]  ; GUI
000020  b158              CBZ      r0,|L4.58|
;;;460    			backOn();
;;;461    		}
;;;462    		/*一段时间后连续操作*/
;;;463    		else if(GUI.waitKeyTime[OLED_BACK] > WAITTING_NEXT_TIME){
000022  280c              CMP      r0,#0xc
000024  d90e              BLS      |L4.68|
;;;464    			if(!(GUI.waitKeyTime[OLED_BACK] % NEXT_TIME_PERIOD)){
000026  07c0              LSLS     r0,r0,#31
000028  d00a              BEQ      |L4.64|
00002a  e00b              B        |L4.68|
                  |L4.44|
00002c  6f41              LDR      r1,[r0,#0x74]         ;452
00002e  78c0              LDRB     r0,[r0,#3]            ;452
000030  f8510020          LDR      r0,[r1,r0,LSL #2]     ;452
000034  b130              CBZ      r0,|L4.68|
000036  4780              BLX      r0                    ;453
000038  e004              B        |L4.68|
                  |L4.58|
00003a  f7fffffe          BL       backOn
00003e  e001              B        |L4.68|
                  |L4.64|
;;;465    				backOn();
000040  f7fffffe          BL       backOn
                  |L4.68|
;;;466    			}	
;;;467    		}
;;;468    		
;;;469    	}
;;;470    	/*长按时间自加*/
;;;471    	GUI.waitKeyTime[OLED_BACK]++;
000044  69e0              LDR      r0,[r4,#0x1c]  ; GUI
000046  1c40              ADDS     r0,r0,#1
000048  61e0              STR      r0,[r4,#0x1c]  ; GUI
;;;472    }
00004a  bd10              POP      {r4,pc}
;;;473    /*
                          ENDP

                  |L4.76|
                          DCD      ||.data||
                  |L4.80|
                          DCD      GUI

                          AREA ||i.backOn||, CODE, READONLY, ALIGN=2

                  backOn PROC
;;;423    */
;;;424    static void backOn()
000000  b510              PUSH     {r4,lr}
;;;425    {
;;;426    	/*存在父菜单*/
;;;427    	if(currentMenu ->preMenu != NULL){
000002  4c07              LDR      r4,|L5.32|
000004  68e0              LDR      r0,[r4,#0xc]  ; currentMenu
000006  6ec1              LDR      r1,[r0,#0x6c]
000008  2900              CMP      r1,#0
00000a  d004              BEQ      |L5.22|
;;;428    		/*返回父菜单*/
;;;429    		menuReset(currentMenu);
00000c  f7fffffe          BL       menuReset
;;;430    		currentMenu = currentMenu ->preMenu;
000010  68e0              LDR      r0,[r4,#0xc]  ; currentMenu
000012  6ec0              LDR      r0,[r0,#0x6c]
000014  60e0              STR      r0,[r4,#0xc]  ; currentMenu
                  |L5.22|
;;;431    	}
;;;432    	/*重置各校准状态*/
;;;433    	resetGUIState();
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      resetGUIState
;;;434    }
;;;435    /*
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      ||.data||

                          AREA ||i.downHandle||, CODE, READONLY, ALIGN=2

                  downHandle PROC
;;;383    */
;;;384    static void downHandle()
000000  b510              PUSH     {r4,lr}
;;;385    {
;;;386    	/*清零除了DOWN外的其他键值长按时间*/
;;;387    	OLEDKeyNoReset(OLED_DOWN);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       OLEDKeyNoReset
;;;388    	/*如果在菜单函数内*/	
;;;389    	if((currentMenu ->displayFlag == FUNCTION_MANUAL_FLAG)||(currentMenu ->displayFlag == TEST_FLAG)||(currentMenu ->displayFlag == WORK_FLAG)){
000008  4815              LDR      r0,|L6.96|
;;;390    		/*执行菜单函数*/
;;;391    		if( currentMenu -> func[currentMenu -> currentOption] != NULL ){
;;;392    			currentMenu -> func[currentMenu -> currentOption]();
;;;393    		}
;;;394    	}
;;;395    	/*如果不在菜单函数内*/
;;;396    	else{
;;;397    		/*菜单选项没到底部，选中选项向下一个选项*/
;;;398    		if(currentMenu -> currentOption != currentMenu -> subMenuNumber - 1)
;;;399    		{
;;;400    			currentMenu -> currentOption++;
;;;401    			if(currentMenu -> currentOption > currentMenu -> showTo)
;;;402    			{
;;;403    				currentMenu -> showTo++;
;;;404    				currentMenu -> showFrom++;
;;;405    			}
;;;406    		}
;;;407    		/*更新菜单*/
;;;408    		currentMenu -> displayFlag = UPDATEMENU_FLAG;
;;;409    		GUI.workState = GUI_CHOOSE;		
00000a  4c16              LDR      r4,|L6.100|
00000c  68c0              LDR      r0,[r0,#0xc]          ;389  ; currentMenu
00000e  f8901070          LDRB     r1,[r0,#0x70]         ;389
000012  2902              CMP      r1,#2                 ;389
000014  d01b              BEQ      |L6.78|
000016  2906              CMP      r1,#6                 ;389
000018  d019              BEQ      |L6.78|
00001a  2904              CMP      r1,#4                 ;389
00001c  d017              BEQ      |L6.78|
00001e  7882              LDRB     r2,[r0,#2]            ;398
000020  78c1              LDRB     r1,[r0,#3]            ;398
000022  1e52              SUBS     r2,r2,#1              ;398
000024  4291              CMP      r1,r2                 ;398
000026  d00a              BEQ      |L6.62|
000028  1c49              ADDS     r1,r1,#1              ;400
00002a  b2ca              UXTB     r2,r1                 ;400
00002c  70c2              STRB     r2,[r0,#3]            ;400
00002e  7841              LDRB     r1,[r0,#1]            ;401
000030  428a              CMP      r2,r1                 ;401
000032  d904              BLS      |L6.62|
000034  1c49              ADDS     r1,r1,#1              ;403
000036  7041              STRB     r1,[r0,#1]            ;403
000038  7801              LDRB     r1,[r0,#0]            ;404
00003a  1c49              ADDS     r1,r1,#1              ;404
00003c  7001              STRB     r1,[r0,#0]            ;404
                  |L6.62|
00003e  2101              MOVS     r1,#1                 ;408
000040  f8801070          STRB     r1,[r0,#0x70]         ;408
000044  80a1              STRH     r1,[r4,#4]
                  |L6.70|
;;;410    	}
;;;411    	/*长按时间自加*/
;;;412    	GUI.waitKeyTime[OLED_DOWN]++;
000046  69a0              LDR      r0,[r4,#0x18]  ; GUI
000048  1c40              ADDS     r0,r0,#1
00004a  61a0              STR      r0,[r4,#0x18]  ; GUI
;;;413    }
00004c  bd10              POP      {r4,pc}
                  |L6.78|
00004e  6f41              LDR      r1,[r0,#0x74]         ;391
000050  78c0              LDRB     r0,[r0,#3]            ;391
000052  f8510020          LDR      r0,[r1,r0,LSL #2]     ;391
000056  2800              CMP      r0,#0                 ;391
000058  d0f5              BEQ      |L6.70|
00005a  4780              BLX      r0                    ;392
00005c  e7f3              B        |L6.70|
;;;414    /*
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      ||.data||
                  |L6.100|
                          DCD      GUI

                          AREA ||i.enterHandle||, CODE, READONLY, ALIGN=2

                  enterHandle PROC
;;;310    */
;;;311    static void enterHandle()
000000  b510              PUSH     {r4,lr}
;;;312    {
;;;313    	/*清零除了ENTER外的其他键值长按时间*/
;;;314    	OLEDKeyNoReset(OLED_ENTER);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       OLEDKeyNoReset
;;;315    	/*如果在菜单函数内*/
;;;316    	if((currentMenu ->displayFlag == FUNCTION_MANUAL_FLAG)||(currentMenu ->displayFlag == TEST_FLAG)||(currentMenu ->displayFlag == WORK_FLAG)){
000008  480e              LDR      r0,|L7.68|
;;;317    		enterOn();
;;;318    	}
;;;319    	/*如果不在菜单函数内*/
;;;320    
;;;321    	else{
;;;322    		/*先执行一次操作*/
;;;323    		if(!GUI.waitKeyTime[OLED_ENTER]){
00000a  4c0f              LDR      r4,|L7.72|
00000c  68c0              LDR      r0,[r0,#0xc]          ;316  ; currentMenu
00000e  f8900070          LDRB     r0,[r0,#0x70]         ;316
000012  2802              CMP      r0,#2                 ;316
000014  d00a              BEQ      |L7.44|
000016  2806              CMP      r0,#6                 ;316
000018  d008              BEQ      |L7.44|
00001a  2804              CMP      r0,#4                 ;316
00001c  d006              BEQ      |L7.44|
00001e  6920              LDR      r0,[r4,#0x10]  ; GUI
000020  b138              CBZ      r0,|L7.50|
;;;324    			enterOn();
;;;325    		}
;;;326    		/*一段时间后连续操作*/
;;;327    		else if(GUI.waitKeyTime[OLED_ENTER] > WAITTING_NEXT_TIME){
000022  280c              CMP      r0,#0xc
000024  d90a              BLS      |L7.60|
;;;328    			if(!(GUI.waitKeyTime[OLED_ENTER] % NEXT_TIME_PERIOD)){
000026  07c0              LSLS     r0,r0,#31
000028  d006              BEQ      |L7.56|
00002a  e007              B        |L7.60|
                  |L7.44|
00002c  f7fffffe          BL       enterOn
000030  e004              B        |L7.60|
                  |L7.50|
000032  f7fffffe          BL       enterOn
000036  e001              B        |L7.60|
                  |L7.56|
;;;329    				enterOn();
000038  f7fffffe          BL       enterOn
                  |L7.60|
;;;330    			}
;;;331    		} 
;;;332    	}
;;;333    	/*长按时间自加*/
;;;334    	GUI.waitKeyTime[OLED_ENTER]++;
00003c  6920              LDR      r0,[r4,#0x10]  ; GUI
00003e  1c40              ADDS     r0,r0,#1
000040  6120              STR      r0,[r4,#0x10]  ; GUI
;;;335    }
000042  bd10              POP      {r4,pc}
;;;336    /*
                          ENDP

                  |L7.68|
                          DCD      ||.data||
                  |L7.72|
                          DCD      GUI

                          AREA ||i.enterOn||, CODE, READONLY, ALIGN=2

                  enterOn PROC
;;;286    */
;;;287    static void enterOn()
000000  4b09              LDR      r3,|L8.40|
;;;288    {
;;;289    	/*存在子菜单*/
;;;290    	if(currentMenu -> subMenu[currentMenu -> currentOption] != NULL ){
000002  68d8              LDR      r0,[r3,#0xc]  ; currentMenu
000004  78c2              LDRB     r2,[r0,#3]
000006  6e81              LDR      r1,[r0,#0x68]
000008  f8511022          LDR      r1,[r1,r2,LSL #2]
00000c  2900              CMP      r1,#0
00000e  d004              BEQ      |L8.26|
;;;291    		/*进入子菜单*/
;;;292    		currentMenu = currentMenu -> subMenu[currentMenu->currentOption];
000010  60d9              STR      r1,[r3,#0xc]  ; currentMenu
;;;293    		currentMenu -> displayFlag = UPDATEMENU_FLAG;
000012  2001              MOVS     r0,#1
000014  f8810070          STRB     r0,[r1,#0x70]
                  |L8.24|
;;;294    	}
;;;295    	/*存在可执行的菜单函数*/
;;;296    	else if( currentMenu -> func[currentMenu -> currentOption] != NULL ){
;;;297    		/*执行菜单函数*/
;;;298    		currentMenu -> func[currentMenu -> currentOption]();
;;;299    	}
;;;300    }
000018  4770              BX       lr
                  |L8.26|
00001a  6f40              LDR      r0,[r0,#0x74]         ;296
00001c  f8500022          LDR      r0,[r0,r2,LSL #2]     ;296
000020  2800              CMP      r0,#0                 ;296
000022  d0f9              BEQ      |L8.24|
000024  4700              BX       r0                    ;298
;;;301    /*
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      ||.data||

                          AREA ||i.fanTest||, CODE, READONLY, ALIGN=2

                  fanTest PROC
;;;879    
;;;880    void fanTest(void)
000000  b570              PUSH     {r4-r6,lr}
;;;881    {
;;;882    	switch(oled.keyValue){
000002  4816              LDR      r0,|L9.92|
000004  2500              MOVS     r5,#0
;;;883    		case OLED_UP:{
;;;884    			PDout(14) = 1;
000006  4c16              LDR      r4,|L9.96|
000008  7840              LDRB     r0,[r0,#1]            ;882  ; oled
00000a  2802              CMP      r0,#2                 ;882
00000c  d002              BEQ      |L9.20|
00000e  2803              CMP      r0,#3                 ;882
000010  d106              BNE      |L9.32|
000012  e003              B        |L9.28|
                  |L9.20|
000014  2001              MOVS     r0,#1
000016  f8c401b8          STR      r0,[r4,#0x1b8]
;;;885    			break;
00001a  e001              B        |L9.32|
                  |L9.28|
;;;886    		}
;;;887    		case OLED_DOWN:{
;;;888    			PDout(14) = 0;
00001c  f8c451b8          STR      r5,[r4,#0x1b8]
                  |L9.32|
;;;889    //			currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;890    			break;
;;;891    		}
;;;892    	}
;;;893    	OLED_Clear();
000020  f7fffffe          BL       OLED_Clear
;;;894    	if(PDout(14) == 1){
000024  f8d401b8          LDR      r0,[r4,#0x1b8]
000028  2801              CMP      r0,#1
00002a  d105              BNE      |L9.56|
;;;895    		OLED_ShowString(63,3,"ON",16);
00002c  2310              MOVS     r3,#0x10
00002e  a20d              ADR      r2,|L9.100|
000030  2103              MOVS     r1,#3
000032  203f              MOVS     r0,#0x3f
000034  f7fffffe          BL       OLED_ShowString
                  |L9.56|
;;;896    	}
;;;897    	if(PDout(14) == 0){
000038  f8d401b8          LDR      r0,[r4,#0x1b8]
;;;898    		OLED_ShowString(63,3,"OFF",16);
;;;899    		faning = 0;
00003c  4c07              LDR      r4,|L9.92|
00003e  3c10              SUBS     r4,r4,#0x10
000040  b930              CBNZ     r0,|L9.80|
000042  2310              MOVS     r3,#0x10              ;898
000044  a208              ADR      r2,|L9.104|
000046  2103              MOVS     r1,#3                 ;898
000048  203f              MOVS     r0,#0x3f              ;898
00004a  f7fffffe          BL       OLED_ShowString
00004e  6065              STR      r5,[r4,#4]  ; faning
                  |L9.80|
;;;900    	}
;;;901    	currentMenu -> displayFlag = TEST_FLAG;
000050  68e1              LDR      r1,[r4,#0xc]  ; currentMenu
000052  2006              MOVS     r0,#6
000054  f8810070          STRB     r0,[r1,#0x70]
;;;902    	
;;;903    }
000058  bd70              POP      {r4-r6,pc}
;;;904     
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      ||.data||+0x10
                  |L9.96|
                          DCD      0x42228000
                  |L9.100|
000064  4f4e00            DCB      "ON",0
000067  00                DCB      0
                  |L9.104|
000068  4f464600          DCB      "OFF",0

                          AREA ||i.fireChoose||, CODE, READONLY, ALIGN=2

                  fireChoose PROC
;;;966    
;;;967    void fireChoose(void){
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;968    	int i;
;;;969    	switch(currentMenu -> preMenu -> currentOption){
000004  48e4              LDR      r0,|L10.920|
;;;970    		case FIRE01:{
;;;971    			robotSelect.robotSelect = OUT_FIRE1;
000006  4be5              LDR      r3,|L10.924|
000008  2601              MOVS     r6,#1                 ;969
00000a  68c0              LDR      r0,[r0,#0xc]          ;969  ; currentMenu
00000c  2500              MOVS     r5,#0                 ;969
;;;972    			switch(currentMenu -> currentOption){
;;;973    				case FIRE1:{
;;;974    					switch(oled.keyValue){
;;;975    						case OLED_BACK:{
;;;976    							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;977    							break;
;;;978    						}
;;;979    						case OLED_ENTER:{
;;;980    							OLED_Clear();
;;;981    							if(outfireRobotState.fireArray[FIRST_FIRE]){
00000e  4ce4              LDR      r4,|L10.928|
000010  6ec1              LDR      r1,[r0,#0x6c]         ;969
000012  78ca              LDRB     r2,[r1,#3]            ;969
000014  49e0              LDR      r1,|L10.920|
000016  3110              ADDS     r1,r1,#0x10           ;974
000018  2a00              CMP      r2,#0                 ;969
00001a  7849              LDRB     r1,[r1,#1]            ;974
00001c  d017              BEQ      |L10.78|
00001e  2a01              CMP      r2,#1                 ;969
000020  d07c              BEQ      |L10.284|
000022  2a02              CMP      r2,#2                 ;969
000024  d111              BNE      |L10.74|
;;;982    								outfireRobotState.fireArray[FIRST_FIRE] = 0;
;;;983    								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;984    							}
;;;985    							else if(!outfireRobotState.fireArray[FIRST_FIRE]){
;;;986    								outfireRobotState.fireArray[FIRST_FIRE] = 1;
;;;987    								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;988    							}break;
;;;989    						}
;;;990    					}break;
;;;991    				}
;;;992    				case FIRE2:{
;;;993    					switch(oled.keyValue){
;;;994    						case OLED_BACK:{
;;;995    							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;996    							break;
;;;997    						}
;;;998    						case OLED_ENTER:{
;;;999    							OLED_Clear();
;;;1000   							if(outfireRobotState.fireArray[SECOND_FIRE]){
;;;1001   								outfireRobotState.fireArray[SECOND_FIRE] = 0;
;;;1002   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1003   							}
;;;1004   							else if(!outfireRobotState.fireArray[SECOND_FIRE]){
;;;1005   								outfireRobotState.fireArray[SECOND_FIRE] = 1;
;;;1006   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1007   							}break;
;;;1008   						}
;;;1009   					}break;
;;;1010   				}
;;;1011   				case FIRE3:{
;;;1012   					switch(oled.keyValue){
;;;1013   						case OLED_BACK:{
;;;1014   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1015   							break;
;;;1016   						}
;;;1017   						case OLED_ENTER:{
;;;1018   							OLED_Clear();
;;;1019   							if(outfireRobotState.fireArray[THIRD_FIRE]){
;;;1020   								outfireRobotState.fireArray[THIRD_FIRE] = 0;
;;;1021   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1022   							}
;;;1023   							else if(!outfireRobotState.fireArray[THIRD_FIRE]){
;;;1024   								outfireRobotState.fireArray[THIRD_FIRE] = 1;
;;;1025   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1026   							}break;
;;;1027   						}
;;;1028   					}break;
;;;1029   				}
;;;1030   				case FIRE9:{	
;;;1031   					switch(oled.keyValue){
;;;1032   						case OLED_BACK:{
;;;1033   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1034   							break;
;;;1035   						}
;;;1036   						case OLED_ENTER:{
;;;1037   							OLED_Clear();
;;;1038   							if(outfireRobotState.fireArray[FOURTH_FIRE]){
;;;1039   								outfireRobotState.fireArray[FOURTH_FIRE] = 0;
;;;1040   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1041   							}
;;;1042   							else if(!outfireRobotState.fireArray[FOURTH_FIRE]){
;;;1043   								outfireRobotState.fireArray[FOURTH_FIRE] = 1;
;;;1044   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1045   							}break;
;;;1046   						}
;;;1047   					}break;
;;;1048   				}
;;;1049   				case CLEAR_ALL01:{
;;;1050   					switch(oled.keyValue){
;;;1051   						case OLED_BACK:{
;;;1052   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1053   							break;
;;;1054   						}
;;;1055   						case OLED_ENTER:{
;;;1056   							OLED_Clear();
;;;1057   							for(i = 0;i < 9;i++){outfireRobotState.returnFlag[i] = 0;} //初始化火点寻找和返回函数
;;;1058   							for(i = 0;i < 9;i++){outfireRobotState.fireArray[i] = 0;}
;;;1059   							OLED_ShowString(0,0,"CLEAR_ALL",16);
;;;1060   							OLED_ShowString(0,2,"SUCCESSFULY",16);
;;;1061   							break;
;;;1062   						}
;;;1063   					}
;;;1064   				}
;;;1065   			}
;;;1066   			break;
;;;1067   		}
;;;1068   		case FIRE02:{
;;;1069   			robotSelect.robotSelect = OUT_FIRE2;
;;;1070   			switch(currentMenu -> currentOption){
;;;1071   				case FIRE4:{
;;;1072   					switch(oled.keyValue){
;;;1073   						case OLED_BACK:{
;;;1074   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1075   							break;
;;;1076   						}
;;;1077   						case OLED_ENTER:{
;;;1078   							OLED_Clear();
;;;1079   							if(outfireRobotState.fireArray[FOURTH_FIRE]){
;;;1080   								outfireRobotState.fireArray[FOURTH_FIRE] = 0;
;;;1081   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1082   							}
;;;1083   							else if(!outfireRobotState.fireArray[FOURTH_FIRE]){
;;;1084   								outfireRobotState.fireArray[FOURTH_FIRE] = 1;
;;;1085   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1086   							}break;
;;;1087   						}
;;;1088   					}break;
;;;1089   				}
;;;1090   				case FIRE5:{
;;;1091   					switch(oled.keyValue){
;;;1092   						case OLED_BACK:{
;;;1093   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1094   							break;
;;;1095   						}
;;;1096   						case OLED_ENTER:{
;;;1097   							OLED_Clear();
;;;1098   							if(outfireRobotState.fireArray[FIFTH_FIRE]){
;;;1099   								outfireRobotState.fireArray[FIFTH_FIRE] = 0;
;;;1100   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1101   							}
;;;1102   							else if(!outfireRobotState.fireArray[FIFTH_FIRE]){
;;;1103   								outfireRobotState.fireArray[FIFTH_FIRE] = 1;
;;;1104   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1105   							}break;
;;;1106   						}
;;;1107   					}break;
;;;1108   				}
;;;1109   				case FIRE6:{
;;;1110   					switch(oled.keyValue){
;;;1111   						case OLED_BACK:{
;;;1112   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1113   							break;
;;;1114   						}
;;;1115   						case OLED_ENTER:{
;;;1116   							OLED_Clear();
;;;1117   							if(outfireRobotState.fireArray[SIXTH_FIRE]){
;;;1118   								outfireRobotState.fireArray[SIXTH_FIRE] = 0;
;;;1119   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1120   							}
;;;1121   							else if(!outfireRobotState.fireArray[SIXTH_FIRE]){
;;;1122   								outfireRobotState.fireArray[SIXTH_FIRE] = 1;
;;;1123   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1124   							}break;
;;;1125   						}
;;;1126   					}break;
;;;1127   				}
;;;1128   				case FIRE7:{	
;;;1129   					switch(oled.keyValue){
;;;1130   						case OLED_BACK:{
;;;1131   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1132   							break;
;;;1133   						}
;;;1134   						case OLED_ENTER:{
;;;1135   							OLED_Clear();
;;;1136   							if(outfireRobotState.fireArray[SENVENTH_FIRE]){
;;;1137   								outfireRobotState.fireArray[SENVENTH_FIRE] = 0;
;;;1138   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1139   							}
;;;1140   							else if(!outfireRobotState.fireArray[SENVENTH_FIRE]){
;;;1141   								outfireRobotState.fireArray[SENVENTH_FIRE] = 1;
;;;1142   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1143   							}break;
;;;1144   						}
;;;1145   					}break;
;;;1146   				}
;;;1147   				case FIRE8:{	
;;;1148   					switch(oled.keyValue){
;;;1149   						case OLED_BACK:{
;;;1150   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1151   							break;
;;;1152   						}
;;;1153   						case OLED_ENTER:{
;;;1154   							OLED_Clear();
;;;1155   							if(outfireRobotState.fireArray[EIGHTH_FIRE]){
;;;1156   								outfireRobotState.fireArray[EIGHTH_FIRE] = 0;
;;;1157   								OLED_ShowString(0,0,"CHOOSE_NO",16);
;;;1158   							}
;;;1159   							else if(!outfireRobotState.fireArray[EIGHTH_FIRE]){
;;;1160   								outfireRobotState.fireArray[EIGHTH_FIRE] = 1;
;;;1161   								OLED_ShowString(0,0,"CHOOSE_YES",16);
;;;1162   							}break;
;;;1163   						}
;;;1164   					}break;
;;;1165   				}
;;;1166   				case CLEAR_ALL02:{
;;;1167   					switch(oled.keyValue){
;;;1168   						case OLED_BACK:{
;;;1169   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1170   							break;
;;;1171   						}
;;;1172   						case OLED_ENTER:{
;;;1173   							OLED_Clear();
;;;1174   							for(i = 0;i < 9;i++){outfireRobotState.returnFlag[i] = 0;} //初始化火点寻找和返回函数
;;;1175   							for(i = 0;i < 9;i++){outfireRobotState.fireArray[i] = 0;}
;;;1176   							OLED_ShowString(0,0,"CLEAR_ALL",16);
;;;1177   							OLED_ShowString(0,2,"SUCCESSFULY",16);
;;;1178   							break;
;;;1179   						}
;;;1180   					}break;
;;;1181   				}
;;;1182   			}
;;;1183   			break;
;;;1184   		}
;;;1185   		case RESCUEMAN:{
;;;1186   			robotSelect.robotSelect = RESCUE;
000026  2702              MOVS     r7,#2
000028  701f              STRB     r7,[r3,#0]
;;;1187   			switch(currentMenu -> currentOption){
00002a  78c2              LDRB     r2,[r0,#3]
;;;1188   				case ROOM1:{	
;;;1189   					switch(oled.keyValue){
;;;1190   						case OLED_BACK:{
;;;1191   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1192   							break;
;;;1193   						}
;;;1194   						case OLED_ENTER:{
;;;1195   							OLED_Clear();
;;;1196   							rescueRobotState.rescuePosition = ROOM_ONE;
00002c  4cdd              LDR      r4,|L10.932|
00002e  2a00              CMP      r2,#0                 ;1187
000030  d075              BEQ      |L10.286|
000032  2a01              CMP      r2,#1                 ;1187
000034  d074              BEQ      |L10.288|
000036  2a02              CMP      r2,#2                 ;1187
000038  d073              BEQ      |L10.290|
00003a  2a03              CMP      r2,#3                 ;1187
00003c  d105              BNE      |L10.74|
;;;1197   							OLED_ShowString(0,0,"ROOM1_OK",16);
;;;1198   						}break;
;;;1199   					}
;;;1200   					break;
;;;1201   				}
;;;1202   				case ROOM2:{
;;;1203   					switch(oled.keyValue){
;;;1204   						case OLED_BACK:{
;;;1205   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1206   							break;
;;;1207   						}
;;;1208   						case OLED_ENTER:{
;;;1209   							OLED_Clear();
;;;1210   							rescueRobotState.rescuePosition = ROOM_TWO;
;;;1211   							OLED_ShowString(0,0,"ROOM2_OK",16);
;;;1212   						}break;
;;;1213   					}
;;;1214   					break;
;;;1215   				}
;;;1216   				case ROOM3:{
;;;1217   					switch(oled.keyValue){
;;;1218   						case OLED_BACK:{
;;;1219   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;1220   							break;
;;;1221   						}
;;;1222   						case OLED_ENTER:{
;;;1223   							OLED_Clear();
;;;1224   							rescueRobotState.rescuePosition = ROOM_THREE;
;;;1225   							OLED_ShowString(0,0,"ROOM3_OK",16);
;;;1226   						}break;
;;;1227   					}
;;;1228   					break;
;;;1229   				}
;;;1230   				case ROOM4:{
;;;1231   					switch(oled.keyValue){
00003e  2901              CMP      r1,#1
000040  d070              BEQ      |L10.292|
000042  2904              CMP      r1,#4
000044  d101              BNE      |L10.74|
;;;1232   						case OLED_BACK:{
;;;1233   							currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
000046  f8806070          STRB     r6,[r0,#0x70]
                  |L10.74|
;;;1234   							break;
;;;1235   						}
;;;1236   						case OLED_ENTER:{
;;;1237   							OLED_Clear();
;;;1238   							rescueRobotState.rescuePosition = ROOM_FOUR;
;;;1239   							OLED_ShowString(0,0,"ROOM4_OK",16);
;;;1240   						}break;
;;;1241   					}
;;;1242   					break;
;;;1243   				}
;;;1244   			}
;;;1245   		}	
;;;1246   	}
;;;1247   }
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L10.78|
00004e  701d              STRB     r5,[r3,#0]            ;971
000050  78c2              LDRB     r2,[r0,#3]            ;972
000052  2a05              CMP      r2,#5                 ;972
000054  d2f9              BCS      |L10.74|
000056  e8dff002          TBB      [pc,r2]               ;972
00005a  0320              DCB      0x03,0x20
00005c  3d5a7c00          DCB      0x3d,0x5a,0x7c,0x00
000060  2901              CMP      r1,#1                 ;974
000062  d004              BEQ      |L10.110|
000064  2904              CMP      r1,#4                 ;974
000066  d1f0              BNE      |L10.74|
000068  f8806070          STRB     r6,[r0,#0x70]         ;976
                  |L10.108|
00006c  e7ed              B        |L10.74|
                  |L10.110|
00006e  f7fffffe          BL       OLED_Clear
000072  7aa0              LDRB     r0,[r4,#0xa]          ;981  ; outfireRobotState
000074  b140              CBZ      r0,|L10.136|
000076  72a5              STRB     r5,[r4,#0xa]          ;982
000078  e8bd41f0          POP      {r4-r8,lr}            ;983
00007c  2310              MOVS     r3,#0x10              ;983
00007e  2100              MOVS     r1,#0                 ;983
000080  a2c9              ADR      r2,|L10.936|
000082  4608              MOV      r0,r1                 ;983
000084  f7ffbffe          B.W      OLED_ShowString
                  |L10.136|
000088  72a6              STRB     r6,[r4,#0xa]          ;986
00008a  e8bd41f0          POP      {r4-r8,lr}            ;987
00008e  2310              MOVS     r3,#0x10              ;987
000090  2100              MOVS     r1,#0                 ;987
000092  a2c8              ADR      r2,|L10.948|
000094  4608              MOV      r0,r1                 ;987
000096  f7ffbffe          B.W      OLED_ShowString
00009a  2901              CMP      r1,#1                 ;993
00009c  d004              BEQ      |L10.168|
00009e  2904              CMP      r1,#4                 ;993
0000a0  d1d3              BNE      |L10.74|
0000a2  f8806070          STRB     r6,[r0,#0x70]         ;995
0000a6  e7d0              B        |L10.74|
                  |L10.168|
0000a8  f7fffffe          BL       OLED_Clear
0000ac  7ae0              LDRB     r0,[r4,#0xb]          ;1000  ; outfireRobotState
0000ae  b140              CBZ      r0,|L10.194|
0000b0  72e5              STRB     r5,[r4,#0xb]          ;1001
0000b2  e8bd41f0          POP      {r4-r8,lr}            ;1002
0000b6  2310              MOVS     r3,#0x10              ;1002
0000b8  2100              MOVS     r1,#0                 ;1002
0000ba  a2bb              ADR      r2,|L10.936|
0000bc  4608              MOV      r0,r1                 ;1002
0000be  f7ffbffe          B.W      OLED_ShowString
                  |L10.194|
0000c2  72e6              STRB     r6,[r4,#0xb]          ;1005
0000c4  e8bd41f0          POP      {r4-r8,lr}            ;1006
0000c8  2310              MOVS     r3,#0x10              ;1006
0000ca  2100              MOVS     r1,#0                 ;1006
0000cc  a2b9              ADR      r2,|L10.948|
0000ce  4608              MOV      r0,r1                 ;1006
0000d0  f7ffbffe          B.W      OLED_ShowString
0000d4  2901              CMP      r1,#1                 ;1012
0000d6  d004              BEQ      |L10.226|
0000d8  2904              CMP      r1,#4                 ;1012
0000da  d1b6              BNE      |L10.74|
0000dc  f8806070          STRB     r6,[r0,#0x70]         ;1014
                  |L10.224|
0000e0  e7b3              B        |L10.74|
                  |L10.226|
0000e2  f7fffffe          BL       OLED_Clear
0000e6  7b20              LDRB     r0,[r4,#0xc]          ;1019  ; outfireRobotState
0000e8  b140              CBZ      r0,|L10.252|
0000ea  7325              STRB     r5,[r4,#0xc]          ;1020
0000ec  e8bd41f0          POP      {r4-r8,lr}            ;1021
0000f0  2310              MOVS     r3,#0x10              ;1021
0000f2  2100              MOVS     r1,#0                 ;1021
0000f4  a2ac              ADR      r2,|L10.936|
0000f6  4608              MOV      r0,r1                 ;1021
0000f8  f7ffbffe          B.W      OLED_ShowString
                  |L10.252|
0000fc  7326              STRB     r6,[r4,#0xc]          ;1024
0000fe  e8bd41f0          POP      {r4-r8,lr}            ;1025
000102  2310              MOVS     r3,#0x10              ;1025
000104  2100              MOVS     r1,#0                 ;1025
000106  a2ab              ADR      r2,|L10.948|
000108  4608              MOV      r0,r1                 ;1025
00010a  f7ffbffe          B.W      OLED_ShowString
00010e  2901              CMP      r1,#1                 ;1031
000110  d009              BEQ      |L10.294|
000112  2904              CMP      r1,#4                 ;1031
000114  d199              BNE      |L10.74|
000116  f8806070          STRB     r6,[r0,#0x70]         ;1033
                  |L10.282|
00011a  e796              B        |L10.74|
                  |L10.284|
00011c  e03c              B        |L10.408|
                  |L10.286|
00011e  e0f8              B        |L10.786|
                  |L10.288|
000120  e109              B        |L10.822|
                  |L10.290|
000122  e11a              B        |L10.858|
                  |L10.292|
000124  e12b              B        |L10.894|
                  |L10.294|
000126  f7fffffe          BL       OLED_Clear
00012a  7b60              LDRB     r0,[r4,#0xd]          ;1038  ; outfireRobotState
00012c  b140              CBZ      r0,|L10.320|
00012e  7365              STRB     r5,[r4,#0xd]          ;1039
000130  e8bd41f0          POP      {r4-r8,lr}            ;1040
000134  2310              MOVS     r3,#0x10              ;1040
000136  2100              MOVS     r1,#0                 ;1040
000138  a29b              ADR      r2,|L10.936|
00013a  4608              MOV      r0,r1                 ;1040
00013c  f7ffbffe          B.W      OLED_ShowString
                  |L10.320|
000140  7366              STRB     r6,[r4,#0xd]          ;1043
000142  e8bd41f0          POP      {r4-r8,lr}            ;1044
000146  2310              MOVS     r3,#0x10              ;1044
000148  2100              MOVS     r1,#0                 ;1044
00014a  a29a              ADR      r2,|L10.948|
00014c  4608              MOV      r0,r1                 ;1044
00014e  f7ffbffe          B.W      OLED_ShowString
000152  2901              CMP      r1,#1                 ;1050
000154  d004              BEQ      |L10.352|
000156  2904              CMP      r1,#4                 ;1050
000158  d188              BNE      |L10.108|
00015a  f8806070          STRB     r6,[r0,#0x70]         ;1052
                  |L10.350|
00015e  e774              B        |L10.74|
                  |L10.352|
000160  f7fffffe          BL       OLED_Clear
000164  2000              MOVS     r0,#0                 ;1057
                  |L10.358|
000166  1821              ADDS     r1,r4,r0              ;1057
000168  750d              STRB     r5,[r1,#0x14]         ;1057
00016a  1c40              ADDS     r0,r0,#1              ;1057
00016c  2809              CMP      r0,#9                 ;1057
00016e  dbfa              BLT      |L10.358|
000170  2000              MOVS     r0,#0                 ;1058
                  |L10.370|
000172  1821              ADDS     r1,r4,r0              ;1058
000174  728d              STRB     r5,[r1,#0xa]          ;1058
000176  1c40              ADDS     r0,r0,#1              ;1058
000178  2809              CMP      r0,#9                 ;1058
00017a  dbfa              BLT      |L10.370|
00017c  2100              MOVS     r1,#0                 ;1059
00017e  2310              MOVS     r3,#0x10              ;1059
000180  a28f              ADR      r2,|L10.960|
000182  4608              MOV      r0,r1                 ;1059
000184  f7fffffe          BL       OLED_ShowString
000188  e8bd41f0          POP      {r4-r8,lr}            ;1060
00018c  2310              MOVS     r3,#0x10              ;1060
00018e  2102              MOVS     r1,#2                 ;1060
000190  a28e              ADR      r2,|L10.972|
000192  2000              MOVS     r0,#0                 ;1060
000194  f7ffbffe          B.W      OLED_ShowString
                  |L10.408|
000198  701e              STRB     r6,[r3,#0]            ;1069
00019a  78c2              LDRB     r2,[r0,#3]            ;1070
00019c  2a06              CMP      r2,#6                 ;1070
00019e  d29f              BCS      |L10.224|
0001a0  e8dff002          TBB      [pc,r2]               ;1070
0001a4  03203d5a          DCB      0x03,0x20,0x3d,0x5a
0001a8  7794              DCB      0x77,0x94
0001aa  2901              CMP      r1,#1                 ;1072
0001ac  d004              BEQ      |L10.440|
0001ae  2904              CMP      r1,#4                 ;1072
0001b0  d196              BNE      |L10.224|
0001b2  f8806070          STRB     r6,[r0,#0x70]         ;1074
                  |L10.438|
0001b6  e748              B        |L10.74|
                  |L10.440|
0001b8  f7fffffe          BL       OLED_Clear
0001bc  7b60              LDRB     r0,[r4,#0xd]          ;1079  ; outfireRobotState
0001be  b140              CBZ      r0,|L10.466|
0001c0  7365              STRB     r5,[r4,#0xd]          ;1080
0001c2  e8bd41f0          POP      {r4-r8,lr}            ;1081
0001c6  2310              MOVS     r3,#0x10              ;1081
0001c8  2100              MOVS     r1,#0                 ;1081
0001ca  a277              ADR      r2,|L10.936|
0001cc  4608              MOV      r0,r1                 ;1081
0001ce  f7ffbffe          B.W      OLED_ShowString
                  |L10.466|
0001d2  7366              STRB     r6,[r4,#0xd]          ;1084
0001d4  e8bd41f0          POP      {r4-r8,lr}            ;1085
0001d8  2310              MOVS     r3,#0x10              ;1085
0001da  2100              MOVS     r1,#0                 ;1085
0001dc  a275              ADR      r2,|L10.948|
0001de  4608              MOV      r0,r1                 ;1085
0001e0  f7ffbffe          B.W      OLED_ShowString
0001e4  2901              CMP      r1,#1                 ;1091
0001e6  d004              BEQ      |L10.498|
0001e8  2904              CMP      r1,#4                 ;1091
0001ea  d196              BNE      |L10.282|
0001ec  f8806070          STRB     r6,[r0,#0x70]         ;1093
                  |L10.496|
0001f0  e72b              B        |L10.74|
                  |L10.498|
0001f2  f7fffffe          BL       OLED_Clear
0001f6  7ba0              LDRB     r0,[r4,#0xe]          ;1098  ; outfireRobotState
0001f8  b140              CBZ      r0,|L10.524|
0001fa  73a5              STRB     r5,[r4,#0xe]          ;1099
0001fc  e8bd41f0          POP      {r4-r8,lr}            ;1100
000200  2310              MOVS     r3,#0x10              ;1100
000202  2100              MOVS     r1,#0                 ;1100
000204  a268              ADR      r2,|L10.936|
000206  4608              MOV      r0,r1                 ;1100
000208  f7ffbffe          B.W      OLED_ShowString
                  |L10.524|
00020c  73a6              STRB     r6,[r4,#0xe]          ;1103
00020e  e8bd41f0          POP      {r4-r8,lr}            ;1104
000212  2310              MOVS     r3,#0x10              ;1104
000214  2100              MOVS     r1,#0                 ;1104
000216  a267              ADR      r2,|L10.948|
000218  4608              MOV      r0,r1                 ;1104
00021a  f7ffbffe          B.W      OLED_ShowString
00021e  2901              CMP      r1,#1                 ;1110
000220  d004              BEQ      |L10.556|
000222  2904              CMP      r1,#4                 ;1110
000224  d19b              BNE      |L10.350|
000226  f8806070          STRB     r6,[r0,#0x70]         ;1112
                  |L10.554|
00022a  e70e              B        |L10.74|
                  |L10.556|
00022c  f7fffffe          BL       OLED_Clear
000230  7be0              LDRB     r0,[r4,#0xf]          ;1117  ; outfireRobotState
000232  b140              CBZ      r0,|L10.582|
000234  73e5              STRB     r5,[r4,#0xf]          ;1118
000236  e8bd41f0          POP      {r4-r8,lr}            ;1119
00023a  2310              MOVS     r3,#0x10              ;1119
00023c  2100              MOVS     r1,#0                 ;1119
00023e  a25a              ADR      r2,|L10.936|
000240  4608              MOV      r0,r1                 ;1119
000242  f7ffbffe          B.W      OLED_ShowString
                  |L10.582|
000246  73e6              STRB     r6,[r4,#0xf]          ;1122
000248  e8bd41f0          POP      {r4-r8,lr}            ;1123
00024c  2310              MOVS     r3,#0x10              ;1123
00024e  2100              MOVS     r1,#0                 ;1123
000250  a258              ADR      r2,|L10.948|
000252  4608              MOV      r0,r1                 ;1123
000254  f7ffbffe          B.W      OLED_ShowString
000258  2901              CMP      r1,#1                 ;1129
00025a  d004              BEQ      |L10.614|
00025c  2904              CMP      r1,#4                 ;1129
00025e  d1aa              BNE      |L10.438|
000260  f8806070          STRB     r6,[r0,#0x70]         ;1131
                  |L10.612|
000264  e6f1              B        |L10.74|
                  |L10.614|
000266  f7fffffe          BL       OLED_Clear
00026a  7c20              LDRB     r0,[r4,#0x10]         ;1136  ; outfireRobotState
00026c  b140              CBZ      r0,|L10.640|
00026e  7425              STRB     r5,[r4,#0x10]         ;1137
000270  e8bd41f0          POP      {r4-r8,lr}            ;1138
000274  2310              MOVS     r3,#0x10              ;1138
000276  2100              MOVS     r1,#0                 ;1138
000278  a24b              ADR      r2,|L10.936|
00027a  4608              MOV      r0,r1                 ;1138
00027c  f7ffbffe          B.W      OLED_ShowString
                  |L10.640|
000280  7426              STRB     r6,[r4,#0x10]         ;1141
000282  e8bd41f0          POP      {r4-r8,lr}            ;1142
000286  2310              MOVS     r3,#0x10              ;1142
000288  2100              MOVS     r1,#0                 ;1142
00028a  a24a              ADR      r2,|L10.948|
00028c  4608              MOV      r0,r1                 ;1142
00028e  f7ffbffe          B.W      OLED_ShowString
000292  2901              CMP      r1,#1                 ;1148
000294  d004              BEQ      |L10.672|
000296  2904              CMP      r1,#4                 ;1148
000298  d18d              BNE      |L10.438|
00029a  f8806070          STRB     r6,[r0,#0x70]         ;1150
                  |L10.670|
00029e  e6d4              B        |L10.74|
                  |L10.672|
0002a0  f7fffffe          BL       OLED_Clear
0002a4  7c60              LDRB     r0,[r4,#0x11]         ;1155  ; outfireRobotState
0002a6  b140              CBZ      r0,|L10.698|
0002a8  7465              STRB     r5,[r4,#0x11]         ;1156
0002aa  e8bd41f0          POP      {r4-r8,lr}            ;1157
0002ae  2310              MOVS     r3,#0x10              ;1157
0002b0  2100              MOVS     r1,#0                 ;1157
0002b2  a23d              ADR      r2,|L10.936|
0002b4  4608              MOV      r0,r1                 ;1157
0002b6  f7ffbffe          B.W      OLED_ShowString
                  |L10.698|
0002ba  7466              STRB     r6,[r4,#0x11]         ;1160
0002bc  e8bd41f0          POP      {r4-r8,lr}            ;1161
0002c0  2310              MOVS     r3,#0x10              ;1161
0002c2  2100              MOVS     r1,#0                 ;1161
0002c4  a23b              ADR      r2,|L10.948|
0002c6  4608              MOV      r0,r1                 ;1161
0002c8  f7ffbffe          B.W      OLED_ShowString
0002cc  2901              CMP      r1,#1                 ;1167
0002ce  d004              BEQ      |L10.730|
0002d0  2904              CMP      r1,#4                 ;1167
0002d2  d18d              BNE      |L10.496|
0002d4  f8806070          STRB     r6,[r0,#0x70]         ;1169
0002d8  e6b7              B        |L10.74|
                  |L10.730|
0002da  f7fffffe          BL       OLED_Clear
0002de  2000              MOVS     r0,#0                 ;1174
                  |L10.736|
0002e0  1821              ADDS     r1,r4,r0              ;1174
0002e2  750d              STRB     r5,[r1,#0x14]         ;1174
0002e4  1c40              ADDS     r0,r0,#1              ;1174
0002e6  2809              CMP      r0,#9                 ;1174
0002e8  dbfa              BLT      |L10.736|
0002ea  2000              MOVS     r0,#0                 ;1175
                  |L10.748|
0002ec  1821              ADDS     r1,r4,r0              ;1175
0002ee  728d              STRB     r5,[r1,#0xa]          ;1175
0002f0  1c40              ADDS     r0,r0,#1              ;1175
0002f2  2809              CMP      r0,#9                 ;1175
0002f4  dbfa              BLT      |L10.748|
0002f6  2100              MOVS     r1,#0                 ;1176
0002f8  2310              MOVS     r3,#0x10              ;1176
0002fa  a231              ADR      r2,|L10.960|
0002fc  4608              MOV      r0,r1                 ;1176
0002fe  f7fffffe          BL       OLED_ShowString
000302  e8bd41f0          POP      {r4-r8,lr}            ;1177
000306  2310              MOVS     r3,#0x10              ;1177
000308  2102              MOVS     r1,#2                 ;1177
00030a  a230              ADR      r2,|L10.972|
00030c  2000              MOVS     r0,#0                 ;1177
00030e  f7ffbffe          B.W      OLED_ShowString
                  |L10.786|
000312  2901              CMP      r1,#1                 ;1189
000314  d004              BEQ      |L10.800|
000316  2904              CMP      r1,#4                 ;1189
000318  d187              BNE      |L10.554|
00031a  f8806070          STRB     r6,[r0,#0x70]         ;1191
00031e  e694              B        |L10.74|
                  |L10.800|
000320  f7fffffe          BL       OLED_Clear
000324  7265              STRB     r5,[r4,#9]            ;1196
000326  e8bd41f0          POP      {r4-r8,lr}            ;1197
00032a  2310              MOVS     r3,#0x10              ;1197
00032c  2100              MOVS     r1,#0                 ;1197
00032e  a22a              ADR      r2,|L10.984|
000330  4608              MOV      r0,r1                 ;1197
000332  f7ffbffe          B.W      OLED_ShowString
                  |L10.822|
000336  2901              CMP      r1,#1                 ;1203
000338  d004              BEQ      |L10.836|
00033a  2904              CMP      r1,#4                 ;1203
00033c  d192              BNE      |L10.612|
00033e  f8806070          STRB     r6,[r0,#0x70]         ;1205
000342  e682              B        |L10.74|
                  |L10.836|
000344  f7fffffe          BL       OLED_Clear
000348  7266              STRB     r6,[r4,#9]            ;1210
00034a  e8bd41f0          POP      {r4-r8,lr}            ;1211
00034e  2310              MOVS     r3,#0x10              ;1211
000350  2100              MOVS     r1,#0                 ;1211
000352  a224              ADR      r2,|L10.996|
000354  4608              MOV      r0,r1                 ;1211
000356  f7ffbffe          B.W      OLED_ShowString
                  |L10.858|
00035a  2901              CMP      r1,#1                 ;1217
00035c  d004              BEQ      |L10.872|
00035e  2904              CMP      r1,#4                 ;1217
000360  d19d              BNE      |L10.670|
000362  f8806070          STRB     r6,[r0,#0x70]         ;1219
000366  e670              B        |L10.74|
                  |L10.872|
000368  f7fffffe          BL       OLED_Clear
00036c  7267              STRB     r7,[r4,#9]            ;1224
00036e  e8bd41f0          POP      {r4-r8,lr}            ;1225
000372  2310              MOVS     r3,#0x10              ;1225
000374  2100              MOVS     r1,#0                 ;1225
000376  a21e              ADR      r2,|L10.1008|
000378  4608              MOV      r0,r1                 ;1225
00037a  f7ffbffe          B.W      OLED_ShowString
                  |L10.894|
00037e  f7fffffe          BL       OLED_Clear
000382  2003              MOVS     r0,#3                 ;1238
000384  7260              STRB     r0,[r4,#9]            ;1238
000386  e8bd41f0          POP      {r4-r8,lr}            ;1239
00038a  2310              MOVS     r3,#0x10              ;1239
00038c  2100              MOVS     r1,#0                 ;1239
00038e  a21b              ADR      r2,|L10.1020|
000390  4608              MOV      r0,r1                 ;1239
000392  f7ffbffe          B.W      OLED_ShowString
;;;1248   
                          ENDP

000396  0000              DCW      0x0000
                  |L10.920|
                          DCD      ||.data||
                  |L10.924|
                          DCD      robotSelect
                  |L10.928|
                          DCD      outfireRobotState
                  |L10.932|
                          DCD      rescueRobotState
                  |L10.936|
0003a8  43484f4f          DCB      "CHOOSE_NO",0
0003ac  53455f4e
0003b0  4f00    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L10.948|
0003b4  43484f4f          DCB      "CHOOSE_YES",0
0003b8  53455f59
0003bc  455300  
0003bf  00                DCB      0
                  |L10.960|
0003c0  434c4541          DCB      "CLEAR_ALL",0
0003c4  525f414c
0003c8  4c00    
0003ca  00                DCB      0
0003cb  00                DCB      0
                  |L10.972|
0003cc  53554343          DCB      "SUCCESSFULY",0
0003d0  45535346
0003d4  554c5900
                  |L10.984|
0003d8  524f4f4d          DCB      "ROOM1_OK",0
0003dc  315f4f4b
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L10.996|
0003e4  524f4f4d          DCB      "ROOM2_OK",0
0003e8  325f4f4b
0003ec  00      
0003ed  00                DCB      0
0003ee  00                DCB      0
0003ef  00                DCB      0
                  |L10.1008|
0003f0  524f4f4d          DCB      "ROOM3_OK",0
0003f4  335f4f4b
0003f8  00      
0003f9  00                DCB      0
0003fa  00                DCB      0
0003fb  00                DCB      0
                  |L10.1020|
0003fc  524f4f4d          DCB      "ROOM4_OK",0
000400  345f4f4b
000404  00      
000405  00                DCB      0
000406  00                DCB      0
000407  00                DCB      0

                          AREA ||i.fuctionParameterCalibration||, CODE, READONLY, ALIGN=2

                  fuctionParameterCalibration PROC
;;;614    */
;;;615    void fuctionParameterCalibration(float *parameter,uint16_t *realParameter,DeviceActivation_t *displayFunction,DeviceActivation_t *chooseFunction,DeviceActivation_t *saveFunction)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;616    {
000004  460e              MOV      r6,r1
000006  f8dd8018          LDR      r8,[sp,#0x18]
00000a  4617              MOV      r7,r2
;;;617    	switch(oled.keyValue){
00000c  4916              LDR      r1,|L11.104|
;;;618    		case OLED_ENTER:{
;;;619    			OLED_Clear();
;;;620    			/*显示参数并重置函数*/
;;;621    			displayFunction();
;;;622    			break;
;;;623    		}
;;;624    		case OLED_UP:{
;;;625    			/*选择参数函数*/
;;;626    			chooseFunction();
;;;627    			currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
00000e  4d16              LDR      r5,|L11.104|
000010  2401              MOVS     r4,#1                 ;617
000012  7849              LDRB     r1,[r1,#1]            ;617  ; oled
000014  3d10              SUBS     r5,r5,#0x10
000016  2906              CMP      r1,#6                 ;617
000018  d20e              BCS      |L11.56|
00001a  e8dff001          TBB      [pc,r1]               ;617
00001e  0d03              DCB      0x0d,0x03
000020  090f141c          DCB      0x09,0x0f,0x14,0x1c
000024  f7fffffe          BL       OLED_Clear
000028  46bc              MOV      r12,r7                ;621
00002a  e8bd41f0          POP      {r4-r8,lr}            ;621
00002e  4760              BX       r12                   ;621
000030  4798              BLX      r3                    ;626
000032  68e8              LDR      r0,[r5,#0xc]  ; currentMenu
000034  f8804070          STRB     r4,[r0,#0x70]
                  |L11.56|
;;;628    			break;
;;;629    		}
;;;630    		case OLED_DOWN:{
;;;631    			/*选择参数函数*/
;;;632    			chooseFunction();
;;;633    			currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;634    			break;
;;;635    		}
;;;636    		case OLED_BACK:{
;;;637    			/*重置函数并返回菜单目录*/
;;;638    			*realParameter = *parameter ;
;;;639    			currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;640    			break;
;;;641    		} 
;;;642    		case OLED_SAVE:{
;;;643    			/*选择参数函数*/
;;;644    			chooseFunction();
;;;645    			saveFunction();
;;;646    			app_FlashWriteUdata();									//开启储存到flash
;;;647    			saveGUIFinish();
;;;648    			break;
;;;649    		}
;;;650    		default:break;
;;;651    	}
;;;652    }
000038  e8bd81f0          POP      {r4-r8,pc}
00003c  4798              BLX      r3                    ;632
00003e  68e8              LDR      r0,[r5,#0xc]          ;633  ; currentMenu
000040  f8804070          STRB     r4,[r0,#0x70]         ;633
000044  e7f8              B        |L11.56|
000046  6800              LDR      r0,[r0,#0]            ;638
000048  f7fffffe          BL       __aeabi_f2uiz
00004c  8030              STRH     r0,[r6,#0]            ;638
00004e  68e8              LDR      r0,[r5,#0xc]          ;639  ; currentMenu
000050  f8804070          STRB     r4,[r0,#0x70]         ;639
000054  e7f0              B        |L11.56|
000056  4798              BLX      r3                    ;644
000058  47c0              BLX      r8                    ;645
00005a  f7fffffe          BL       app_FlashWriteUdata
00005e  e8bd41f0          POP      {r4-r8,lr}            ;647
000062  f7ffbffe          B.W      saveGUIFinish
;;;653    
                          ENDP

000066  0000              DCW      0x0000
                  |L11.104|
                          DCD      ||.data||+0x10

                          AREA ||i.menuInit||, CODE, READONLY, ALIGN=2

                  menuInit PROC
;;;15     
;;;16     void menuInit()
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;17     {
;;;18     	u8 i = 0;
;;;19     	/***************************主菜单*********************************************/
;;;20     	{
;;;21     		mainMenu.showFrom = 0;
000004  f8df93bc          LDR      r9,|L12.964|
000008  f04f0800          MOV      r8,#0
00000c  f8898000          STRB     r8,[r9,#0]
;;;22     		mainMenu.showTo = 3;
000010  f04f0b03          MOV      r11,#3
000014  f889b001          STRB     r11,[r9,#1]
;;;23     		mainMenu.subMenuNumber = 3;
000018  f889b002          STRB     r11,[r9,#2]
;;;24     		mainMenu.currentOption = 0;
00001c  f8898003          STRB     r8,[r9,#3]
;;;25     		mainMenu.menuOption[0] = "TestMode";
000020  a0e9              ADR      r0,|L12.968|
000022  f8c90004          STR      r0,[r9,#4]  ; mainMenu
;;;26     		mainMenu.menuOption[1] = "WorkChoose";
000026  a0eb              ADR      r0,|L12.980|
000028  f8c90008          STR      r0,[r9,#8]  ; mainMenu
;;;27     		mainMenu.menuOption[2] = "TYPE_CHOOSE";
00002c  a0ec              ADR      r0,|L12.992|
00002e  f8c9000c          STR      r0,[r9,#0xc]  ; mainMenu
;;;28     		mainMenu.subMenu = malloc(sizeof(menuStruct_t *) * mainMenu.subMenuNumber);
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       malloc
000038  f8c90068          STR      r0,[r9,#0x68]  ; mainMenu
;;;29     		mainMenu.subMenu[0] = &testModeMenu;
00003c  f1090678          ADD      r6,r9,#0x78
000040  6006              STR      r6,[r0,#0]
;;;30     		mainMenu.subMenu[1] = &workChooseMenu;
000042  f8d90068          LDR      r0,[r9,#0x68]  ; mainMenu
000046  f1060478          ADD      r4,r6,#0x78
00004a  6044              STR      r4,[r0,#4]
;;;31     		mainMenu.subMenu[2] = &fireChooseMenu;
00004c  f8d90068          LDR      r0,[r9,#0x68]  ; mainMenu
000050  f1040a78          ADD      r10,r4,#0x78
000054  f8c0a008          STR      r10,[r0,#8]
;;;32     		mainMenu.func = (void (**)(void))malloc(sizeof(NULL) * mainMenu.subMenuNumber);
000058  f8990002          LDRB     r0,[r9,#2]  ; mainMenu
00005c  0080              LSLS     r0,r0,#2
00005e  f7fffffe          BL       malloc
000062  f8c90074          STR      r0,[r9,#0x74]  ; mainMenu
;;;33     		mainMenu.func[0] = NULL;
000066  f8c08000          STR      r8,[r0,#0]
;;;34     		mainMenu.func[1] = NULL;
00006a  f8d90074          LDR      r0,[r9,#0x74]  ; mainMenu
00006e  f8c08004          STR      r8,[r0,#4]
;;;35     		mainMenu.func[2] = NULL;
000072  f8d90074          LDR      r0,[r9,#0x74]  ; mainMenu
000076  f8c08008          STR      r8,[r0,#8]
;;;36     	}
;;;37     	/***************************TestMode菜单*********************************************/
;;;38     	{
;;;39     		testModeMenu.showFrom = 0;
00007a  f8868000          STRB     r8,[r6,#0]
;;;40     		testModeMenu.showTo = 3;
00007e  f886b001          STRB     r11,[r6,#1]
;;;41     		testModeMenu.subMenuNumber = 23;
000082  2017              MOVS     r0,#0x17
000084  70b0              STRB     r0,[r6,#2]
;;;42     		testModeMenu.currentOption = 0;
000086  f8868003          STRB     r8,[r6,#3]
;;;43     		testModeMenu.menuOption[0] = "HC-SR04";
00008a  a0d8              ADR      r0,|L12.1004|
00008c  6070              STR      r0,[r6,#4]  ; testModeMenu
;;;44     		testModeMenu.menuOption[1] = "AD";
00008e  a0d9              ADR      r0,|L12.1012|
000090  60b0              STR      r0,[r6,#8]  ; testModeMenu
;;;45     		testModeMenu.menuOption[2] = "FAN";
000092  a0d9              ADR      r0,|L12.1016|
000094  60f0              STR      r0,[r6,#0xc]  ; testModeMenu
;;;46     		testModeMenu.menuOption[3] = "Zero_Set";
000096  a0d9              ADR      r0,|L12.1020|
000098  6130              STR      r0,[r6,#0x10]  ; testModeMenu
;;;47     		testModeMenu.menuOption[4] = "FTL_90";
00009a  a0db              ADR      r0,|L12.1032|
00009c  6170              STR      r0,[r6,#0x14]  ; testModeMenu
;;;48     		testModeMenu.menuOption[5] = "FTL_180";
00009e  a0dc              ADR      r0,|L12.1040|
0000a0  61b0              STR      r0,[r6,#0x18]  ; testModeMenu
;;;49     		testModeMenu.menuOption[6] = "FTR_90";
0000a2  a0dd              ADR      r0,|L12.1048|
0000a4  61f0              STR      r0,[r6,#0x1c]  ; testModeMenu
;;;50     		testModeMenu.menuOption[7] = "FTR_180";
0000a6  a0de              ADR      r0,|L12.1056|
0000a8  6230              STR      r0,[r6,#0x20]  ; testModeMenu
;;;51     		testModeMenu.menuOption[8] = "FTL_135";
0000aa  a0df              ADR      r0,|L12.1064|
0000ac  6270              STR      r0,[r6,#0x24]  ; testModeMenu
;;;52     		testModeMenu.menuOption[9] = "FTL_45";
0000ae  a0e0              ADR      r0,|L12.1072|
0000b0  62b0              STR      r0,[r6,#0x28]  ; testModeMenu
;;;53     		testModeMenu.menuOption[10] = "FTR_135";
0000b2  a0e1              ADR      r0,|L12.1080|
0000b4  62f0              STR      r0,[r6,#0x2c]  ; testModeMenu
;;;54     		testModeMenu.menuOption[11] = "FTR_45";
0000b6  a0e2              ADR      r0,|L12.1088|
0000b8  6330              STR      r0,[r6,#0x30]  ; testModeMenu
;;;55     		testModeMenu.menuOption[12] = "BTL_45";
0000ba  a0e3              ADR      r0,|L12.1096|
0000bc  6370              STR      r0,[r6,#0x34]  ; testModeMenu
;;;56     		testModeMenu.menuOption[13] = "BTR_45";
0000be  a0e4              ADR      r0,|L12.1104|
0000c0  63b0              STR      r0,[r6,#0x38]  ; testModeMenu
;;;57     		testModeMenu.menuOption[14] = "RTL_45";
0000c2  a0e5              ADR      r0,|L12.1112|
0000c4  63f0              STR      r0,[r6,#0x3c]  ; testModeMenu
;;;58     		testModeMenu.menuOption[15] = "RTR_45";
0000c6  a0e6              ADR      r0,|L12.1120|
0000c8  6430              STR      r0,[r6,#0x40]  ; testModeMenu
;;;59     		testModeMenu.menuOption[16] = "RTL_90";
0000ca  a0e7              ADR      r0,|L12.1128|
0000cc  6470              STR      r0,[r6,#0x44]  ; testModeMenu
;;;60     		testModeMenu.menuOption[17] = "RTR_90";
0000ce  a0e8              ADR      r0,|L12.1136|
0000d0  64b0              STR      r0,[r6,#0x48]  ; testModeMenu
;;;61     		testModeMenu.menuOption[18] = "RTL_135";
0000d2  a0e9              ADR      r0,|L12.1144|
0000d4  64f0              STR      r0,[r6,#0x4c]  ; testModeMenu
;;;62     		testModeMenu.menuOption[19] = "RTR_135";
0000d6  a0ea              ADR      r0,|L12.1152|
0000d8  6530              STR      r0,[r6,#0x50]  ; testModeMenu
;;;63     		testModeMenu.menuOption[20] = "RTL_180";
0000da  a0eb              ADR      r0,|L12.1160|
0000dc  6570              STR      r0,[r6,#0x54]  ; testModeMenu
;;;64     		testModeMenu.menuOption[21] = "RTR_180";
0000de  a0ec              ADR      r0,|L12.1168|
0000e0  65b0              STR      r0,[r6,#0x58]  ; testModeMenu
;;;65     		testModeMenu.menuOption[22] = "GS";
0000e2  a0ed              ADR      r0,|L12.1176|
0000e4  65f0              STR      r0,[r6,#0x5c]  ; testModeMenu
;;;66     		testModeMenu.subMenu = malloc(sizeof(menuStruct_t *) * testModeMenu.subMenuNumber);
0000e6  205c              MOVS     r0,#0x5c
0000e8  f7fffffe          BL       malloc
0000ec  66b0              STR      r0,[r6,#0x68]  ; testModeMenu
;;;67     		testModeMenu.subMenu[0] = NULL;
0000ee  f8c08000          STR      r8,[r0,#0]
;;;68     		testModeMenu.subMenu[1] = NULL;
0000f2  6eb0              LDR      r0,[r6,#0x68]  ; testModeMenu
0000f4  f8c08004          STR      r8,[r0,#4]
;;;69     		testModeMenu.subMenu[2] = NULL;
0000f8  6eb0              LDR      r0,[r6,#0x68]  ; testModeMenu
0000fa  f8c08008          STR      r8,[r0,#8]
;;;70     		for(i = 3;i<23;i++){
0000fe  2003              MOVS     r0,#3
;;;71     			testModeMenu.subMenu[i] = &testWalkMenu;
000100  f10407f0          ADD      r7,r4,#0xf0
                  |L12.260|
000104  6eb1              LDR      r1,[r6,#0x68]  ; testModeMenu
000106  f8417020          STR      r7,[r1,r0,LSL #2]
00010a  1c40              ADDS     r0,r0,#1              ;70
00010c  b2c0              UXTB     r0,r0                 ;70
00010e  2817              CMP      r0,#0x17              ;70
000110  d3f8              BCC      |L12.260|
;;;72     		}
;;;73     		testModeMenu.preMenu = &mainMenu;
000112  f8c6906c          STR      r9,[r6,#0x6c]  ; testModeMenu
;;;74     		testModeMenu.func = (void (**)(void))malloc(sizeof(NULL) * testModeMenu.subMenuNumber);
000116  78b0              LDRB     r0,[r6,#2]  ; testModeMenu
000118  0080              LSLS     r0,r0,#2
00011a  f7fffffe          BL       malloc
00011e  6770              STR      r0,[r6,#0x74]  ; testModeMenu
;;;75     		testModeMenu.func[0] = testSr04Function;
000120  49de              LDR      r1,|L12.1180|
000122  6001              STR      r1,[r0,#0]
;;;76     		testModeMenu.func[1] = adFunction;
000124  6f71              LDR      r1,[r6,#0x74]  ; testModeMenu
000126  48de              LDR      r0,|L12.1184|
000128  6048              STR      r0,[r1,#4]
;;;77     		testModeMenu.func[2] = fanTest;
00012a  6f71              LDR      r1,[r6,#0x74]  ; testModeMenu
00012c  48dd              LDR      r0,|L12.1188|
00012e  6088              STR      r0,[r1,#8]
;;;78     		for(i = 3;i<23;i++){
000130  2003              MOVS     r0,#3
                  |L12.306|
;;;79     			testModeMenu.func[i] = NULL;
000132  6f71              LDR      r1,[r6,#0x74]  ; testModeMenu
000134  f8418020          STR      r8,[r1,r0,LSL #2]
000138  1c40              ADDS     r0,r0,#1              ;78
00013a  b2c0              UXTB     r0,r0                 ;78
00013c  2817              CMP      r0,#0x17              ;78
00013e  d3f8              BCC      |L12.306|
;;;80     		}
;;;81     	}
;;;82     	/***************************WorkChoose菜单*********************************************/
;;;83     	{
;;;84     		workChooseMenu.showFrom = 0;
000140  f8848000          STRB     r8,[r4,#0]
;;;85     		workChooseMenu.showTo = 3;
000144  f884b001          STRB     r11,[r4,#1]
;;;86     		workChooseMenu.subMenuNumber = 2;
000148  2002              MOVS     r0,#2
00014a  70a0              STRB     r0,[r4,#2]
;;;87     		workChooseMenu.currentOption = 0;
00014c  f8848003          STRB     r8,[r4,#3]
;;;88     		workChooseMenu.menuOption[0] = "TestMode";
000150  a09d              ADR      r0,|L12.968|
000152  6060              STR      r0,[r4,#4]  ; workChooseMenu
;;;89     		workChooseMenu.menuOption[1] = "WorkMode";
000154  a0d4              ADR      r0,|L12.1192|
000156  60a0              STR      r0,[r4,#8]  ; workChooseMenu
;;;90     		workChooseMenu.subMenu = malloc(sizeof(menuStruct_t *) * workChooseMenu.subMenuNumber);
000158  2008              MOVS     r0,#8
00015a  f7fffffe          BL       malloc
00015e  66a0              STR      r0,[r4,#0x68]  ; workChooseMenu
;;;91     		for(i = 0;i<2;i++){
000160  2000              MOVS     r0,#0
                  |L12.354|
;;;92     			workChooseMenu.subMenu[i] = NULL;
000162  6ea1              LDR      r1,[r4,#0x68]  ; workChooseMenu
000164  f8418020          STR      r8,[r1,r0,LSL #2]
000168  1c40              ADDS     r0,r0,#1              ;91
00016a  b2c0              UXTB     r0,r0                 ;91
00016c  2802              CMP      r0,#2                 ;91
00016e  d3f8              BCC      |L12.354|
;;;93     		}
;;;94     		workChooseMenu.preMenu = &mainMenu;
000170  f8c4906c          STR      r9,[r4,#0x6c]  ; workChooseMenu
;;;95     		workChooseMenu.func = (void (**)(void))malloc(sizeof(NULL) * workChooseMenu.subMenuNumber);
000174  78a0              LDRB     r0,[r4,#2]  ; workChooseMenu
000176  0080              LSLS     r0,r0,#2
000178  f7fffffe          BL       malloc
00017c  6760              STR      r0,[r4,#0x74]  ; workChooseMenu
;;;96     		for(i = 0;i<2;i++){
00017e  2000              MOVS     r0,#0
;;;97     			workChooseMenu.func[i] = workChoose;
000180  49cc              LDR      r1,|L12.1204|
                  |L12.386|
000182  6f62              LDR      r2,[r4,#0x74]  ; workChooseMenu
000184  f8421020          STR      r1,[r2,r0,LSL #2]
000188  1c40              ADDS     r0,r0,#1              ;96
00018a  b2c0              UXTB     r0,r0                 ;96
00018c  2802              CMP      r0,#2                 ;96
00018e  d3f8              BCC      |L12.386|
;;;98     		}
;;;99     	}
;;;100    	/***************************fireChoose菜单*********************************************/
;;;101    	{
;;;102    		fireChooseMenu.showFrom = 0;
000190  f88a8000          STRB     r8,[r10,#0]
;;;103    		fireChooseMenu.showTo = 3;
000194  f88ab001          STRB     r11,[r10,#1]
;;;104    		fireChooseMenu.subMenuNumber = 3;
000198  f88ab002          STRB     r11,[r10,#2]
;;;105    		fireChooseMenu.currentOption = 0;
00019c  f88a8003          STRB     r8,[r10,#3]
;;;106    		fireChooseMenu.menuOption[0] = "FIRE-01";
0001a0  a0c5              ADR      r0,|L12.1208|
0001a2  f8ca0004          STR      r0,[r10,#4]  ; fireChooseMenu
;;;107    		fireChooseMenu.menuOption[1] = "FIRE-02";
0001a6  a0c6              ADR      r0,|L12.1216|
0001a8  f8ca0008          STR      r0,[r10,#8]  ; fireChooseMenu
;;;108    		fireChooseMenu.menuOption[2] = "RESCUE";
0001ac  a0c6              ADR      r0,|L12.1224|
0001ae  f8ca000c          STR      r0,[r10,#0xc]  ; fireChooseMenu
;;;109    		fireChooseMenu.subMenu = malloc(sizeof(menuStruct_t *) * fireChooseMenu.subMenuNumber);
0001b2  200c              MOVS     r0,#0xc
0001b4  f7fffffe          BL       malloc
0001b8  f8ca0068          STR      r0,[r10,#0x68]  ; fireChooseMenu
;;;110    		fireChooseMenu.subMenu[0] = &FOMenu;
0001bc  4cc4              LDR      r4,|L12.1232|
0001be  6004              STR      r4,[r0,#0]
;;;111    		fireChooseMenu.subMenu[1] = &FTMenu;
0001c0  f8da0068          LDR      r0,[r10,#0x68]  ; fireChooseMenu
0001c4  f1040578          ADD      r5,r4,#0x78
0001c8  6045              STR      r5,[r0,#4]
;;;112    		fireChooseMenu.subMenu[2] = &RMenu;
0001ca  f8da1068          LDR      r1,[r10,#0x68]  ; fireChooseMenu
0001ce  f10400f0          ADD      r0,r4,#0xf0
0001d2  6088              STR      r0,[r1,#8]
;;;113    		fireChooseMenu.preMenu = &mainMenu;
0001d4  f8ca906c          STR      r9,[r10,#0x6c]  ; fireChooseMenu
;;;114    		fireChooseMenu.func = (void (**)(void))malloc(sizeof(NULL) * fireChooseMenu.subMenuNumber);
0001d8  f89a0002          LDRB     r0,[r10,#2]  ; fireChooseMenu
0001dc  0080              LSLS     r0,r0,#2
0001de  f7fffffe          BL       malloc
0001e2  f8ca0074          STR      r0,[r10,#0x74]  ; fireChooseMenu
;;;115    		for(i = 0;i<3;i++){
0001e6  2000              MOVS     r0,#0
                  |L12.488|
;;;116    			fireChooseMenu.func[i] = NULL;
0001e8  f8da1074          LDR      r1,[r10,#0x74]  ; fireChooseMenu
0001ec  f8418020          STR      r8,[r1,r0,LSL #2]
0001f0  1c40              ADDS     r0,r0,#1              ;115
0001f2  b2c0              UXTB     r0,r0                 ;115
0001f4  2803              CMP      r0,#3                 ;115
0001f6  d3f7              BCC      |L12.488|
;;;117    		}
;;;118    	}
;;;119    	/***************************FO菜单*********************************************/
;;;120    	{
;;;121    		FOMenu.showFrom = 0;
0001f8  f8848000          STRB     r8,[r4,#0]
;;;122    		FOMenu.showTo = 3;
0001fc  f884b001          STRB     r11,[r4,#1]
;;;123    		FOMenu.subMenuNumber = 5;
000200  2005              MOVS     r0,#5
000202  70a0              STRB     r0,[r4,#2]
;;;124    		FOMenu.currentOption = 0;
000204  f8848003          STRB     r8,[r4,#3]
;;;125    		FOMenu.menuOption[0] = "fire1";
000208  a0b2              ADR      r0,|L12.1236|
00020a  6060              STR      r0,[r4,#4]  ; FOMenu
;;;126    		FOMenu.menuOption[1] = "fire2";
00020c  a0b3              ADR      r0,|L12.1244|
00020e  60a0              STR      r0,[r4,#8]  ; FOMenu
;;;127    		FOMenu.menuOption[2] = "fire3";
000210  a0b4              ADR      r0,|L12.1252|
000212  60e0              STR      r0,[r4,#0xc]  ; FOMenu
;;;128    		FOMenu.menuOption[3] = "fire9";
000214  a0b5              ADR      r0,|L12.1260|
000216  6120              STR      r0,[r4,#0x10]  ; FOMenu
;;;129    		FOMenu.menuOption[4] = "CLEAR_ALL";
000218  a0b6              ADR      r0,|L12.1268|
00021a  6160              STR      r0,[r4,#0x14]  ; FOMenu
;;;130    		FOMenu.subMenu = malloc(sizeof(menuStruct_t *) * FOMenu.subMenuNumber);
00021c  2014              MOVS     r0,#0x14
00021e  f7fffffe          BL       malloc
000222  66a0              STR      r0,[r4,#0x68]  ; FOMenu
;;;131    		for(i = 0;i < 5;i++){
000224  2000              MOVS     r0,#0
                  |L12.550|
;;;132    			FOMenu.subMenu[i] = NULL;
000226  6ea1              LDR      r1,[r4,#0x68]  ; FOMenu
000228  f8418020          STR      r8,[r1,r0,LSL #2]
00022c  1c40              ADDS     r0,r0,#1              ;131
00022e  b2c0              UXTB     r0,r0                 ;131
000230  2805              CMP      r0,#5                 ;131
000232  d3f8              BCC      |L12.550|
;;;133    		}
;;;134    		FOMenu.preMenu = &fireChooseMenu;
000234  f8c4a06c          STR      r10,[r4,#0x6c]  ; FOMenu
;;;135    		FOMenu.func = (void (**)(void))malloc(sizeof(NULL) * FOMenu.subMenuNumber);
000238  78a0              LDRB     r0,[r4,#2]  ; FOMenu
00023a  0080              LSLS     r0,r0,#2
00023c  f7fffffe          BL       malloc
000240  6760              STR      r0,[r4,#0x74]  ; FOMenu
;;;136    		for(i = 0;i<5;i++){
000242  2000              MOVS     r0,#0
000244  4621              MOV      r1,r4                 ;110
;;;137    			FOMenu.func[i] = fireChoose;
000246  4cae              LDR      r4,|L12.1280|
                  |L12.584|
000248  6f4b              LDR      r3,[r1,#0x74]  ; FOMenu
00024a  f8434020          STR      r4,[r3,r0,LSL #2]
00024e  1c40              ADDS     r0,r0,#1              ;136
000250  b2c0              UXTB     r0,r0                 ;136
000252  2805              CMP      r0,#5                 ;136
000254  d3f8              BCC      |L12.584|
;;;138    		}
;;;139    	}
;;;140    	/***************************FT菜单*********************************************/
;;;141    	{
;;;142    		FTMenu.showFrom = 0;
000256  f8858000          STRB     r8,[r5,#0]
;;;143    		FTMenu.showTo = 3;
00025a  f885b001          STRB     r11,[r5,#1]
;;;144    		FTMenu.subMenuNumber = 6;
00025e  2006              MOVS     r0,#6
000260  70a8              STRB     r0,[r5,#2]
;;;145    		FTMenu.currentOption = 0;
000262  f8858003          STRB     r8,[r5,#3]
;;;146    		FTMenu.menuOption[0] = "fire4";
000266  a0a7              ADR      r0,|L12.1284|
000268  6068              STR      r0,[r5,#4]  ; FTMenu
;;;147    		FTMenu.menuOption[1] = "fire5";
00026a  a0a8              ADR      r0,|L12.1292|
00026c  60a8              STR      r0,[r5,#8]  ; FTMenu
;;;148    		FTMenu.menuOption[2] = "fire6";
00026e  a0a9              ADR      r0,|L12.1300|
000270  60e8              STR      r0,[r5,#0xc]  ; FTMenu
;;;149    		FTMenu.menuOption[3] = "fire7";
000272  a0aa              ADR      r0,|L12.1308|
000274  6128              STR      r0,[r5,#0x10]  ; FTMenu
;;;150    		FTMenu.menuOption[4] = "fire8";
000276  a0ab              ADR      r0,|L12.1316|
000278  6168              STR      r0,[r5,#0x14]  ; FTMenu
;;;151    		FTMenu.menuOption[5] = "CLEAR_ALL";
00027a  a09e              ADR      r0,|L12.1268|
00027c  61a8              STR      r0,[r5,#0x18]  ; FTMenu
;;;152    		FTMenu.subMenu = malloc(sizeof(menuStruct_t *) * FTMenu.subMenuNumber);
00027e  2018              MOVS     r0,#0x18
000280  f7fffffe          BL       malloc
000284  66a8              STR      r0,[r5,#0x68]  ; FTMenu
;;;153    		for(i = 0;i < 6;i++){
000286  2000              MOVS     r0,#0
                  |L12.648|
;;;154    			FTMenu.subMenu[i] = NULL;
000288  6ea9              LDR      r1,[r5,#0x68]  ; FTMenu
00028a  f8418020          STR      r8,[r1,r0,LSL #2]
00028e  1c40              ADDS     r0,r0,#1              ;153
000290  b2c0              UXTB     r0,r0                 ;153
000292  2806              CMP      r0,#6                 ;153
000294  d3f8              BCC      |L12.648|
;;;155    		}
;;;156    		FTMenu.preMenu = &fireChooseMenu;
000296  f8c5a06c          STR      r10,[r5,#0x6c]  ; FTMenu
;;;157    		FTMenu.func = (void (**)(void))malloc(sizeof(NULL) * FTMenu.subMenuNumber);
00029a  78a8              LDRB     r0,[r5,#2]  ; FTMenu
00029c  0080              LSLS     r0,r0,#2
00029e  f7fffffe          BL       malloc
0002a2  6768              STR      r0,[r5,#0x74]  ; FTMenu
;;;158    		for(i = 0;i<6;i++){
0002a4  2000              MOVS     r0,#0
0002a6  4629              MOV      r1,r5                 ;111
                  |L12.680|
;;;159    			FTMenu.func[i] = fireChoose;
0002a8  4625              MOV      r5,r4
0002aa  6f4b              LDR      r3,[r1,#0x74]  ; FTMenu
0002ac  f8434020          STR      r4,[r3,r0,LSL #2]
0002b0  1c40              ADDS     r0,r0,#1              ;158
0002b2  b2c0              UXTB     r0,r0                 ;158
0002b4  2806              CMP      r0,#6                 ;158
0002b6  d3f7              BCC      |L12.680|
;;;160    		}
;;;161    	}
;;;162    	/***************************R菜单*********************************************/
;;;163    	{
;;;164    		RMenu.showFrom = 0;
0002b8  4c85              LDR      r4,|L12.1232|
0002ba  34f0              ADDS     r4,r4,#0xf0
0002bc  f8848000          STRB     r8,[r4,#0]
;;;165    		RMenu.showTo = 3;
0002c0  2003              MOVS     r0,#3
0002c2  7060              STRB     r0,[r4,#1]
;;;166    		RMenu.subMenuNumber = 4;
0002c4  f04f0b04          MOV      r11,#4
0002c8  f884b002          STRB     r11,[r4,#2]
;;;167    		RMenu.currentOption = 0;
0002cc  f8848003          STRB     r8,[r4,#3]
;;;168    		RMenu.menuOption[0] = "ROOM1";
0002d0  a096              ADR      r0,|L12.1324|
0002d2  6060              STR      r0,[r4,#4]  ; RMenu
;;;169    		RMenu.menuOption[1] = "ROOM2";
0002d4  a097              ADR      r0,|L12.1332|
0002d6  60a0              STR      r0,[r4,#8]  ; RMenu
;;;170    		RMenu.menuOption[2] = "ROOM3";
0002d8  a098              ADR      r0,|L12.1340|
0002da  60e0              STR      r0,[r4,#0xc]  ; RMenu
;;;171    		RMenu.menuOption[3] = "ROOM4";
0002dc  a099              ADR      r0,|L12.1348|
0002de  6120              STR      r0,[r4,#0x10]  ; RMenu
;;;172    		RMenu.subMenu = malloc(sizeof(menuStruct_t *) * RMenu.subMenuNumber);
0002e0  2010              MOVS     r0,#0x10
0002e2  f7fffffe          BL       malloc
0002e6  66a0              STR      r0,[r4,#0x68]  ; RMenu
;;;173    		for(i = 0;i < 4;i++){
0002e8  2000              MOVS     r0,#0
                  |L12.746|
;;;174    			RMenu.subMenu[i] = NULL;
0002ea  6ea1              LDR      r1,[r4,#0x68]  ; RMenu
0002ec  f8418020          STR      r8,[r1,r0,LSL #2]
0002f0  1c40              ADDS     r0,r0,#1              ;173
0002f2  b2c0              UXTB     r0,r0                 ;173
0002f4  2804              CMP      r0,#4                 ;173
0002f6  d3f8              BCC      |L12.746|
;;;175    		}
;;;176    		RMenu.preMenu = &fireChooseMenu;
0002f8  f8c4a06c          STR      r10,[r4,#0x6c]  ; RMenu
;;;177    		RMenu.func = (void (**)(void))malloc(sizeof(NULL) * RMenu.subMenuNumber);
0002fc  78a0              LDRB     r0,[r4,#2]  ; RMenu
0002fe  0080              LSLS     r0,r0,#2
000300  f7fffffe          BL       malloc
000304  6760              STR      r0,[r4,#0x74]  ; RMenu
;;;178    		for(i = 0;i<4;i++){
000306  2000              MOVS     r0,#0
                  |L12.776|
;;;179    			RMenu.func[i] = fireChoose;
000308  6f61              LDR      r1,[r4,#0x74]  ; RMenu
00030a  f8415020          STR      r5,[r1,r0,LSL #2]
00030e  1c40              ADDS     r0,r0,#1              ;178
000310  b2c0              UXTB     r0,r0                 ;178
000312  2804              CMP      r0,#4                 ;178
000314  d3f8              BCC      |L12.776|
;;;180    		}
;;;181    	}
;;;182    	/***************************testWalk菜单*********************************************/
;;;183    	{
;;;184    		testWalkMenu.showFrom = 0;
000316  f8878000          STRB     r8,[r7,#0]
;;;185    		testWalkMenu.showTo = 3;
00031a  2003              MOVS     r0,#3
00031c  7078              STRB     r0,[r7,#1]
;;;186    		testWalkMenu.subMenuNumber = 4;
00031e  f887b002          STRB     r11,[r7,#2]
;;;187    		testWalkMenu.currentOption = 0;
000322  f8878003          STRB     r8,[r7,#3]
;;;188    		testWalkMenu.menuOption[0] = "Walk_Test";
000326  a089              ADR      r0,|L12.1356|
000328  6078              STR      r0,[r7,#4]  ; testWalkMenu
;;;189    		testWalkMenu.menuOption[1] = "Left_Wheel";
00032a  a08b              ADR      r0,|L12.1368|
00032c  60b8              STR      r0,[r7,#8]  ; testWalkMenu
;;;190    		testWalkMenu.menuOption[2] = "Right_Wheel";
00032e  a08d              ADR      r0,|L12.1380|
000330  60f8              STR      r0,[r7,#0xc]  ; testWalkMenu
;;;191    		testWalkMenu.menuOption[3] = "Turn_Time";
000332  a08f              ADR      r0,|L12.1392|
000334  6138              STR      r0,[r7,#0x10]  ; testWalkMenu
;;;192    		testWalkMenu.subMenu = malloc(sizeof(menuStruct_t *) * testWalkMenu.subMenuNumber);
000336  2010              MOVS     r0,#0x10
000338  f7fffffe          BL       malloc
00033c  66b8              STR      r0,[r7,#0x68]  ; testWalkMenu
;;;193    		for(i = 0;i<4;i++){
00033e  2000              MOVS     r0,#0
                  |L12.832|
;;;194    			testWalkMenu.subMenu[i] = NULL;
000340  6eb9              LDR      r1,[r7,#0x68]  ; testWalkMenu
000342  f8418020          STR      r8,[r1,r0,LSL #2]
000346  1c40              ADDS     r0,r0,#1              ;193
000348  b2c0              UXTB     r0,r0                 ;193
00034a  2804              CMP      r0,#4                 ;193
00034c  d3f8              BCC      |L12.832|
;;;195    		}
;;;196    		testWalkMenu.preMenu = &testModeMenu;
00034e  66fe              STR      r6,[r7,#0x6c]  ; testWalkMenu
;;;197    		testWalkMenu.func = (void (**)(void))malloc(sizeof(NULL) * testWalkMenu.subMenuNumber);
000350  78b8              LDRB     r0,[r7,#2]  ; testWalkMenu
000352  0080              LSLS     r0,r0,#2
000354  f7fffffe          BL       malloc
000358  6778              STR      r0,[r7,#0x74]  ; testWalkMenu
;;;198    		for(i = 0;i<4;i++){
00035a  2000              MOVS     r0,#0
;;;199    			testWalkMenu.func[i] = testWalkFuction;
00035c  4987              LDR      r1,|L12.1404|
                  |L12.862|
00035e  6f7a              LDR      r2,[r7,#0x74]  ; testWalkMenu
000360  f8421020          STR      r1,[r2,r0,LSL #2]
000364  1c40              ADDS     r0,r0,#1              ;198
000366  b2c0              UXTB     r0,r0                 ;198
000368  2804              CMP      r0,#4                 ;198
00036a  d3f8              BCC      |L12.862|
;;;200    		}
;;;201    	}
;;;202    
;;;203    
;;;204    	/***************************开始菜单配置********************************************/
;;;205    	{
;;;206    		currentMenu = &mainMenu;
00036c  4d84              LDR      r5,|L12.1408|
00036e  f8c5900c          STR      r9,[r5,#0xc]  ; currentMenu
;;;207    		OLED_ShowChar(120,(currentMenu -> currentOption - currentMenu -> showFrom) * 2,'*',16);
000372  f8990003          LDRB     r0,[r9,#3]
000376  f8991000          LDRB     r1,[r9,#0]
00037a  2310              MOVS     r3,#0x10
00037c  1a40              SUBS     r0,r0,r1
00037e  0640              LSLS     r0,r0,#25
000380  0e01              LSRS     r1,r0,#24
000382  222a              MOVS     r2,#0x2a
000384  2078              MOVS     r0,#0x78
000386  f7fffffe          BL       OLED_ShowChar
;;;208    		for(i=0;i<4;++i)
00038a  2400              MOVS     r4,#0
                  |L12.908|
;;;209    		{
;;;210    			OLED_ShowString(0,i * 2,currentMenu -> menuOption[i + currentMenu -> showFrom],16);
00038c  68e8              LDR      r0,[r5,#0xc]  ; currentMenu
00038e  2310              MOVS     r3,#0x10
000390  7801              LDRB     r1,[r0,#0]
000392  4421              ADD      r1,r1,r4
000394  eb000081          ADD      r0,r0,r1,LSL #2
000398  6842              LDR      r2,[r0,#4]
00039a  0660              LSLS     r0,r4,#25
00039c  0e01              LSRS     r1,r0,#24
00039e  2000              MOVS     r0,#0
0003a0  f7fffffe          BL       OLED_ShowString
;;;211    			if( i == currentMenu -> subMenuNumber - 1 )			//如果菜单选项不足四个则跳出循环~
0003a4  68e8              LDR      r0,[r5,#0xc]  ; currentMenu
0003a6  7880              LDRB     r0,[r0,#2]
0003a8  1e40              SUBS     r0,r0,#1
0003aa  42a0              CMP      r0,r4
0003ac  d003              BEQ      |L12.950|
0003ae  1c64              ADDS     r4,r4,#1              ;208
0003b0  b2e4              UXTB     r4,r4                 ;208
0003b2  2c04              CMP      r4,#4                 ;208
0003b4  d3ea              BCC      |L12.908|
                  |L12.950|
;;;212    				break;
;;;213    		}
;;;214    		currentMenu -> displayFlag = UPDATEMENU_FLAG;
0003b6  68e9              LDR      r1,[r5,#0xc]  ; currentMenu
0003b8  2001              MOVS     r0,#1
0003ba  f8810070          STRB     r0,[r1,#0x70]
;;;215    	}
;;;216    }
0003be  e8bd9ff0          POP      {r4-r12,pc}
;;;217    /*
                          ENDP

0003c2  0000              DCW      0x0000
                  |L12.964|
                          DCD      ||.bss||
                  |L12.968|
0003c8  54657374          DCB      "TestMode",0
0003cc  4d6f6465
0003d0  00      
0003d1  00                DCB      0
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L12.980|
0003d4  576f726b          DCB      "WorkChoose",0
0003d8  43686f6f
0003dc  736500  
0003df  00                DCB      0
                  |L12.992|
0003e0  54595045          DCB      "TYPE_CHOOSE",0
0003e4  5f43484f
0003e8  4f534500
                  |L12.1004|
0003ec  48432d53          DCB      "HC-SR04",0
0003f0  52303400
                  |L12.1012|
0003f4  414400            DCB      "AD",0
0003f7  00                DCB      0
                  |L12.1016|
0003f8  46414e00          DCB      "FAN",0
                  |L12.1020|
0003fc  5a65726f          DCB      "Zero_Set",0
000400  5f536574
000404  00      
000405  00                DCB      0
000406  00                DCB      0
000407  00                DCB      0
                  |L12.1032|
000408  46544c5f          DCB      "FTL_90",0
00040c  393000  
00040f  00                DCB      0
                  |L12.1040|
000410  46544c5f          DCB      "FTL_180",0
000414  31383000
                  |L12.1048|
000418  4654525f          DCB      "FTR_90",0
00041c  393000  
00041f  00                DCB      0
                  |L12.1056|
000420  4654525f          DCB      "FTR_180",0
000424  31383000
                  |L12.1064|
000428  46544c5f          DCB      "FTL_135",0
00042c  31333500
                  |L12.1072|
000430  46544c5f          DCB      "FTL_45",0
000434  343500  
000437  00                DCB      0
                  |L12.1080|
000438  4654525f          DCB      "FTR_135",0
00043c  31333500
                  |L12.1088|
000440  4654525f          DCB      "FTR_45",0
000444  343500  
000447  00                DCB      0
                  |L12.1096|
000448  42544c5f          DCB      "BTL_45",0
00044c  343500  
00044f  00                DCB      0
                  |L12.1104|
000450  4254525f          DCB      "BTR_45",0
000454  343500  
000457  00                DCB      0
                  |L12.1112|
000458  52544c5f          DCB      "RTL_45",0
00045c  343500  
00045f  00                DCB      0
                  |L12.1120|
000460  5254525f          DCB      "RTR_45",0
000464  343500  
000467  00                DCB      0
                  |L12.1128|
000468  52544c5f          DCB      "RTL_90",0
00046c  393000  
00046f  00                DCB      0
                  |L12.1136|
000470  5254525f          DCB      "RTR_90",0
000474  393000  
000477  00                DCB      0
                  |L12.1144|
000478  52544c5f          DCB      "RTL_135",0
00047c  31333500
                  |L12.1152|
000480  5254525f          DCB      "RTR_135",0
000484  31333500
                  |L12.1160|
000488  52544c5f          DCB      "RTL_180",0
00048c  31383000
                  |L12.1168|
000490  5254525f          DCB      "RTR_180",0
000494  31383000
                  |L12.1176|
000498  475300            DCB      "GS",0
00049b  00                DCB      0
                  |L12.1180|
                          DCD      testSr04Function
                  |L12.1184|
                          DCD      adFunction
                  |L12.1188|
                          DCD      fanTest
                  |L12.1192|
0004a8  576f726b          DCB      "WorkMode",0
0004ac  4d6f6465
0004b0  00      
0004b1  00                DCB      0
0004b2  00                DCB      0
0004b3  00                DCB      0
                  |L12.1204|
                          DCD      workChoose
                  |L12.1208|
0004b8  46495245          DCB      "FIRE-01",0
0004bc  2d303100
                  |L12.1216|
0004c0  46495245          DCB      "FIRE-02",0
0004c4  2d303200
                  |L12.1224|
0004c8  52455343          DCB      "RESCUE",0
0004cc  554500  
0004cf  00                DCB      0
                  |L12.1232|
                          DCD      ||.bss||+0x258
                  |L12.1236|
0004d4  66697265          DCB      "fire1",0
0004d8  3100    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L12.1244|
0004dc  66697265          DCB      "fire2",0
0004e0  3200    
0004e2  00                DCB      0
0004e3  00                DCB      0
                  |L12.1252|
0004e4  66697265          DCB      "fire3",0
0004e8  3300    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L12.1260|
0004ec  66697265          DCB      "fire9",0
0004f0  3900    
0004f2  00                DCB      0
0004f3  00                DCB      0
                  |L12.1268|
0004f4  434c4541          DCB      "CLEAR_ALL",0
0004f8  525f414c
0004fc  4c00    
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L12.1280|
                          DCD      fireChoose
                  |L12.1284|
000504  66697265          DCB      "fire4",0
000508  3400    
00050a  00                DCB      0
00050b  00                DCB      0
                  |L12.1292|
00050c  66697265          DCB      "fire5",0
000510  3500    
000512  00                DCB      0
000513  00                DCB      0
                  |L12.1300|
000514  66697265          DCB      "fire6",0
000518  3600    
00051a  00                DCB      0
00051b  00                DCB      0
                  |L12.1308|
00051c  66697265          DCB      "fire7",0
000520  3700    
000522  00                DCB      0
000523  00                DCB      0
                  |L12.1316|
000524  66697265          DCB      "fire8",0
000528  3800    
00052a  00                DCB      0
00052b  00                DCB      0
                  |L12.1324|
00052c  524f4f4d          DCB      "ROOM1",0
000530  3100    
000532  00                DCB      0
000533  00                DCB      0
                  |L12.1332|
000534  524f4f4d          DCB      "ROOM2",0
000538  3200    
00053a  00                DCB      0
00053b  00                DCB      0
                  |L12.1340|
00053c  524f4f4d          DCB      "ROOM3",0
000540  3300    
000542  00                DCB      0
000543  00                DCB      0
                  |L12.1348|
000544  524f4f4d          DCB      "ROOM4",0
000548  3400    
00054a  00                DCB      0
00054b  00                DCB      0
                  |L12.1356|
00054c  57616c6b          DCB      "Walk_Test",0
000550  5f546573
000554  7400    
000556  00                DCB      0
000557  00                DCB      0
                  |L12.1368|
000558  4c656674          DCB      "Left_Wheel",0
00055c  5f576865
000560  656c00  
000563  00                DCB      0
                  |L12.1380|
000564  52696768          DCB      "Right_Wheel",0
000568  745f5768
00056c  65656c00
                  |L12.1392|
000570  5475726e          DCB      "Turn_Time",0
000574  5f54696d
000578  6500    
00057a  00                DCB      0
00057b  00                DCB      0
                  |L12.1404|
                          DCD      testWalkFuction
                  |L12.1408|
                          DCD      ||.data||

                          AREA ||i.menuReset||, CODE, READONLY, ALIGN=1

                  menuReset PROC
;;;226    */
;;;227    static void menuReset(menuStruct_t* menu)
000000  6ec1              LDR      r1,[r0,#0x6c]
;;;228    {
;;;229    	if(menu -> preMenu != NULL)
000002  2900              CMP      r1,#0
000004  d004              BEQ      |L13.16|
;;;230    	{
;;;231    		menu -> showFrom = 0;
000006  2100              MOVS     r1,#0
000008  7001              STRB     r1,[r0,#0]
;;;232    		menu -> showTo = 3;
00000a  2203              MOVS     r2,#3
00000c  7042              STRB     r2,[r0,#1]
;;;233    		menu -> currentOption = 0;
00000e  70c1              STRB     r1,[r0,#3]
                  |L13.16|
;;;234    	}	
;;;235    }
000010  4770              BX       lr
;;;236    
                          ENDP


                          AREA ||i.menuUpdate||, CODE, READONLY, ALIGN=2

                  menuUpdate PROC
;;;1259   */
;;;1260   void menuUpdate()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1261   {
;;;1262   	u8 i = 0;	
000004  2400              MOVS     r4,#0
;;;1263     /*获取键码*/	
;;;1264   	oled.keyValue = key.realValue;
000006  485a              LDR      r0,|L14.368|
000008  4d5a              LDR      r5,|L14.372|
00000a  7ac0              LDRB     r0,[r0,#0xb]  ; key
00000c  7068              STRB     r0,[r5,#1]
;;;1265   	switch(oled.keyValue)
00000e  2806              CMP      r0,#6
000010  d215              BCS      |L14.62|
000012  e8dff000          TBB      [pc,r0]
000016  0306              DCB      0x03,0x06
000018  090c0f12          DCB      0x09,0x0c,0x0f,0x12
;;;1266   	{
;;;1267   		case OLED_NULL:   nullHandle(); break;
00001c  f7fffffe          BL       nullHandle
000020  e00d              B        |L14.62|
;;;1268   		case OLED_ENTER:	enterHandle();break;
000022  f7fffffe          BL       enterHandle
000026  e00a              B        |L14.62|
;;;1269   		case OLED_UP:		  upHandle();		break;
000028  f7fffffe          BL       upHandle
00002c  e007              B        |L14.62|
;;;1270   		case OLED_DOWN:  	downHandle();	break;
00002e  f7fffffe          BL       downHandle
000032  e004              B        |L14.62|
;;;1271   		case OLED_BACK:  	backHandle();	break;
000034  f7fffffe          BL       backHandle
000038  e001              B        |L14.62|
;;;1272   		case OLED_SAVE:	  saveHandle();	break;
00003a  f7fffffe          BL       saveHandle
                  |L14.62|
;;;1273   		default:									break;
;;;1274   	}
;;;1275   	/*oled运行模式*/
;;;1276   	switch(currentMenu -> displayFlag){
00003e  4f4d              LDR      r7,|L14.372|
;;;1277   		/*刷新菜单模式*/
;;;1278   		case UPDATEMENU_FLAG:{
;;;1279   			OLED_Clear();
;;;1280   			OLED_ShowChar(120,(currentMenu -> currentOption - currentMenu -> showFrom) * 2,'*',16);
;;;1281   			for(i=0;i<4;++i)
;;;1282   			{
;;;1283   				OLED_ShowString(2,i * 2,currentMenu -> menuOption[i + currentMenu -> showFrom],16);
;;;1284   				if( i == currentMenu -> subMenuNumber - 1 )			//如果菜单选项不足四个则跳出循环~
;;;1285   					break;
;;;1286   			}
;;;1287   			currentMenu -> displayFlag = NO_FLAG;							//清除刷新显示标志位~
;;;1288   			break;
;;;1289   		}
;;;1290   		/*WORK模式*/
;;;1291   		case WORK_FLAG:{
;;;1292   			OLED_Clear();
;;;1293   			//OLED_ShowNum(48,7,outfireRobotState.allTarget,6,12);
;;;1294   //			OLED_ShowString(48,5,"Next",12);
;;;1295   //			OLED_ShowString(0,5,"Now",12);
;;;1296   //			OLED_ShowString(94,5,"Step",12);
;;;1297   //			OLED_ShowNum(94,7,outfireRobotState.workStep,2,12);
;;;1298   
;;;1299   			break;
;;;1300   		}
;;;1301   		/*自动刷新模式*/
;;;1302   		case FUNCTION_AUTO_FLAG:{
;;;1303   			OLED_Clear();
;;;1304   			currentMenu -> func[currentMenu -> currentOption]();
;;;1305   			if(oled.keyValue == OLED_BACK){
;;;1306   				currentMenu -> displayFlag = UPDATEMENU_FLAG;
;;;1307   			}
;;;1308   			break;
;;;1309   		}
;;;1310   	  /*保存模式*/
;;;1311   		case FLASH_SAVE_FLAG:{
;;;1312   			if(GUI.updateTime>0&&GUI.updateTime<2)				//只刷新一次~
000040  f8df8134          LDR      r8,|L14.376|
000044  3f10              SUBS     r7,r7,#0x10           ;1276
000046  2600              MOVS     r6,#0
000048  68f8              LDR      r0,[r7,#0xc]          ;1276  ; currentMenu
00004a  f04f0901          MOV      r9,#1                 ;1264
00004e  f8901070          LDRB     r1,[r0,#0x70]         ;1276
000052  2907              CMP      r1,#7                 ;1276
000054  d22a              BCS      |L14.172|
000056  e8dff001          TBB      [pc,r1]               ;1276
00005a  8304              DCB      0x83,0x04
00005c  832d2a3c          DCB      0x83,0x2d,0x2a,0x3c
000060  7b00              DCB      0x7b,0x00
000062  f7fffffe          BL       OLED_Clear
000066  68f8              LDR      r0,[r7,#0xc]          ;1280  ; currentMenu
000068  2310              MOVS     r3,#0x10              ;1280
00006a  222a              MOVS     r2,#0x2a              ;1280
00006c  78c1              LDRB     r1,[r0,#3]            ;1280
00006e  7800              LDRB     r0,[r0,#0]            ;1280
000070  1a08              SUBS     r0,r1,r0              ;1280
000072  0640              LSLS     r0,r0,#25             ;1280
000074  0e01              LSRS     r1,r0,#24             ;1280
000076  2078              MOVS     r0,#0x78              ;1280
000078  f7fffffe          BL       OLED_ShowChar
                  |L14.124|
00007c  68f8              LDR      r0,[r7,#0xc]          ;1283  ; currentMenu
00007e  2310              MOVS     r3,#0x10              ;1283
000080  7801              LDRB     r1,[r0,#0]            ;1283
000082  4421              ADD      r1,r1,r4              ;1283
000084  eb000081          ADD      r0,r0,r1,LSL #2       ;1283
000088  6842              LDR      r2,[r0,#4]            ;1283
00008a  0660              LSLS     r0,r4,#25             ;1283
00008c  0e01              LSRS     r1,r0,#24             ;1283
00008e  2002              MOVS     r0,#2                 ;1283
000090  f7fffffe          BL       OLED_ShowString
000094  68f8              LDR      r0,[r7,#0xc]          ;1284  ; currentMenu
000096  7880              LDRB     r0,[r0,#2]            ;1284
000098  1e40              SUBS     r0,r0,#1              ;1284
00009a  42a0              CMP      r0,r4                 ;1284
00009c  d003              BEQ      |L14.166|
00009e  1c64              ADDS     r4,r4,#1              ;1281
0000a0  b2e4              UXTB     r4,r4                 ;1281
0000a2  2c04              CMP      r4,#4                 ;1281
0000a4  d3ea              BCC      |L14.124|
                  |L14.166|
0000a6  68f8              LDR      r0,[r7,#0xc]          ;1287  ; currentMenu
0000a8  f8806070          STRB     r6,[r0,#0x70]         ;1287
                  |L14.172|
0000ac  e058              B        |L14.352|
0000ae  f7fffffe          BL       OLED_Clear
0000b2  e055              B        |L14.352|
0000b4  f7fffffe          BL       OLED_Clear
0000b8  68f8              LDR      r0,[r7,#0xc]          ;1304  ; currentMenu
0000ba  6f41              LDR      r1,[r0,#0x74]         ;1304
0000bc  78c0              LDRB     r0,[r0,#3]            ;1304
0000be  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1304
0000c2  4780              BLX      r0                    ;1304
0000c4  7868              LDRB     r0,[r5,#1]            ;1305  ; oled
0000c6  2804              CMP      r0,#4                 ;1305
0000c8  d14a              BNE      |L14.352|
0000ca  68f8              LDR      r0,[r7,#0xc]          ;1306  ; currentMenu
0000cc  f8809070          STRB     r9,[r0,#0x70]         ;1306
0000d0  e046              B        |L14.352|
0000d2  f8b80006          LDRH     r0,[r8,#6]  ; GUI
0000d6  2801              CMP      r0,#1
0000d8  d002              BEQ      |L14.224|
;;;1313   			{
;;;1314   				OLED_Clear();
;;;1315   				OLED_ShowString(20,2,"Save",16);
;;;1316   				OLED_ShowString(36,4,"Being",16);					
;;;1317   				GUI.updateTime++;
;;;1318   			}
;;;1319   			else{ 
;;;1320   				if(GUI.updateTime >= 2&& GUI.updateTime < 3){
0000da  2802              CMP      r0,#2
0000dc  d014              BEQ      |L14.264|
0000de  e015              B        |L14.268|
                  |L14.224|
0000e0  f7fffffe          BL       OLED_Clear
0000e4  2310              MOVS     r3,#0x10              ;1315
0000e6  a225              ADR      r2,|L14.380|
0000e8  2102              MOVS     r1,#2                 ;1315
0000ea  2014              MOVS     r0,#0x14              ;1315
0000ec  f7fffffe          BL       OLED_ShowString
0000f0  2310              MOVS     r3,#0x10              ;1316
0000f2  a224              ADR      r2,|L14.388|
0000f4  2104              MOVS     r1,#4                 ;1316
0000f6  2024              MOVS     r0,#0x24              ;1316
0000f8  f7fffffe          BL       OLED_ShowString
0000fc  f8b80006          LDRH     r0,[r8,#6]            ;1317  ; GUI
000100  1c40              ADDS     r0,r0,#1              ;1317
000102  f8a80006          STRH     r0,[r8,#6]            ;1317
000106  e02b              B        |L14.352|
                  |L14.264|
;;;1321   					driver_InitOLED();
000108  f7fffffe          BL       driver_InitOLED
                  |L14.268|
;;;1322   				}
;;;1323   				if( GUI.updateTime >= 3&& GUI.updateTime < 10)
00010c  f8b80006          LDRH     r0,[r8,#6]  ; GUI
000110  1ec1              SUBS     r1,r0,#3
000112  2907              CMP      r1,#7
000114  d20e              BCS      |L14.308|
;;;1324   			  {
;;;1325   					OLED_Clear();
000116  f7fffffe          BL       OLED_Clear
;;;1326   					OLED_ShowString(20,2,"Save",16);
00011a  2310              MOVS     r3,#0x10
00011c  a217              ADR      r2,|L14.380|
00011e  2102              MOVS     r1,#2
000120  2014              MOVS     r0,#0x14
000122  f7fffffe          BL       OLED_ShowString
;;;1327   					OLED_ShowString(36,4,"Success",16);
000126  2310              MOVS     r3,#0x10
000128  a218              ADR      r2,|L14.396|
00012a  2104              MOVS     r1,#4
00012c  2024              MOVS     r0,#0x24
00012e  f7fffffe          BL       OLED_ShowString
000132  e007              B        |L14.324|
                  |L14.308|
;;;1328   			  }	
;;;1329           else if( GUI.updateTime >= 10 && oled.keyValue == 0 ){
000134  280a              CMP      r0,#0xa
000136  d305              BCC      |L14.324|
000138  7868              LDRB     r0,[r5,#1]  ; oled
00013a  b918              CBNZ     r0,|L14.324|
;;;1330   					GUI.updateTime = NULL;
00013c  f8a86006          STRH     r6,[r8,#6]
;;;1331   					resetGUIState();
000140  f7fffffe          BL       resetGUIState
                  |L14.324|
;;;1332   				}
;;;1333   				GUI.updateTime++;			
000144  f8b80006          LDRH     r0,[r8,#6]  ; GUI
000148  1c40              ADDS     r0,r0,#1
00014a  f8a80006          STRH     r0,[r8,#6]
00014e  e007              B        |L14.352|
;;;1334   			}
;;;1335   			break;
;;;1336   		}
;;;1337   		case TEST_FLAG:{
;;;1338   			if(oled.keyValue == OLED_BACK){
000150  7869              LDRB     r1,[r5,#1]  ; oled
000152  2904              CMP      r1,#4
000154  d007              BEQ      |L14.358|
;;;1339   //				app_WorkCommandReset();
;;;1340   				GUI.testFlag = 0;
;;;1341   				currentMenu -> displayFlag = UPDATEMENU_FLAG;
;;;1342   			}
;;;1343   			else{
;;;1344   				currentMenu -> func[currentMenu -> currentOption]();
000156  6f41              LDR      r1,[r0,#0x74]
000158  78c0              LDRB     r0,[r0,#3]
00015a  f8510020          LDR      r0,[r1,r0,LSL #2]
00015e  4780              BLX      r0
                  |L14.352|
;;;1345   			}
;;;1346   		}
;;;1347   		default:break;
;;;1348   	}
;;;1349   	/*键码清零*/	
;;;1350   	oled.keyValue = OLED_NULL;
000160  706e              STRB     r6,[r5,#1]
000162  e8bd87f0          POP      {r4-r10,pc}           ;1288
                  |L14.358|
000166  f8886000          STRB     r6,[r8,#0]            ;1340
00016a  f8809070          STRB     r9,[r0,#0x70]         ;1341
00016e  e7f7              B        |L14.352|
;;;1351   }
;;;1352   
                          ENDP

                  |L14.368|
                          DCD      key
                  |L14.372|
                          DCD      ||.data||+0x10
                  |L14.376|
                          DCD      GUI
                  |L14.380|
00017c  53617665          DCB      "Save",0
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0
                  |L14.388|
000184  4265696e          DCB      "Being",0
000188  6700    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L14.396|
00018c  53756363          DCB      "Success",0
000190  65737300

                          AREA ||i.nullHandle||, CODE, READONLY, ALIGN=2

                  nullHandle PROC
;;;266    */
;;;267    static void nullHandle()
000000  4904              LDR      r1,|L15.20|
;;;268    {
;;;269    	/*只有无按键输入时间大于200ms后，清零所有按键长按时间*/
;;;270    	if(GUI.waitKeyTime[OLED_NULL] < 2){
000002  68c8              LDR      r0,[r1,#0xc]  ; GUI
000004  2802              CMP      r0,#2
000006  d202              BCS      |L15.14|
;;;271    		GUI.waitKeyTime[OLED_NULL]++;
000008  1c40              ADDS     r0,r0,#1
00000a  60c8              STR      r0,[r1,#0xc]  ; GUI
;;;272    	}
;;;273    	else{
;;;274    		OLEDKeyNoReset(OLED_ALL_NEED);
;;;275    	}
;;;276    }
00000c  4770              BX       lr
                  |L15.14|
00000e  2007              MOVS     r0,#7                 ;274
000010  f7ffbffe          B.W      OLEDKeyNoReset
;;;277    /*
                          ENDP

                  |L15.20|
                          DCD      GUI

                          AREA ||i.parameterCalibration||, CODE, READONLY, ALIGN=2

                  parameterCalibration PROC
;;;521    */
;;;522    void parameterCalibration(uint32_t *parameter,uint32_t limitMin,uint32_t limitMax)
000000  b5f8              PUSH     {r3-r7,lr}
;;;523    {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;524    	static uint8_t incrementMin = 0,incrementMiddle = 0,incrementMax = 0;
;;;525    	static float realParameter = 0;
;;;526      /************增减量随参数范围变化********************************************/
;;;527    	if(limitMax - limitMin <= 250){
000008  1b72              SUBS     r2,r6,r5
;;;528    		incrementMin = 1;incrementMiddle = 2;incrementMax = 10;
00000a  210a              MOVS     r1,#0xa
00000c  2001              MOVS     r0,#1
00000e  4c59              LDR      r4,|L16.372|
000010  2afa              CMP      r2,#0xfa              ;527
000012  d804              BHI      |L16.30|
000014  7020              STRB     r0,[r4,#0]
000016  2202              MOVS     r2,#2
000018  7062              STRB     r2,[r4,#1]
00001a  70a1              STRB     r1,[r4,#2]
00001c  e003              B        |L16.38|
                  |L16.30|
;;;529    	}
;;;530    	else if(limitMax - limitMin > 250){
;;;531    		incrementMin = 1;incrementMiddle = 10;incrementMax = 100;
00001e  7020              STRB     r0,[r4,#0]
000020  7061              STRB     r1,[r4,#1]
000022  2164              MOVS     r1,#0x64
000024  70a1              STRB     r1,[r4,#2]
                  |L16.38|
;;;532    	}
;;;533    	/************函数内按键的功能********************************************/
;;;534    	switch(oled.keyValue){
000026  4953              LDR      r1,|L16.372|
;;;535    			case OLED_ENTER:{
;;;536    				/*复位成最后一次保存的数*/
;;;537    				realParameter = *parameter;
;;;538    				break;
;;;539    			}
;;;540    			case OLED_UP:{
;;;541    				/*参数自加*/
;;;542    				if(GUI.waitKeyTime[OLED_UP] <= KEY_EXPEDITE_LEVEL_1){
;;;543    					realParameter += incrementMin;
000028  f04f527e          MOV      r2,#0x3f800000
00002c  3110              ADDS     r1,r1,#0x10           ;534
00002e  784b              LDRB     r3,[r1,#1]            ;534  ; oled
000030  4951              LDR      r1,|L16.376|
000032  2b06              CMP      r3,#6                 ;534
000034  d265              BCS      |L16.258|
000036  e8dff003          TBB      [pc,r3]               ;534
00003a  6403              DCB      0x64,0x03
00003c  0830585c          DCB      0x08,0x30,0x58,0x5c
000040  6838              LDR      r0,[r7,#0]            ;537
000042  f7fffffe          BL       __aeabi_ui2f
000046  60a0              STR      r0,[r4,#8]            ;537  ; realParameter
000048  e05b              B        |L16.258|
00004a  6948              LDR      r0,[r1,#0x14]         ;542  ; GUI
00004c  2814              CMP      r0,#0x14              ;542
00004e  d805              BHI      |L16.92|
000050  4610              MOV      r0,r2
000052  68a1              LDR      r1,[r4,#8]  ; realParameter
000054  f7fffffe          BL       __aeabi_fadd
000058  60a0              STR      r0,[r4,#8]  ; realParameter
00005a  e014              B        |L16.134|
                  |L16.92|
;;;544    				}
;;;545    				else if(GUI.waitKeyTime[OLED_UP] > KEY_EXPEDITE_LEVEL_1&& GUI.waitKeyTime[OLED_UP] <= KEY_EXPEDITE_LEVEL_2){
00005c  f1a00115          SUB      r1,r0,#0x15
000060  291d              CMP      r1,#0x1d
000062  d807              BHI      |L16.116|
;;;546    					realParameter += incrementMiddle;
000064  7860              LDRB     r0,[r4,#1]  ; incrementMiddle
000066  f7fffffe          BL       __aeabi_ui2f
00006a  68a1              LDR      r1,[r4,#8]  ; realParameter
00006c  f7fffffe          BL       __aeabi_fadd
000070  60a0              STR      r0,[r4,#8]  ; realParameter
000072  e008              B        |L16.134|
                  |L16.116|
;;;547    				}
;;;548    				else if(GUI.waitKeyTime[OLED_UP] > KEY_EXPEDITE_LEVEL_2){
000074  2832              CMP      r0,#0x32
000076  d906              BLS      |L16.134|
;;;549    					realParameter += incrementMax;
000078  78a0              LDRB     r0,[r4,#2]  ; incrementMax
00007a  f7fffffe          BL       __aeabi_ui2f
00007e  68a1              LDR      r1,[r4,#8]  ; realParameter
000080  f7fffffe          BL       __aeabi_fadd
000084  60a0              STR      r0,[r4,#8]  ; realParameter
                  |L16.134|
;;;550    				}
;;;551    				/*参数限幅*/
;;;552    				if(realParameter >= limitMax){
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       __aeabi_ui2f
00008c  4607              MOV      r7,r0
00008e  68a1              LDR      r1,[r4,#8]  ; realParameter
000090  f7fffffe          BL       __aeabi_cfcmple
000094  d835              BHI      |L16.258|
;;;553    					realParameter = limitMax;
000096  60a7              STR      r7,[r4,#8]  ; realParameter
000098  e033              B        |L16.258|
;;;554    				}
;;;555    				break;
;;;556    			}
;;;557    			case OLED_DOWN:{
;;;558    					/*参数自减*/
;;;559    				if(GUI.waitKeyTime[OLED_DOWN] <= KEY_EXPEDITE_LEVEL_1){
00009a  6988              LDR      r0,[r1,#0x18]  ; GUI
00009c  2814              CMP      r0,#0x14
00009e  d805              BHI      |L16.172|
;;;560    					realParameter -= incrementMin;
0000a0  4610              MOV      r0,r2
0000a2  68a1              LDR      r1,[r4,#8]  ; realParameter
0000a4  f7fffffe          BL       __aeabi_frsub
0000a8  60a0              STR      r0,[r4,#8]  ; realParameter
0000aa  e014              B        |L16.214|
                  |L16.172|
;;;561    				}
;;;562    				else if(GUI.waitKeyTime[OLED_DOWN] > KEY_EXPEDITE_LEVEL_1&& GUI.waitKeyTime[OLED_DOWN] <= KEY_EXPEDITE_LEVEL_2){
0000ac  f1a00115          SUB      r1,r0,#0x15
0000b0  291d              CMP      r1,#0x1d
0000b2  d807              BHI      |L16.196|
;;;563    					realParameter -= incrementMiddle;
0000b4  7860              LDRB     r0,[r4,#1]  ; incrementMiddle
0000b6  f7fffffe          BL       __aeabi_ui2f
0000ba  68a1              LDR      r1,[r4,#8]  ; realParameter
0000bc  f7fffffe          BL       __aeabi_frsub
0000c0  60a0              STR      r0,[r4,#8]  ; realParameter
0000c2  e008              B        |L16.214|
                  |L16.196|
;;;564    				}
;;;565    				else if(GUI.waitKeyTime[OLED_DOWN] > KEY_EXPEDITE_LEVEL_2){
0000c4  2832              CMP      r0,#0x32
0000c6  d906              BLS      |L16.214|
;;;566    					realParameter -= incrementMax;
0000c8  78a0              LDRB     r0,[r4,#2]  ; incrementMax
0000ca  f7fffffe          BL       __aeabi_ui2f
0000ce  68a1              LDR      r1,[r4,#8]  ; realParameter
0000d0  f7fffffe          BL       __aeabi_frsub
0000d4  60a0              STR      r0,[r4,#8]  ; realParameter
                  |L16.214|
;;;567    				}	
;;;568    				if(realParameter <= limitMin){
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       __aeabi_ui2f
0000dc  4607              MOV      r7,r0
0000de  68a1              LDR      r1,[r4,#8]  ; realParameter
0000e0  f7fffffe          BL       __aeabi_cfrcmple
0000e4  d80d              BHI      |L16.258|
;;;569    					realParameter = limitMin;
0000e6  60a7              STR      r7,[r4,#8]  ; realParameter
0000e8  e00b              B        |L16.258|
;;;570    				}
;;;571    				/*参数限幅*/
;;;572    				else{
;;;573    					
;;;574    				} 
;;;575    				break;
;;;576    			}
;;;577    			case OLED_BACK:{
;;;578    				/*恢复到菜单界面*/
;;;579    				currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
0000ea  68e1              LDR      r1,[r4,#0xc]  ; currentMenu
0000ec  f8810070          STRB     r0,[r1,#0x70]
;;;580    				break;
0000f0  e007              B        |L16.258|
;;;581    			} 
;;;582    			case OLED_SAVE:{
;;;583    				*parameter = realParameter;
0000f2  68a0              LDR      r0,[r4,#8]  ; realParameter
0000f4  f7fffffe          BL       __aeabi_f2uiz
0000f8  6038              STR      r0,[r7,#0]
;;;584    				app_FlashWriteUdata();
0000fa  f7fffffe          BL       app_FlashWriteUdata
;;;585    				saveGUIFinish();
0000fe  f7fffffe          BL       saveGUIFinish
                  |L16.258|
;;;586    				break;
;;;587    			}
;;;588    			default:{
;;;589    				break;
;;;590    			}
;;;591    		}
;;;592    	OLED_Clear();
000102  f7fffffe          BL       OLED_Clear
;;;593    	
;;;594    	OLED_ShowNum(0,0,limitMin,4,16);
000106  2710              MOVS     r7,#0x10
000108  2100              MOVS     r1,#0
00010a  2304              MOVS     r3,#4
00010c  462a              MOV      r2,r5
00010e  4608              MOV      r0,r1
000110  9700              STR      r7,[sp,#0]
000112  f7fffffe          BL       OLED_ShowNum
;;;595    	OLED_ShowString(42,0,"to",16);
000116  2310              MOVS     r3,#0x10
000118  a218              ADR      r2,|L16.380|
00011a  2100              MOVS     r1,#0
00011c  202a              MOVS     r0,#0x2a
00011e  f7fffffe          BL       OLED_ShowString
;;;596    	OLED_ShowNum(80,0,limitMax,5,16);
000122  2305              MOVS     r3,#5
000124  4632              MOV      r2,r6
000126  2100              MOVS     r1,#0
000128  2050              MOVS     r0,#0x50
00012a  9700              STR      r7,[sp,#0]
00012c  f7fffffe          BL       OLED_ShowNum
;;;597    	OLED_ShowString(0,2,currentMenu ->preMenu->menuOption[currentMenu ->preMenu->currentOption],16);
000130  68e0              LDR      r0,[r4,#0xc]  ; currentMenu
000132  2204              MOVS     r2,#4
000134  2310              MOVS     r3,#0x10
000136  6ec0              LDR      r0,[r0,#0x6c]
000138  78c1              LDRB     r1,[r0,#3]
00013a  eb020181          ADD      r1,r2,r1,LSL #2
00013e  5842              LDR      r2,[r0,r1]
000140  2102              MOVS     r1,#2
000142  2000              MOVS     r0,#0
000144  f7fffffe          BL       OLED_ShowString
;;;598    	OLED_ShowString(0,4,currentMenu ->menuOption[currentMenu ->currentOption],16);
000148  68e0              LDR      r0,[r4,#0xc]  ; currentMenu
00014a  2310              MOVS     r3,#0x10
00014c  78c1              LDRB     r1,[r0,#3]
00014e  eb000081          ADD      r0,r0,r1,LSL #2
000152  2104              MOVS     r1,#4
000154  6842              LDR      r2,[r0,#4]
000156  2000              MOVS     r0,#0
000158  f7fffffe          BL       OLED_ShowString
;;;599    	OLED_ShowNum(36,6,realParameter,5,16);
00015c  68a0              LDR      r0,[r4,#8]  ; realParameter
00015e  f7fffffe          BL       __aeabi_f2uiz
000162  4602              MOV      r2,r0
000164  2305              MOVS     r3,#5
000166  2106              MOVS     r1,#6
000168  2024              MOVS     r0,#0x24
00016a  9700              STR      r7,[sp,#0]
00016c  f7fffffe          BL       OLED_ShowNum
;;;600    }
000170  bdf8              POP      {r3-r7,pc}
;;;601    /*
                          ENDP

000172  0000              DCW      0x0000
                  |L16.372|
                          DCD      ||.data||
                  |L16.376|
                          DCD      GUI
                  |L16.380|
00017c  746f00            DCB      "to",0
00017f  00                DCB      0

                          AREA ||i.saveHandle||, CODE, READONLY, ALIGN=2

                  saveHandle PROC
;;;482    */
;;;483    static void saveHandle()
000000  b570              PUSH     {r4-r6,lr}
;;;484    {
;;;485    	/*清零除了BACK外的其他键值长按时间*/
;;;486    	OLEDKeyNoReset(OLED_SAVE);
000002  2005              MOVS     r0,#5
000004  f7fffffe          BL       OLEDKeyNoReset
;;;487    	//if((currentMenu ->displayFlag != FUNCTION_MANUAL_FLAG)||(currentMenu ->displayFlag != TEST_FLAG))
;;;488    	if((currentMenu ->displayFlag != TEST_FLAG)&&(currentMenu ->displayFlag != WORK_FLAG)){
000008  4d10              LDR      r5,|L17.76|
;;;489    			/*长按时间500ms*/
;;;490    		if(GUI.waitKeyTime[OLED_SAVE] == 5){
00000a  4c11              LDR      r4,|L17.80|
00000c  68e8              LDR      r0,[r5,#0xc]          ;488  ; currentMenu
00000e  f8901070          LDRB     r1,[r0,#0x70]         ;488
000012  2906              CMP      r1,#6                 ;488
000014  d016              BEQ      |L17.68|
000016  2904              CMP      r1,#4                 ;488
000018  d014              BEQ      |L17.68|
00001a  6a21              LDR      r1,[r4,#0x20]  ; GUI
00001c  2905              CMP      r1,#5
00001e  d002              BEQ      |L17.38|
;;;491    			/*进入保存或校准*/
;;;492    			GUI.workState = GUI_SAVE_BEING;
;;;493    			/*执行菜单函数*/
;;;494    			if( currentMenu -> func[currentMenu -> currentOption] != NULL){
;;;495    				currentMenu -> func[currentMenu -> currentOption]();
;;;496    			}
;;;497    		}
;;;498    		/*长按时间6s*/
;;;499    		else if(GUI.waitKeyTime[OLED_SAVE] == 30){
000020  291e              CMP      r1,#0x1e
000022  d009              BEQ      |L17.56|
000024  e00e              B        |L17.68|
                  |L17.38|
000026  2103              MOVS     r1,#3                 ;492
000028  80a1              STRH     r1,[r4,#4]            ;492
00002a  6f41              LDR      r1,[r0,#0x74]         ;494
00002c  78c0              LDRB     r0,[r0,#3]            ;494
00002e  f8510020          LDR      r0,[r1,r0,LSL #2]     ;494
000032  b138              CBZ      r0,|L17.68|
000034  4780              BLX      r0                    ;495
000036  e005              B        |L17.68|
                  |L17.56|
;;;500    			/*重新初始化OLED,防意外黑屏*/
;;;501    			driver_InitOLED();
000038  f7fffffe          BL       driver_InitOLED
;;;502    			currentMenu -> displayFlag = UPDATEMENU_FLAG;
00003c  68e9              LDR      r1,[r5,#0xc]  ; currentMenu
00003e  2001              MOVS     r0,#1
000040  f8810070          STRB     r0,[r1,#0x70]
                  |L17.68|
;;;503    		}
;;;504    	}
;;;505    	
;;;506    	/*长按时间自加*/
;;;507    	GUI.waitKeyTime[OLED_SAVE]++;	
000044  6a20              LDR      r0,[r4,#0x20]  ; GUI
000046  1c40              ADDS     r0,r0,#1
000048  6220              STR      r0,[r4,#0x20]  ; GUI
;;;508    }
00004a  bd70              POP      {r4-r6,pc}
;;;509    
                          ENDP

                  |L17.76|
                          DCD      ||.data||
                  |L17.80|
                          DCD      GUI

                          AREA ||i.testSetZero||, CODE, READONLY, ALIGN=2

                  testSetZero PROC
;;;906    
;;;907    void testSetZero(void)
000000  b510              PUSH     {r4,lr}
;;;908    {
;;;909    	switch(oled.keyValue){
000002  480c              LDR      r0,|L18.52|
000004  7840              LDRB     r0,[r0,#1]  ; oled
000006  2801              CMP      r0,#1
000008  d00a              BEQ      |L18.32|
00000a  2805              CMP      r0,#5
00000c  d107              BNE      |L18.30|
;;;910    				case OLED_SAVE:{
;;;911    					app_walkStop();
00000e  f7fffffe          BL       app_walkStop
;;;912    					currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
000012  4908              LDR      r1,|L18.52|
000014  2001              MOVS     r0,#1
000016  3910              SUBS     r1,r1,#0x10
000018  68c9              LDR      r1,[r1,#0xc]  ; currentMenu
00001a  f8810070          STRB     r0,[r1,#0x70]
                  |L18.30|
;;;913    					break;
;;;914    				}
;;;915    				case OLED_ENTER:{
;;;916    					app_walkStop();
;;;917    					OLED_ShowString(0,0,"GoStraightTest",16);
;;;918    					break;
;;;919    				}
;;;920    	}
;;;921    	
;;;922    }
00001e  bd10              POP      {r4,pc}
                  |L18.32|
000020  f7fffffe          BL       app_walkStop
000024  2310              MOVS     r3,#0x10              ;917
000026  2100              MOVS     r1,#0                 ;917
000028  e8bd4010          POP      {r4,lr}               ;917
00002c  a202              ADR      r2,|L18.56|
00002e  4608              MOV      r0,r1                 ;917
000030  f7ffbffe          B.W      OLED_ShowString
;;;923    
                          ENDP

                  |L18.52|
                          DCD      ||.data||+0x10
                  |L18.56|
000038  476f5374          DCB      "GoStraightTest",0
00003c  72616967
000040  68745465
000044  737400  
000047  00                DCB      0

                          AREA ||i.testSr04Data||, CODE, READONLY, ALIGN=1

                  testSr04Data PROC
;;;653    
;;;654    void testSr04Data(ultrasonicStruct_t *sr04Data,uint8_t x,uint8_t y,uint8_t Char_Size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;655    {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
000006  461e              MOV      r6,r3
;;;656    
;;;657    		OLED_ShowNum(x,y,(uint8_t)(sr04Data->getDistance),4,Char_Size);
000008  6880              LDR      r0,[r0,#8]
00000a  f7fffffe          BL       __aeabi_f2uiz
00000e  b2c2              UXTB     r2,r0
000010  2304              MOVS     r3,#4
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  9600              STR      r6,[sp,#0]
000018  f7fffffe          BL       OLED_ShowNum
;;;658    
;;;659    }
00001c  bdf8              POP      {r3-r7,pc}
;;;660    
                          ENDP


                          AREA ||i.testSr04Function||, CODE, READONLY, ALIGN=2

                  testSr04Function PROC
;;;687    
;;;688    void testSr04Function(void)
000000  b510              PUSH     {r4,lr}
;;;689    {
;;;690    	
;;;691    	switch(oled.keyValue){
000002  4821              LDR      r0,|L20.136|
;;;692    		case OLED_BACK:{
;;;693    			outfireRobotState.step = INIT;
;;;694    			rescueRobotState.step = INIT;
;;;695    			currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
000004  4c20              LDR      r4,|L20.136|
000006  7840              LDRB     r0,[r0,#1]            ;691  ; oled
000008  3c10              SUBS     r4,r4,#0x10
00000a  2801              CMP      r0,#1                 ;691
00000c  d013              BEQ      |L20.54|
00000e  2101              MOVS     r1,#1                 ;691
000010  4a1e              LDR      r2,|L20.140|
000012  4b1f              LDR      r3,|L20.144|
000014  2804              CMP      r0,#4                 ;691
000016  d002              BEQ      |L20.30|
000018  2805              CMP      r0,#5                 ;691
00001a  d10c              BNE      |L20.54|
00001c  e006              B        |L20.44|
                  |L20.30|
00001e  2000              MOVS     r0,#0                 ;693
000020  7150              STRB     r0,[r2,#5]            ;693
000022  7118              STRB     r0,[r3,#4]            ;694
000024  68e0              LDR      r0,[r4,#0xc]  ; currentMenu
000026  f8801070          STRB     r1,[r0,#0x70]
;;;696    			break;
00002a  e004              B        |L20.54|
                  |L20.44|
;;;697    		}
;;;698    		case OLED_ENTER:{
;;;699    			break;
;;;700    		}
;;;701    		case OLED_SAVE:{
;;;702    			outfireRobotState.workMode = OUT_FIRE;
00002c  7211              STRB     r1,[r2,#8]
;;;703    			outfireRobotState.step = READY;
00002e  7151              STRB     r1,[r2,#5]
;;;704    			rescueRobotState.workMode = RESCUEING;
000030  2002              MOVS     r0,#2
000032  71d8              STRB     r0,[r3,#7]
;;;705    			rescueRobotState.step = READY;
000034  7119              STRB     r1,[r3,#4]
                  |L20.54|
;;;706    		break;
;;;707    		}
;;;708    	}
;;;709    	testSr04Data(&SRF_04_Data1,20,0,16);
000036  2310              MOVS     r3,#0x10
000038  2200              MOVS     r2,#0
00003a  2114              MOVS     r1,#0x14
00003c  4815              LDR      r0,|L20.148|
00003e  f7fffffe          BL       testSr04Data
;;;710    	testSr04Data(&SRF_04_Data2,60,0,16);
000042  2310              MOVS     r3,#0x10
000044  2200              MOVS     r2,#0
000046  213c              MOVS     r1,#0x3c
000048  4813              LDR      r0,|L20.152|
00004a  f7fffffe          BL       testSr04Data
;;;711    	testSr04Data(&SRF_04_Data3,0,3,16);
00004e  2310              MOVS     r3,#0x10
000050  2203              MOVS     r2,#3
000052  2100              MOVS     r1,#0
000054  4811              LDR      r0,|L20.156|
000056  f7fffffe          BL       testSr04Data
;;;712    	testSr04Data(&SRF_04_Data4,0,6,16);
00005a  2310              MOVS     r3,#0x10
00005c  2206              MOVS     r2,#6
00005e  2100              MOVS     r1,#0
000060  480f              LDR      r0,|L20.160|
000062  f7fffffe          BL       testSr04Data
;;;713    	testSr04Data(&SRF_04_Data5,80,3,16);
000066  2310              MOVS     r3,#0x10
000068  2203              MOVS     r2,#3
00006a  2150              MOVS     r1,#0x50
00006c  480d              LDR      r0,|L20.164|
00006e  f7fffffe          BL       testSr04Data
;;;714    	testSr04Data(&SRF_04_Data6,80,6,16);
000072  2310              MOVS     r3,#0x10
000074  2206              MOVS     r2,#6
000076  2150              MOVS     r1,#0x50
000078  480b              LDR      r0,|L20.168|
00007a  f7fffffe          BL       testSr04Data
;;;715    	
;;;716    	currentMenu->displayFlag = FUNCTION_AUTO_FLAG;
00007e  68e1              LDR      r1,[r4,#0xc]  ; currentMenu
000080  2003              MOVS     r0,#3
000082  f8810070          STRB     r0,[r1,#0x70]
;;;717    }
000086  bd10              POP      {r4,pc}
;;;718    
                          ENDP

                  |L20.136|
                          DCD      ||.data||+0x10
                  |L20.140|
                          DCD      outfireRobotState
                  |L20.144|
                          DCD      rescueRobotState
                  |L20.148|
                          DCD      SRF_04_Data1
                  |L20.152|
                          DCD      SRF_04_Data2
                  |L20.156|
                          DCD      SRF_04_Data3
                  |L20.160|
                          DCD      SRF_04_Data4
                  |L20.164|
                          DCD      SRF_04_Data5
                  |L20.168|
                          DCD      SRF_04_Data6

                          AREA ||i.testWalkFuction||, CODE, READONLY, ALIGN=2

                  testWalkFuction PROC
;;;718    
;;;719    void testWalkFuction(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;720    { 
;;;721    	switch(currentMenu -> currentOption){
000004  4efe              LDR      r6,|L21.1024|
000006  2202              MOVS     r2,#2
000008  68f0              LDR      r0,[r6,#0xc]  ; currentMenu
00000a  78c1              LDRB     r1,[r0,#3]
00000c  2900              CMP      r1,#0
00000e  d021              BEQ      |L21.84|
000010  2901              CMP      r1,#1
000012  d069              BEQ      |L21.232|
000014  2902              CMP      r1,#2
000016  d068              BEQ      |L21.234|
000018  2903              CMP      r1,#3
00001a  d12b              BNE      |L21.116|
;;;722    		case WALK_TEST: {
;;;723    			switch(oled.keyValue){
;;;724    				case OLED_ENTER:{
;;;725    						currentMenu -> displayFlag = TEST_FLAG;
;;;726    						if(outfireRobotState.testTarget != TESTING||rescueRobotState.testTarget != TESTING){
;;;727    						switch(currentMenu ->preMenu->currentOption){
;;;728    							case 1:{break;}
;;;729    							case 2:{break;}
;;;730    							case 3:{break;}
;;;731    							case 4:{outfireRobotState.moveWays = FRONT_TURN_LEFT_90;rescueRobotState.moveWays = FRONT_TURN_LEFT_90;break;}
;;;732    							case 5:{outfireRobotState.moveWays = FRONT_TURN_LEFT_180;rescueRobotState.moveWays = FRONT_TURN_LEFT_180;break;}
;;;733    							case 6:{outfireRobotState.moveWays = FRONT_TURN_RIGHT_90;rescueRobotState.moveWays = FRONT_TURN_RIGHT_90;break;}
;;;734    							case 7:{outfireRobotState.moveWays = FRONT_TURN_RIGHT_180;rescueRobotState.moveWays = FRONT_TURN_RIGHT_180;break;}
;;;735    							case 8:{outfireRobotState.moveWays = FRONT_TURN_LEFT_135;rescueRobotState.moveWays = FRONT_TURN_LEFT_135;break;}
;;;736    							case 9:{outfireRobotState.moveWays = FRONT_TURN_LEFT_45;rescueRobotState.moveWays = FRONT_TURN_LEFT_45;break;}
;;;737    							case 10:{outfireRobotState.moveWays = FRONT_TURN_RIGHT_135;rescueRobotState.moveWays = FRONT_TURN_RIGHT_135;break;}
;;;738    							case 11:{outfireRobotState.moveWays = FRONT_TURN_RIGHT_45;rescueRobotState.moveWays = FRONT_TURN_RIGHT_45;break;}
;;;739    							case 12:{outfireRobotState.moveWays = BEHIND_TURN_LEFT_45;rescueRobotState.moveWays = BEHIND_TURN_LEFT_45;break;}
;;;740    							case 13:{outfireRobotState.moveWays = BEHIND_TURN_RIGHT_45;rescueRobotState.moveWays = BEHIND_TURN_RIGHT_45;break;}
;;;741    							case 14:{outfireRobotState.moveWays = REVERSE_LEFT_TURN_45;rescueRobotState.moveWays = REVERSE_LEFT_TURN_45;break;}
;;;742    							case 15:{outfireRobotState.moveWays = REVERSE_RIGHT_TURN_45;rescueRobotState.moveWays = REVERSE_RIGHT_TURN_45;break;}
;;;743    							case 16:{outfireRobotState.moveWays = REVERSE_LEFT_TURN_90;rescueRobotState.moveWays = REVERSE_LEFT_TURN_90;break;}
;;;744    							case 17:{outfireRobotState.moveWays = REVERSE_RIGHT_TURN_90;rescueRobotState.moveWays = REVERSE_RIGHT_TURN_90;break;}
;;;745    							case 18:{outfireRobotState.moveWays = REVERSE_LEFT_TURN_135;rescueRobotState.moveWays = REVERSE_LEFT_TURN_135;break;}
;;;746    							case 19:{outfireRobotState.moveWays = REVERSE_RIGHT_TURN_135;rescueRobotState.moveWays = REVERSE_RIGHT_TURN_135;break;}
;;;747    							case 20:{outfireRobotState.moveWays = REVERSE_LEFT_TURN_180;rescueRobotState.moveWays = REVERSE_LEFT_TURN_180;break;}
;;;748    							case 21:{outfireRobotState.moveWays = REVERSE_RIGHT_TURN_180;rescueRobotState.moveWays = REVERSE_RIGHT_TURN_180;break;}
;;;749    							case 22:{outfireRobotState.moveWays = GO_STRAIGHT;rescueRobotState.moveWays = GO_STRAIGHT;break;} 
;;;750    							default:break;
;;;751    						}
;;;752    						OLED_Clear();
;;;753    						outfireRobotState.testTarget = TESTING;
;;;754    						rescueRobotState.testTarget = TESTING;
;;;755    					}
;;;756    						OLED_ShowString(42,0,"Testing",16);
;;;757    						OLED_ShowString(42,2,currentMenu ->preMenu->menuOption[currentMenu ->preMenu->currentOption],16);
;;;758    					break;
;;;759    				}
;;;760    				case OLED_BACK: {
;;;761    					currentMenu -> displayFlag = UPDATEMENU_FLAG;
;;;762    					rescueRobotState.testTarget = WAITING;
;;;763    					rescueRobotState.moveWays = STOP;
;;;764    					outfireRobotState.testTarget = WAITING;
;;;765    					outfireRobotState.moveWays = STOP;
;;;766    					break;	
;;;767    				}
;;;768    			}
;;;769    				break;
;;;770    				
;;;771    		}
;;;772    		case LEFT_WHEEL:{
;;;773    			currentMenu -> displayFlag = FUNCTION_MANUAL_FLAG;
;;;774    			switch(currentMenu->preMenu->currentOption){
;;;775    				case 0:break;
;;;776    				case 1:break;
;;;777    				case 2:break;
;;;778    				case 3:{parameterCalibration(&parameter[NAME_SET_ZERO__LEFT_RATE],0,200);break;}
;;;779    				case 4:{parameterCalibration(&parameter[NAME_TURN_LEFT__LEFT_RATE],0,50);break;}
;;;780    				case 5:{parameterCalibration(&parameter[NAME_TURN_LEFT__LEFT_RATE],0,50);break;}
;;;781    				case 6:{parameterCalibration(&parameter[NAME_TURN_RIGHT__LEFT_RATE],0,50);break;}
;;;782    				case 7:{parameterCalibration(&parameter[NAME_TURN_RIGHT__LEFT_RATE],0,50);break;}
;;;783    				case 8:{parameterCalibration(&parameter[NAME_TURN_LEFT__LEFT_RATE],0,50);break;}
;;;784    				case 9:{parameterCalibration(&parameter[NAME_TURN_LEFT__LEFT_RATE],0,50);break;}
;;;785    				case 10:{parameterCalibration(&parameter[NAME_TURN_RIGHT__LEFT_RATE],0,50);break;}
;;;786    				case 11:{parameterCalibration(&parameter[NAME_TURN_RIGHT__LEFT_RATE],0,50);break;}
;;;787    				case 12:{parameterCalibration(&parameter[NAME_TURN_LEFT__LEFT_RATE],0,50);break;}
;;;788    				case 13:{parameterCalibration(&parameter[NAME_TURN_RIGHT__LEFT_RATE],0,50);break;}
;;;789    				case 14:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__LEFT_RATE],0,50);break;}
;;;790    				case 15:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__LEFT_RATE],0,50);break;}
;;;791    				case 16:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__LEFT_RATE],0,50);break;}
;;;792    				case 17:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__LEFT_RATE],0,50);break;}
;;;793    				case 18:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__LEFT_RATE],0,50);break;}
;;;794    				case 19:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__LEFT_RATE],0,50);break;}
;;;795    				case 20:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__LEFT_RATE],0,50);break;}
;;;796    				case 21:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__LEFT_RATE],0,50);break;}
;;;797    				case 22:{parameterCalibration(&parameter[NAME_GO_STRAIGHT__LEFT_RATE],0,50);break;}
;;;798    				default:break;
;;;799    		}
;;;800    			break;
;;;801    		}
;;;802    		case RIGHT_WHEEL:{
;;;803    			currentMenu -> displayFlag = FUNCTION_MANUAL_FLAG;
;;;804    			switch(currentMenu ->preMenu->currentOption){
;;;805    				case 0:break;
;;;806    				case 1:break;
;;;807    				case 2:break;
;;;808    				case 3:{parameterCalibration(&parameter[NAME_SET_ZERO__RIGHT_RATE],0,200);break;}
;;;809    				case 4:{parameterCalibration(&parameter[NAME_TURN_LEFT__RIGHT_RATE],0,50);break;}
;;;810    				case 5:{parameterCalibration(&parameter[NAME_TURN_LEFT__RIGHT_RATE],0,50);break;}
;;;811    				case 6:{parameterCalibration(&parameter[NAME_TURN_RIGHT__RIGHT_RATE],0,50);break;}
;;;812    				case 7:{parameterCalibration(&parameter[NAME_TURN_RIGHT__RIGHT_RATE],0,50);break;}
;;;813    				case 8:{parameterCalibration(&parameter[NAME_TURN_LEFT__RIGHT_RATE],0,50);break;}
;;;814    				case 9:{parameterCalibration(&parameter[NAME_TURN_LEFT__RIGHT_RATE],0,50);break;}
;;;815    				case 10:{parameterCalibration(&parameter[NAME_TURN_RIGHT__RIGHT_RATE],0,50);break;}
;;;816    				case 11:{parameterCalibration(&parameter[NAME_TURN_RIGHT__RIGHT_RATE],0,50);break;}
;;;817    				case 12:{parameterCalibration(&parameter[NAME_TURN_LEFT__RIGHT_RATE],0,50);break;}
;;;818    				case 13:{parameterCalibration(&parameter[NAME_TURN_RIGHT__RIGHT_RATE],0,50);break;}
;;;819    				case 14:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__RIGHT_RATE],0,50);break;}
;;;820    				case 15:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__RIGHT_RATE],0,50);break;}
;;;821    				case 16:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__RIGHT_RATE],0,50);break;}
;;;822    				case 17:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__RIGHT_RATE],0,50);break;}
;;;823    				case 18:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__RIGHT_RATE],0,50);break;}
;;;824    				case 19:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__RIGHT_RATE],0,50);break;}
;;;825    				case 20:{parameterCalibration(&parameter[NAME_REVERSE_LEFT_TURN__RIGHT_RATE],0,50);break;}
;;;826    				case 21:{parameterCalibration(&parameter[NAME_REVERSE_RIGHT_TURN__RIGHT_RATE],0,50);break;}
;;;827    				case 22:{parameterCalibration(&parameter[NAME_GO_STRAIGHT__RIGHT_RATE],0,50);break;}
;;;828    			}
;;;829    			break;
;;;830    		}
;;;831    		case TURN_TIME:{
;;;832    			currentMenu -> displayFlag = FUNCTION_MANUAL_FLAG;
00001c  f8802070          STRB     r2,[r0,#0x70]
;;;833    			switch(currentMenu ->preMenu->currentOption){
000020  6ec0              LDR      r0,[r0,#0x6c]
;;;834    				case 0:break;
;;;835    				case 1:break;
;;;836    				case 2:break;
;;;837    				case 3:{parameter[NAME_FRONT_TURN_LEFT_TIME_90] = SET_ZERO_TIME;
;;;838    						parameter[NAME_FRONT_TURN_LEFT_TIME_180] = SET_ZERO_TIME;
;;;839    						parameter[NAME_FRONT_TURN_RIGHT_TIME_90] = SET_ZERO_TIME;
;;;840    						parameter[NAME_FRONT_TURN_RIGHT_TIME_180] = SET_ZERO_TIME;
;;;841    						parameter[NAME_FRONT_TURN_LEFT_TIME_135] = SET_ZERO_TIME;
;;;842    						parameter[NAME_FRONT_TURN_RIGHT_TIME_135] = SET_ZERO_TIME;
;;;843    						parameter[NAME_FRONT_TURN_RIGHT_TIME_45] = SET_ZERO_TIME;
;;;844    						parameter[NAME_BEHIND_TURN_LEFT_TIME_45] = SET_ZERO_TIME;
;;;845    						parameter[NAME_BEHIND_TURN_RIGHT_TIME_45] = SET_ZERO_TIME;
;;;846    						parameter[NAME_REVERSE_TURN_TIME_45] = SET_ZERO_TIME;
;;;847    						parameter[NAME_REVERSE_TURN_TIME_90] = SET_ZERO_TIME;
;;;848    						parameter[NAME_REVERSE_TURN_TIME_135] = SET_ZERO_TIME;
;;;849    						parameter[NAME_REVERSE_TURN_TIME_180] = SET_ZERO_TIME;
;;;850    						parameter[NAME_GO_STRAIGHT_TIME] = SET_ZERO_TIME;
;;;851    						app_FlashWriteUdata();
;;;852    						saveGUIFinish();
;;;853    						break;
;;;854    						}
;;;855    				case 4:{parameterCalibration(&parameter[NAME_FRONT_TURN_LEFT_TIME_90],200,3000);break;}
;;;856    				case 5:{parameterCalibration(&parameter[NAME_FRONT_TURN_LEFT_TIME_180],200,5000);break;}
000022  f2413288          MOV      r2,#0x1388
000026  78c1              LDRB     r1,[r0,#3]            ;833
000028  48f6              LDR      r0,|L21.1028|
;;;857    				case 6:{parameterCalibration(&parameter[NAME_FRONT_TURN_RIGHT_TIME_90],200,5000);break;}
;;;858    				case 7:{parameterCalibration(&parameter[NAME_FRONT_TURN_RIGHT_TIME_180],200,5000);break;}
;;;859    				case 8:{parameterCalibration(&parameter[NAME_FRONT_TURN_LEFT_TIME_135],200,5000);break;}
;;;860    				case 9:{parameterCalibration(&parameter[NAME_FRONT_TURN_LEFT_TIME_45],200,5000);break;}
;;;861    				case 10:{parameterCalibration(&parameter[NAME_FRONT_TURN_RIGHT_TIME_135],200,5000);break;}
;;;862    				case 11:{parameterCalibration(&parameter[NAME_FRONT_TURN_RIGHT_TIME_45],200,5000);break;}
;;;863    				case 12:{parameterCalibration(&parameter[NAME_BEHIND_TURN_LEFT_TIME_45],200,5000);break;}
;;;864    				case 13:{parameterCalibration(&parameter[NAME_BEHIND_TURN_RIGHT_TIME_45],200,5000);break;}
;;;865    				case 14:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_45],200,5000);break;}
00002a  f100032c          ADD      r3,r0,#0x2c
;;;866    				case 15:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_45],200,5000);break;}
;;;867    				case 16:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_90],200,5000);break;}
00002e  1d1c              ADDS     r4,r3,#4
;;;868    				case 17:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_90],200,5000);break;}
;;;869    				case 18:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_135],200,5000);break;}
000030  1d25              ADDS     r5,r4,#4
;;;870    				case 19:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_135],200,5000);break;}
;;;871    				case 20:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_180],200,5000);break;}
000032  1d2e              ADDS     r6,r5,#4
000034  2917              CMP      r1,#0x17              ;833
000036  d21d              BCS      |L21.116|
000038  e8dff001          TBB      [pc,r1]               ;833
00003c  1c1c1cfd          DCB      0x1c,0x1c,0x1c,0xfd
000040  fcfbfaf9          DCB      0xfc,0xfb,0xfa,0xf9
000044  f8f7f6f5          DCB      0xf8,0xf7,0xf6,0xf5
000048  f4f3f2f1          DCB      0xf4,0xf3,0xf2,0xf1
00004c  f0efeeed          DCB      0xf0,0xef,0xee,0xed
000050  ecebea00          DCB      0xec,0xeb,0xea,0x00
                  |L21.84|
000054  49ea              LDR      r1,|L21.1024|
000056  4dec              LDR      r5,|L21.1032|
000058  3110              ADDS     r1,r1,#0x10           ;723
00005a  4cec              LDR      r4,|L21.1036|
00005c  7849              LDRB     r1,[r1,#1]            ;723  ; oled
00005e  2901              CMP      r1,#1                 ;723
000060  d00a              BEQ      |L21.120|
000062  2904              CMP      r1,#4                 ;723
000064  d106              BNE      |L21.116|
000066  2101              MOVS     r1,#1                 ;761
000068  f8801070          STRB     r1,[r0,#0x70]         ;761
00006c  70e1              STRB     r1,[r4,#3]            ;762
00006e  7021              STRB     r1,[r4,#0]            ;763
000070  7129              STRB     r1,[r5,#4]            ;764
000072  7069              STRB     r1,[r5,#1]            ;765
                  |L21.116|
;;;872    				case 21:{parameterCalibration(&parameter[NAME_REVERSE_TURN_TIME_180],200,5000);break;}
;;;873    				case 22:{parameterCalibration(&parameter[NAME_GO_STRAIGHT_TIME],200,5000);break;}
;;;874    			}
;;;875    			break;
;;;876    		}		
;;;877    	}
;;;878    }
000074  e8bd81f0          POP      {r4-r8,pc}
                  |L21.120|
000078  2106              MOVS     r1,#6                 ;725
00007a  f8801070          STRB     r1,[r0,#0x70]         ;725
00007e  792b              LDRB     r3,[r5,#4]            ;726  ; outfireRobotState
000080  2704              MOVS     r7,#4                 ;723
000082  b90b              CBNZ     r3,|L21.136|
000084  78e3              LDRB     r3,[r4,#3]            ;726  ; rescueRobotState
000086  b373              CBZ      r3,|L21.230|
                  |L21.136|
000088  6ec0              LDR      r0,[r0,#0x6c]         ;727
00008a  78c0              LDRB     r0,[r0,#3]            ;727
00008c  2817              CMP      r0,#0x17              ;727
00008e  d258              BCS      |L21.322|
000090  e8dff000          TBB      [pc,r0]               ;727
000094  57575757          DCB      0x57,0x57,0x57,0x57
000098  0c0f1316          DCB      0x0c,0x0f,0x13,0x16
00009c  1a1d2125          DCB      0x1a,0x1d,0x21,0x25
0000a0  2c303438          DCB      0x2c,0x30,0x34,0x38
0000a4  3c404448          DCB      0x3c,0x40,0x44,0x48
0000a8  4c505400          DCB      0x4c,0x50,0x54,0x00
0000ac  706a              STRB     r2,[r5,#1]            ;731
0000ae  7022              STRB     r2,[r4,#0]            ;731
0000b0  e047              B        |L21.322|
0000b2  2003              MOVS     r0,#3                 ;732
0000b4  7068              STRB     r0,[r5,#1]            ;732
0000b6  7020              STRB     r0,[r4,#0]            ;732
0000b8  e043              B        |L21.322|
0000ba  706f              STRB     r7,[r5,#1]            ;733
0000bc  7027              STRB     r7,[r4,#0]            ;733
0000be  e040              B        |L21.322|
0000c0  2005              MOVS     r0,#5                 ;734
0000c2  7068              STRB     r0,[r5,#1]            ;734
0000c4  7020              STRB     r0,[r4,#0]            ;734
0000c6  e03c              B        |L21.322|
0000c8  7069              STRB     r1,[r5,#1]            ;735
0000ca  7021              STRB     r1,[r4,#0]            ;735
0000cc  e039              B        |L21.322|
0000ce  2007              MOVS     r0,#7                 ;736
0000d0  7068              STRB     r0,[r5,#1]            ;736
0000d2  7020              STRB     r0,[r4,#0]            ;736
0000d4  e035              B        |L21.322|
0000d6  2008              MOVS     r0,#8                 ;737
0000d8  7068              STRB     r0,[r5,#1]            ;737
0000da  7020              STRB     r0,[r4,#0]            ;737
0000dc  e031              B        |L21.322|
0000de  2009              MOVS     r0,#9                 ;738
0000e0  7068              STRB     r0,[r5,#1]            ;738
0000e2  7020              STRB     r0,[r4,#0]            ;738
0000e4  e02d              B        |L21.322|
                  |L21.230|
0000e6  e031              B        |L21.332|
                  |L21.232|
0000e8  e043              B        |L21.370|
                  |L21.234|
0000ea  e0fe              B        |L21.746|
0000ec  200a              MOVS     r0,#0xa               ;739
0000ee  7068              STRB     r0,[r5,#1]            ;739
0000f0  7020              STRB     r0,[r4,#0]            ;739
0000f2  e026              B        |L21.322|
0000f4  200b              MOVS     r0,#0xb               ;740
0000f6  7068              STRB     r0,[r5,#1]            ;740
0000f8  7020              STRB     r0,[r4,#0]            ;740
0000fa  e022              B        |L21.322|
0000fc  200c              MOVS     r0,#0xc               ;741
0000fe  7068              STRB     r0,[r5,#1]            ;741
000100  7020              STRB     r0,[r4,#0]            ;741
000102  e01e              B        |L21.322|
000104  200d              MOVS     r0,#0xd               ;742
000106  7068              STRB     r0,[r5,#1]            ;742
000108  7020              STRB     r0,[r4,#0]            ;742
00010a  e01a              B        |L21.322|
00010c  200e              MOVS     r0,#0xe               ;743
00010e  7068              STRB     r0,[r5,#1]            ;743
000110  7020              STRB     r0,[r4,#0]            ;743
000112  e016              B        |L21.322|
000114  200f              MOVS     r0,#0xf               ;744
000116  7068              STRB     r0,[r5,#1]            ;744
000118  7020              STRB     r0,[r4,#0]            ;744
00011a  e012              B        |L21.322|
00011c  2010              MOVS     r0,#0x10              ;745
00011e  7068              STRB     r0,[r5,#1]            ;745
000120  7020              STRB     r0,[r4,#0]            ;745
000122  e00e              B        |L21.322|
000124  2011              MOVS     r0,#0x11              ;746
000126  7068              STRB     r0,[r5,#1]            ;746
000128  7020              STRB     r0,[r4,#0]            ;746
00012a  e00a              B        |L21.322|
00012c  2012              MOVS     r0,#0x12              ;747
00012e  7068              STRB     r0,[r5,#1]            ;747
000130  7020              STRB     r0,[r4,#0]            ;747
000132  e006              B        |L21.322|
000134  2013              MOVS     r0,#0x13              ;748
000136  7068              STRB     r0,[r5,#1]            ;748
000138  7020              STRB     r0,[r4,#0]            ;748
00013a  e002              B        |L21.322|
00013c  2015              MOVS     r0,#0x15              ;749
00013e  7068              STRB     r0,[r5,#1]            ;749
000140  7020              STRB     r0,[r4,#0]            ;749
                  |L21.322|
000142  f7fffffe          BL       OLED_Clear
000146  2000              MOVS     r0,#0                 ;753
000148  7128              STRB     r0,[r5,#4]            ;753
00014a  70e0              STRB     r0,[r4,#3]            ;754
                  |L21.332|
00014c  2310              MOVS     r3,#0x10              ;756
00014e  a2b0              ADR      r2,|L21.1040|
000150  2100              MOVS     r1,#0                 ;756
000152  202a              MOVS     r0,#0x2a              ;756
000154  f7fffffe          BL       OLED_ShowString
000158  68f0              LDR      r0,[r6,#0xc]          ;757  ; currentMenu
00015a  2310              MOVS     r3,#0x10              ;757
00015c  6ec0              LDR      r0,[r0,#0x6c]         ;757
00015e  78c1              LDRB     r1,[r0,#3]            ;757
000160  eb070181          ADD      r1,r7,r1,LSL #2       ;757
000164  5842              LDR      r2,[r0,r1]            ;757
000166  e8bd41f0          POP      {r4-r8,lr}            ;757
00016a  2102              MOVS     r1,#2                 ;757
00016c  202a              MOVS     r0,#0x2a              ;757
00016e  f7ffbffe          B.W      OLED_ShowString
                  |L21.370|
000172  f8802070          STRB     r2,[r0,#0x70]         ;773
000176  6ec0              LDR      r0,[r0,#0x6c]         ;774
000178  4da2              LDR      r5,|L21.1028|
00017a  78c1              LDRB     r1,[r0,#3]            ;774
00017c  f1050044          ADD      r0,r5,#0x44           ;779
000180  f105034c          ADD      r3,r5,#0x4c           ;781
000184  f1050454          ADD      r4,r5,#0x54           ;789
000188  3560              ADDS     r5,r5,#0x60           ;790
00018a  2917              CMP      r1,#0x17              ;774
00018c  f4bfaf72          BCS      |L21.116|
000190  e8dff001          TBB      [pc,r1]               ;774
000194  0c0c0c0d          DCB      0x0c,0x0c,0x0c,0x0d
000198  151b2128          DCB      0x15,0x1b,0x21,0x28
00019c  2f353b57          DCB      0x2f,0x35,0x3b,0x57
0001a0  5e646b72          DCB      0x5e,0x64,0x6b,0x72
0001a4  7980878e          DCB      0x79,0x80,0x87,0x8e
0001a8  959ca300          DCB      0x95,0x9c,0xa3,0x00
                  |L21.428|
0001ac  e762              B        |L21.116|
0001ae  e8bd41f0          POP      {r4-r8,lr}            ;778
0001b2  4894              LDR      r0,|L21.1028|
0001b4  22c8              MOVS     r2,#0xc8              ;778
0001b6  2100              MOVS     r1,#0                 ;778
0001b8  306c              ADDS     r0,r0,#0x6c           ;778
0001ba  f7ffbffe          B.W      parameterCalibration
0001be  e8bd41f0          POP      {r4-r8,lr}            ;779
0001c2  2232              MOVS     r2,#0x32              ;779
0001c4  2100              MOVS     r1,#0                 ;779
0001c6  f7ffbffe          B.W      parameterCalibration
0001ca  e8bd41f0          POP      {r4-r8,lr}            ;780
0001ce  2232              MOVS     r2,#0x32              ;780
0001d0  2100              MOVS     r1,#0                 ;780
0001d2  f7ffbffe          B.W      parameterCalibration
0001d6  e8bd41f0          POP      {r4-r8,lr}            ;781
0001da  2232              MOVS     r2,#0x32              ;781
0001dc  2100              MOVS     r1,#0                 ;781
0001de  4618              MOV      r0,r3                 ;781
0001e0  f7ffbffe          B.W      parameterCalibration
0001e4  e8bd41f0          POP      {r4-r8,lr}            ;782
0001e8  2232              MOVS     r2,#0x32              ;782
0001ea  2100              MOVS     r1,#0                 ;782
0001ec  4618              MOV      r0,r3                 ;782
0001ee  f7ffbffe          B.W      parameterCalibration
0001f2  e8bd41f0          POP      {r4-r8,lr}            ;783
0001f6  2232              MOVS     r2,#0x32              ;783
0001f8  2100              MOVS     r1,#0                 ;783
0001fa  f7ffbffe          B.W      parameterCalibration
0001fe  e8bd41f0          POP      {r4-r8,lr}            ;784
000202  2232              MOVS     r2,#0x32              ;784
000204  2100              MOVS     r1,#0                 ;784
000206  f7ffbffe          B.W      parameterCalibration
00020a  2232              MOVS     r2,#0x32              ;785
00020c  2100              MOVS     r1,#0                 ;785
00020e  e013              B        |L21.568|
000210  e1ab              B        |L21.1386|
000212  e1a4              B        |L21.1374|
000214  e19d              B        |L21.1362|
000216  e196              B        |L21.1350|
000218  e18f              B        |L21.1338|
00021a  e188              B        |L21.1326|
00021c  e181              B        |L21.1314|
00021e  e17a              B        |L21.1302|
000220  e173              B        |L21.1290|
000222  e16b              B        |L21.1276|
000224  e163              B        |L21.1262|
000226  e15b              B        |L21.1248|
000228  e153              B        |L21.1234|
00022a  e14b              B        |L21.1220|
00022c  e143              B        |L21.1206|
00022e  e13b              B        |L21.1192|
000230  e133              B        |L21.1178|
000232  e12b              B        |L21.1164|
000234  e122              B        |L21.1148|
000236  e10b              B        |L21.1104|
                  |L21.568|
000238  e8bd41f0          POP      {r4-r8,lr}            ;785
00023c  4618              MOV      r0,r3                 ;785
00023e  f7ffbffe          B.W      parameterCalibration
000242  e8bd41f0          POP      {r4-r8,lr}            ;786
000246  2232              MOVS     r2,#0x32              ;786
000248  2100              MOVS     r1,#0                 ;786
00024a  4618              MOV      r0,r3                 ;786
00024c  f7ffbffe          B.W      parameterCalibration
000250  e8bd41f0          POP      {r4-r8,lr}            ;787
000254  2232              MOVS     r2,#0x32              ;787
000256  2100              MOVS     r1,#0                 ;787
000258  f7ffbffe          B.W      parameterCalibration
00025c  e8bd41f0          POP      {r4-r8,lr}            ;788
000260  2232              MOVS     r2,#0x32              ;788
000262  2100              MOVS     r1,#0                 ;788
000264  4618              MOV      r0,r3                 ;788
000266  f7ffbffe          B.W      parameterCalibration
00026a  4620              MOV      r0,r4                 ;789
00026c  e8bd41f0          POP      {r4-r8,lr}            ;789
000270  2232              MOVS     r2,#0x32              ;789
000272  2100              MOVS     r1,#0                 ;789
000274  f7ffbffe          B.W      parameterCalibration
000278  4628              MOV      r0,r5                 ;790
00027a  e8bd41f0          POP      {r4-r8,lr}            ;790
00027e  2232              MOVS     r2,#0x32              ;790
000280  2100              MOVS     r1,#0                 ;790
000282  f7ffbffe          B.W      parameterCalibration
000286  4620              MOV      r0,r4                 ;791
000288  e8bd41f0          POP      {r4-r8,lr}            ;791
00028c  2232              MOVS     r2,#0x32              ;791
00028e  2100              MOVS     r1,#0                 ;791
000290  f7ffbffe          B.W      parameterCalibration
000294  4628              MOV      r0,r5                 ;792
000296  e8bd41f0          POP      {r4-r8,lr}            ;792
00029a  2232              MOVS     r2,#0x32              ;792
00029c  2100              MOVS     r1,#0                 ;792
00029e  f7ffbffe          B.W      parameterCalibration
0002a2  4620              MOV      r0,r4                 ;793
0002a4  e8bd41f0          POP      {r4-r8,lr}            ;793
0002a8  2232              MOVS     r2,#0x32              ;793
0002aa  2100              MOVS     r1,#0                 ;793
0002ac  f7ffbffe          B.W      parameterCalibration
0002b0  4628              MOV      r0,r5                 ;794
0002b2  e8bd41f0          POP      {r4-r8,lr}            ;794
0002b6  2232              MOVS     r2,#0x32              ;794
0002b8  2100              MOVS     r1,#0                 ;794
0002ba  f7ffbffe          B.W      parameterCalibration
0002be  4620              MOV      r0,r4                 ;795
0002c0  e8bd41f0          POP      {r4-r8,lr}            ;795
0002c4  2232              MOVS     r2,#0x32              ;795
0002c6  2100              MOVS     r1,#0                 ;795
0002c8  f7ffbffe          B.W      parameterCalibration
0002cc  4628              MOV      r0,r5                 ;796
0002ce  e8bd41f0          POP      {r4-r8,lr}            ;796
0002d2  2232              MOVS     r2,#0x32              ;796
0002d4  2100              MOVS     r1,#0                 ;796
0002d6  f7ffbffe          B.W      parameterCalibration
0002da  e8bd41f0          POP      {r4-r8,lr}            ;797
0002de  4849              LDR      r0,|L21.1028|
0002e0  2232              MOVS     r2,#0x32              ;797
0002e2  2100              MOVS     r1,#0                 ;797
0002e4  3064              ADDS     r0,r0,#0x64           ;797
0002e6  f7ffbffe          B.W      parameterCalibration
                  |L21.746|
0002ea  f8802070          STRB     r2,[r0,#0x70]         ;803
0002ee  6ec0              LDR      r0,[r0,#0x6c]         ;804
0002f0  4d44              LDR      r5,|L21.1028|
0002f2  78c1              LDRB     r1,[r0,#3]            ;804
0002f4  f1050048          ADD      r0,r5,#0x48           ;809
0002f8  f1050350          ADD      r3,r5,#0x50           ;811
0002fc  f1050458          ADD      r4,r5,#0x58           ;819
000300  355c              ADDS     r5,r5,#0x5c           ;820
000302  2917              CMP      r1,#0x17              ;804
000304  f4bfaf52          BCS      |L21.428|
000308  e8dff001          TBB      [pc,r1]               ;804
00030c  0c0c0c0d          DCB      0x0c,0x0c,0x0c,0x0d
000310  151b2128          DCB      0x15,0x1b,0x21,0x28
000314  2f353b42          DCB      0x2f,0x35,0x3b,0x42
000318  494f565d          DCB      0x49,0x4f,0x56,0x5d
00031c  646b7279          DCB      0x64,0x6b,0x72,0x79
000320  8d949b00          DCB      0x8d,0x94,0x9b,0x00
000324  e6a6              B        |L21.116|
000326  e8bd41f0          POP      {r4-r8,lr}            ;808
00032a  4836              LDR      r0,|L21.1028|
00032c  22c8              MOVS     r2,#0xc8              ;808
00032e  2100              MOVS     r1,#0                 ;808
000330  3070              ADDS     r0,r0,#0x70           ;808
000332  f7ffbffe          B.W      parameterCalibration
000336  e8bd41f0          POP      {r4-r8,lr}            ;809
00033a  2232              MOVS     r2,#0x32              ;809
00033c  2100              MOVS     r1,#0                 ;809
00033e  f7ffbffe          B.W      parameterCalibration
000342  e8bd41f0          POP      {r4-r8,lr}            ;810
000346  2232              MOVS     r2,#0x32              ;810
000348  2100              MOVS     r1,#0                 ;810
00034a  f7ffbffe          B.W      parameterCalibration
00034e  e8bd41f0          POP      {r4-r8,lr}            ;811
000352  2232              MOVS     r2,#0x32              ;811
000354  2100              MOVS     r1,#0                 ;811
000356  4618              MOV      r0,r3                 ;811
000358  f7ffbffe          B.W      parameterCalibration
00035c  e8bd41f0          POP      {r4-r8,lr}            ;812
000360  2232              MOVS     r2,#0x32              ;812
000362  2100              MOVS     r1,#0                 ;812
000364  4618              MOV      r0,r3                 ;812
000366  f7ffbffe          B.W      parameterCalibration
00036a  e8bd41f0          POP      {r4-r8,lr}            ;813
00036e  2232              MOVS     r2,#0x32              ;813
000370  2100              MOVS     r1,#0                 ;813
000372  f7ffbffe          B.W      parameterCalibration
000376  e8bd41f0          POP      {r4-r8,lr}            ;814
00037a  2232              MOVS     r2,#0x32              ;814
00037c  2100              MOVS     r1,#0                 ;814
00037e  f7ffbffe          B.W      parameterCalibration
000382  e8bd41f0          POP      {r4-r8,lr}            ;815
000386  2232              MOVS     r2,#0x32              ;815
000388  2100              MOVS     r1,#0                 ;815
00038a  4618              MOV      r0,r3                 ;815
00038c  f7ffbffe          B.W      parameterCalibration
000390  e8bd41f0          POP      {r4-r8,lr}            ;816
000394  2232              MOVS     r2,#0x32              ;816
000396  2100              MOVS     r1,#0                 ;816
000398  4618              MOV      r0,r3                 ;816
00039a  f7ffbffe          B.W      parameterCalibration
00039e  e8bd41f0          POP      {r4-r8,lr}            ;817
0003a2  2232              MOVS     r2,#0x32              ;817
0003a4  2100              MOVS     r1,#0                 ;817
0003a6  f7ffbffe          B.W      parameterCalibration
0003aa  e8bd41f0          POP      {r4-r8,lr}            ;818
0003ae  2232              MOVS     r2,#0x32              ;818
0003b0  2100              MOVS     r1,#0                 ;818
0003b2  4618              MOV      r0,r3                 ;818
0003b4  f7ffbffe          B.W      parameterCalibration
0003b8  4620              MOV      r0,r4                 ;819
0003ba  e8bd41f0          POP      {r4-r8,lr}            ;819
0003be  2232              MOVS     r2,#0x32              ;819
0003c0  2100              MOVS     r1,#0                 ;819
0003c2  f7ffbffe          B.W      parameterCalibration
0003c6  4628              MOV      r0,r5                 ;820
0003c8  e8bd41f0          POP      {r4-r8,lr}            ;820
0003cc  2232              MOVS     r2,#0x32              ;820
0003ce  2100              MOVS     r1,#0                 ;820
0003d0  f7ffbffe          B.W      parameterCalibration
0003d4  4620              MOV      r0,r4                 ;821
0003d6  e8bd41f0          POP      {r4-r8,lr}            ;821
0003da  2232              MOVS     r2,#0x32              ;821
0003dc  2100              MOVS     r1,#0                 ;821
0003de  f7ffbffe          B.W      parameterCalibration
0003e2  4628              MOV      r0,r5                 ;822
0003e4  e8bd41f0          POP      {r4-r8,lr}            ;822
0003e8  2232              MOVS     r2,#0x32              ;822
0003ea  2100              MOVS     r1,#0                 ;822
0003ec  f7ffbffe          B.W      parameterCalibration
0003f0  4620              MOV      r0,r4                 ;823
0003f2  e8bd41f0          POP      {r4-r8,lr}            ;823
0003f6  2232              MOVS     r2,#0x32              ;823
0003f8  2100              MOVS     r1,#0                 ;823
0003fa  f7ffbffe          B.W      parameterCalibration
0003fe  e00b              B        |L21.1048|
                  |L21.1024|
                          DCD      ||.data||
                  |L21.1028|
                          DCD      parameter
                  |L21.1032|
                          DCD      outfireRobotState
                  |L21.1036|
                          DCD      rescueRobotState
                  |L21.1040|
000410  54657374          DCB      "Testing",0
000414  696e6700
                  |L21.1048|
000418  4628              MOV      r0,r5                 ;824
00041a  e8bd41f0          POP      {r4-r8,lr}            ;824
00041e  2232              MOVS     r2,#0x32              ;824
000420  2100              MOVS     r1,#0                 ;824
000422  f7ffbffe          B.W      parameterCalibration
000426  4620              MOV      r0,r4                 ;825
000428  e8bd41f0          POP      {r4-r8,lr}            ;825
00042c  2232              MOVS     r2,#0x32              ;825
00042e  2100              MOVS     r1,#0                 ;825
000430  f7ffbffe          B.W      parameterCalibration
000434  4628              MOV      r0,r5                 ;826
000436  e8bd41f0          POP      {r4-r8,lr}            ;826
00043a  2232              MOVS     r2,#0x32              ;826
00043c  2100              MOVS     r1,#0                 ;826
00043e  f7ffbffe          B.W      parameterCalibration
000442  e8bd41f0          POP      {r4-r8,lr}            ;827
000446  2232              MOVS     r2,#0x32              ;827
000448  2100              MOVS     r1,#0                 ;827
00044a  484b              LDR      r0,|L21.1400|
00044c  f7ffbffe          B.W      parameterCalibration
                  |L21.1104|
000450  f44f61fa          MOV      r1,#0x7d0             ;837
000454  6041              STR      r1,[r0,#4]            ;837  ; parameter
000456  6081              STR      r1,[r0,#8]            ;838  ; parameter
000458  6181              STR      r1,[r0,#0x18]         ;839  ; parameter
00045a  61c1              STR      r1,[r0,#0x1c]         ;840  ; parameter
00045c  60c1              STR      r1,[r0,#0xc]          ;841  ; parameter
00045e  6201              STR      r1,[r0,#0x20]         ;842  ; parameter
000460  6241              STR      r1,[r0,#0x24]         ;843  ; parameter
000462  6141              STR      r1,[r0,#0x14]         ;844  ; parameter
000464  6281              STR      r1,[r0,#0x28]         ;845  ; parameter
000466  62c1              STR      r1,[r0,#0x2c]         ;846  ; parameter
000468  6301              STR      r1,[r0,#0x30]         ;847  ; parameter
00046a  6341              STR      r1,[r0,#0x34]         ;848  ; parameter
00046c  6381              STR      r1,[r0,#0x38]         ;849  ; parameter
00046e  63c1              STR      r1,[r0,#0x3c]         ;850  ; parameter
000470  f7fffffe          BL       app_FlashWriteUdata
000474  e8bd41f0          POP      {r4-r8,lr}            ;852
000478  f7ffbffe          B.W      saveGUIFinish
                  |L21.1148|
00047c  e8bd41f0          POP      {r4-r8,lr}            ;855
000480  21c8              MOVS     r1,#0xc8              ;855
000482  f64032b8          MOV      r2,#0xbb8             ;855
000486  1d00              ADDS     r0,r0,#4              ;855
000488  f7ffbffe          B.W      parameterCalibration
                  |L21.1164|
00048c  e8bd41f0          POP      {r4-r8,lr}            ;856
000490  4839              LDR      r0,|L21.1400|
000492  21c8              MOVS     r1,#0xc8              ;856
000494  3860              SUBS     r0,r0,#0x60           ;856
000496  f7ffbffe          B.W      parameterCalibration
                  |L21.1178|
00049a  e8bd41f0          POP      {r4-r8,lr}            ;857
00049e  4836              LDR      r0,|L21.1400|
0004a0  21c8              MOVS     r1,#0xc8              ;857
0004a2  3850              SUBS     r0,r0,#0x50           ;857
0004a4  f7ffbffe          B.W      parameterCalibration
                  |L21.1192|
0004a8  e8bd41f0          POP      {r4-r8,lr}            ;858
0004ac  4832              LDR      r0,|L21.1400|
0004ae  21c8              MOVS     r1,#0xc8              ;858
0004b0  384c              SUBS     r0,r0,#0x4c           ;858
0004b2  f7ffbffe          B.W      parameterCalibration
                  |L21.1206|
0004b6  e8bd41f0          POP      {r4-r8,lr}            ;859
0004ba  482f              LDR      r0,|L21.1400|
0004bc  21c8              MOVS     r1,#0xc8              ;859
0004be  385c              SUBS     r0,r0,#0x5c           ;859
0004c0  f7ffbffe          B.W      parameterCalibration
                  |L21.1220|
0004c4  e8bd41f0          POP      {r4-r8,lr}            ;860
0004c8  482b              LDR      r0,|L21.1400|
0004ca  21c8              MOVS     r1,#0xc8              ;860
0004cc  3858              SUBS     r0,r0,#0x58           ;860
0004ce  f7ffbffe          B.W      parameterCalibration
                  |L21.1234|
0004d2  e8bd41f0          POP      {r4-r8,lr}            ;861
0004d6  4828              LDR      r0,|L21.1400|
0004d8  21c8              MOVS     r1,#0xc8              ;861
0004da  3848              SUBS     r0,r0,#0x48           ;861
0004dc  f7ffbffe          B.W      parameterCalibration
                  |L21.1248|
0004e0  e8bd41f0          POP      {r4-r8,lr}            ;862
0004e4  4824              LDR      r0,|L21.1400|
0004e6  21c8              MOVS     r1,#0xc8              ;862
0004e8  3844              SUBS     r0,r0,#0x44           ;862
0004ea  f7ffbffe          B.W      parameterCalibration
                  |L21.1262|
0004ee  e8bd41f0          POP      {r4-r8,lr}            ;863
0004f2  4821              LDR      r0,|L21.1400|
0004f4  21c8              MOVS     r1,#0xc8              ;863
0004f6  3854              SUBS     r0,r0,#0x54           ;863
0004f8  f7ffbffe          B.W      parameterCalibration
                  |L21.1276|
0004fc  e8bd41f0          POP      {r4-r8,lr}            ;864
000500  481d              LDR      r0,|L21.1400|
000502  21c8              MOVS     r1,#0xc8              ;864
000504  3840              SUBS     r0,r0,#0x40           ;864
000506  f7ffbffe          B.W      parameterCalibration
                  |L21.1290|
00050a  e8bd41f0          POP      {r4-r8,lr}            ;865
00050e  21c8              MOVS     r1,#0xc8              ;865
000510  4618              MOV      r0,r3                 ;865
000512  f7ffbffe          B.W      parameterCalibration
                  |L21.1302|
000516  e8bd41f0          POP      {r4-r8,lr}            ;866
00051a  21c8              MOVS     r1,#0xc8              ;866
00051c  4618              MOV      r0,r3                 ;866
00051e  f7ffbffe          B.W      parameterCalibration
                  |L21.1314|
000522  4620              MOV      r0,r4                 ;867
000524  e8bd41f0          POP      {r4-r8,lr}            ;867
000528  21c8              MOVS     r1,#0xc8              ;867
00052a  f7ffbffe          B.W      parameterCalibration
                  |L21.1326|
00052e  4620              MOV      r0,r4                 ;868
000530  e8bd41f0          POP      {r4-r8,lr}            ;868
000534  21c8              MOVS     r1,#0xc8              ;868
000536  f7ffbffe          B.W      parameterCalibration
                  |L21.1338|
00053a  4628              MOV      r0,r5                 ;869
00053c  e8bd41f0          POP      {r4-r8,lr}            ;869
000540  21c8              MOVS     r1,#0xc8              ;869
000542  f7ffbffe          B.W      parameterCalibration
                  |L21.1350|
000546  4628              MOV      r0,r5                 ;870
000548  e8bd41f0          POP      {r4-r8,lr}            ;870
00054c  21c8              MOVS     r1,#0xc8              ;870
00054e  f7ffbffe          B.W      parameterCalibration
                  |L21.1362|
000552  4630              MOV      r0,r6                 ;871
000554  e8bd41f0          POP      {r4-r8,lr}            ;871
000558  21c8              MOVS     r1,#0xc8              ;871
00055a  f7ffbffe          B.W      parameterCalibration
                  |L21.1374|
00055e  4630              MOV      r0,r6                 ;872
000560  e8bd41f0          POP      {r4-r8,lr}            ;872
000564  21c8              MOVS     r1,#0xc8              ;872
000566  f7ffbffe          B.W      parameterCalibration
                  |L21.1386|
00056a  e8bd41f0          POP      {r4-r8,lr}            ;873
00056e  4802              LDR      r0,|L21.1400|
000570  21c8              MOVS     r1,#0xc8              ;873
000572  382c              SUBS     r0,r0,#0x2c           ;873
000574  f7ffbffe          B.W      parameterCalibration
;;;879    
                          ENDP

                  |L21.1400|
                          DCD      parameter+0x68

                          AREA ||i.upHandle||, CODE, READONLY, ALIGN=2

                  upHandle PROC
;;;345    */
;;;346    static void upHandle()
000000  b510              PUSH     {r4,lr}
;;;347    {
;;;348    	/*清零除了UP外的其他键值长按时间*/
;;;349    	OLEDKeyNoReset(OLED_UP);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       OLEDKeyNoReset
;;;350    	/*如果不在菜单函数内*/	
;;;351    	if((currentMenu ->displayFlag == FUNCTION_MANUAL_FLAG)||(currentMenu ->displayFlag == TEST_FLAG)||(currentMenu ->displayFlag == WORK_FLAG)){
000008  4813              LDR      r0,|L22.88|
;;;352    		/*执行菜单函数*/
;;;353    		if( currentMenu -> func[currentMenu -> currentOption] != NULL ){
;;;354    			currentMenu -> func[currentMenu -> currentOption]();
;;;355    		}	
;;;356    	}
;;;357    	/*如果在菜单函数内*/
;;;358    	else{
;;;359    		/*菜单选项没到顶头，选中选项向上一个选项*/
;;;360    		if(currentMenu -> currentOption != 0){
;;;361    			currentMenu -> currentOption--;
;;;362    			if(currentMenu -> currentOption < currentMenu -> showFrom){
;;;363    				currentMenu -> showFrom--;
;;;364    				currentMenu -> showTo--;
;;;365    			}
;;;366    		}
;;;367    		/*更新菜单*/
;;;368    		currentMenu -> displayFlag = UPDATEMENU_FLAG;
;;;369    		GUI.workState = GUI_CHOOSE;
00000a  4c14              LDR      r4,|L22.92|
00000c  68c0              LDR      r0,[r0,#0xc]          ;351  ; currentMenu
00000e  f8901070          LDRB     r1,[r0,#0x70]         ;351
000012  2902              CMP      r1,#2                 ;351
000014  d018              BEQ      |L22.72|
000016  2906              CMP      r1,#6                 ;351
000018  d016              BEQ      |L22.72|
00001a  2904              CMP      r1,#4                 ;351
00001c  d014              BEQ      |L22.72|
00001e  78c1              LDRB     r1,[r0,#3]            ;360
000020  b151              CBZ      r1,|L22.56|
000022  1e49              SUBS     r1,r1,#1              ;361
000024  b2ca              UXTB     r2,r1                 ;361
000026  70c2              STRB     r2,[r0,#3]            ;361
000028  7801              LDRB     r1,[r0,#0]            ;362
00002a  428a              CMP      r2,r1                 ;362
00002c  d204              BCS      |L22.56|
00002e  1e49              SUBS     r1,r1,#1              ;363
000030  7001              STRB     r1,[r0,#0]            ;363
000032  7841              LDRB     r1,[r0,#1]            ;364
000034  1e49              SUBS     r1,r1,#1              ;364
000036  7041              STRB     r1,[r0,#1]            ;364
                  |L22.56|
000038  2101              MOVS     r1,#1                 ;368
00003a  f8801070          STRB     r1,[r0,#0x70]         ;368
00003e  80a1              STRH     r1,[r4,#4]
                  |L22.64|
;;;370    	}
;;;371    	/*长按时间自加*/
;;;372    	GUI.waitKeyTime[OLED_UP]++;
000040  6960              LDR      r0,[r4,#0x14]  ; GUI
000042  1c40              ADDS     r0,r0,#1
000044  6160              STR      r0,[r4,#0x14]  ; GUI
;;;373    }
000046  bd10              POP      {r4,pc}
                  |L22.72|
000048  6f41              LDR      r1,[r0,#0x74]         ;353
00004a  78c0              LDRB     r0,[r0,#3]            ;353
00004c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;353
000050  2800              CMP      r0,#0                 ;353
000052  d0f5              BEQ      |L22.64|
000054  4780              BLX      r0                    ;354
000056  e7f3              B        |L22.64|
;;;374    /*
                          ENDP

                  |L22.88|
                          DCD      ||.data||
                  |L22.92|
                          DCD      GUI

                          AREA ||i.workChoose||, CODE, READONLY, ALIGN=2

                  workChoose PROC
;;;923    
;;;924    void workChoose(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;925    {
;;;926    
;;;927    	switch(currentMenu -> currentOption){
000004  481d              LDR      r0,|L23.124|
;;;928    		case TEST:{ 
;;;929    			currentMenu -> displayFlag = FUNCTION_MANUAL_FLAG;
;;;930    			switch(oled.keyValue){
000006  491d              LDR      r1,|L23.124|
000008  2601              MOVS     r6,#1                 ;927
00000a  68c0              LDR      r0,[r0,#0xc]          ;927  ; currentMenu
00000c  3110              ADDS     r1,r1,#0x10
;;;931    				case OLED_BACK:{
;;;932    					currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
;;;933    					break;
;;;934    				}
;;;935    				case OLED_ENTER:{
;;;936    					OLED_Clear();
;;;937    					OLED_ShowString(0,0,"ChooseTest",16);
;;;938    					outfireRobotState.workMode = TEST;
00000e  4c1c              LDR      r4,|L23.128|
000010  78c2              LDRB     r2,[r0,#3]            ;927
;;;939    					outfireRobotState.step = INIT;
;;;940    					rescueRobotState.workMode = TEST;
000012  4d1c              LDR      r5,|L23.132|
000014  7849              LDRB     r1,[r1,#1]            ;930
000016  2702              MOVS     r7,#2                 ;929
000018  2a00              CMP      r2,#0                 ;927
00001a  d00b              BEQ      |L23.52|
00001c  2a01              CMP      r2,#1                 ;927
00001e  d107              BNE      |L23.48|
;;;941    					rescueRobotState.step = INIT;
;;;942    					break;
;;;943    				}
;;;944    			}
;;;945    		break;}
;;;946    		case OUT_FIRE:{  
;;;947    			currentMenu -> displayFlag = FUNCTION_MANUAL_FLAG;
000020  f8807070          STRB     r7,[r0,#0x70]
;;;948    			switch(oled.keyValue){
000024  2901              CMP      r1,#1
000026  d01c              BEQ      |L23.98|
000028  2904              CMP      r1,#4
00002a  d101              BNE      |L23.48|
;;;949    				case OLED_BACK:{
;;;950    					currentMenu -> displayFlag = UPDATEMENU_FLAG;				//刷新一次菜单~
00002c  f8806070          STRB     r6,[r0,#0x70]
                  |L23.48|
;;;951    					break;
;;;952    				}
;;;953    				case OLED_ENTER:{
;;;954    					OLED_Clear();
;;;955    					OLED_ShowString(0,0,"ChooseWork",16);
;;;956    					outfireRobotState.workMode = OUT_FIRE;
;;;957    					rescueRobotState.workMode = RESCUEING;
;;;958    					rescueRobotState.step = READY;
;;;959    					outfireRobotState.step = READY;
;;;960    					break;
;;;961    				}
;;;962    			}
;;;963    		break;}
;;;964    	}
;;;965    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L23.52|
000034  f8807070          STRB     r7,[r0,#0x70]         ;929
000038  2901              CMP      r1,#1                 ;930
00003a  d004              BEQ      |L23.70|
00003c  2904              CMP      r1,#4                 ;930
00003e  d1f7              BNE      |L23.48|
000040  f8806070          STRB     r6,[r0,#0x70]         ;932
000044  e7f4              B        |L23.48|
                  |L23.70|
000046  f7fffffe          BL       OLED_Clear
00004a  2100              MOVS     r1,#0                 ;937
00004c  2310              MOVS     r3,#0x10              ;937
00004e  a20e              ADR      r2,|L23.136|
000050  4608              MOV      r0,r1                 ;937
000052  f7fffffe          BL       OLED_ShowString
000056  2000              MOVS     r0,#0                 ;938
000058  7220              STRB     r0,[r4,#8]            ;938
00005a  7160              STRB     r0,[r4,#5]            ;939
00005c  71e8              STRB     r0,[r5,#7]            ;940
00005e  7128              STRB     r0,[r5,#4]            ;941
000060  e7e6              B        |L23.48|
                  |L23.98|
000062  f7fffffe          BL       OLED_Clear
000066  2100              MOVS     r1,#0                 ;955
000068  2310              MOVS     r3,#0x10              ;955
00006a  a20a              ADR      r2,|L23.148|
00006c  4608              MOV      r0,r1                 ;955
00006e  f7fffffe          BL       OLED_ShowString
000072  7226              STRB     r6,[r4,#8]            ;956
000074  71ef              STRB     r7,[r5,#7]            ;957
000076  712e              STRB     r6,[r5,#4]            ;958
000078  7166              STRB     r6,[r4,#5]            ;959
00007a  e7d9              B        |L23.48|
;;;966    
                          ENDP

                  |L23.124|
                          DCD      ||.data||
                  |L23.128|
                          DCD      outfireRobotState
                  |L23.132|
                          DCD      rescueRobotState
                  |L23.136|
000088  43686f6f          DCB      "ChooseTest",0
00008c  73655465
000090  737400  
000093  00                DCB      0
                  |L23.148|
000094  43686f6f          DCB      "ChooseWork",0
000098  7365576f
00009c  726b00  
00009f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mainMenu
                          %        120
                  testModeMenu
                          %        120
                  workChooseMenu
                          %        120
                  fireChooseMenu
                          %        120
                  testWalkMenu
                          %        120
                  FOMenu
                          %        120
                  FTMenu
                          %        120
                  RMenu
                          %        120

                          AREA ||area_number.26||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.bss||
                  testHcSr04Menu
                          %        120

                          AREA ||area_number.27||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.bss||
                  testWalkMoreParameterMenu
                          %        120

                          AREA ||area_number.28||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.bss||
                  clawGrabMenu
                          %        120

                          AREA ||area_number.29||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.bss||
                  clawMoveMenu
                          %        120

                          AREA ||area_number.30||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.bss||
                  cameraSiteMenu
                          %        120

                          AREA ||.data||, DATA, ALIGN=2

                  incrementMin
000000  00                DCB      0x00
                  incrementMiddle
000001  00                DCB      0x00
                  incrementMax
000002  0000              DCB      0x00,0x00
                  faning
                          DCD      0x00000000
                  realParameter
000008  00000000          DCFS     0x00000000 ; 0
                  currentMenu
                          DCD      0x00000000
                  oled
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\User_GUI\\GUI_OLED.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_GUI_OLED_c_faning____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_GUI_OLED_c_faning____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_GUI_OLED_c_faning____REVSH|
#line 128
|__asm___10_GUI_OLED_c_faning____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
