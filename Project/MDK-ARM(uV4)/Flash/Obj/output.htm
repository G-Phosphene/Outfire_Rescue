<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Obj\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Obj\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Oct 12 19:02:53 2019
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; app_Init &rArr; appfindFire_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from driver_echo.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from driver_echo.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4a]">GUIUpdate</a> from gui.o(i.GUIUpdate) referenced from gui.o(i.GUI_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">OTG_FS_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from driver_echo.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">UART4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from hj_usart_irq.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[51]">adFunction</a> from gui_oled.o(i.adFunction) referenced from gui_oled.o(i.menuInit)
 <LI><a href="#[4b]">app_WorkTask</a> from app_work.o(i.app_WorkTask) referenced from app_work.o(i.app_WorkTaskInit)
 <LI><a href="#[4c]">app_echoTask</a> from app_echo.o(i.app_echoTask) referenced from app_echo.o(i.app_echoInit)
 <LI><a href="#[4f]">app_findFireTask</a> from app_findfire.o(i.app_findFireTask) referenced from app_findfire.o(i.appfindFire_Init)
 <LI><a href="#[4d]">app_inputTask</a> from app_input.o(i.app_inputTask) referenced from app_input.o(i.app_inputTaskInit)
 <LI><a href="#[4e]">app_walkTask</a> from app_walk.o(i.app_walkTask) referenced from app_walk.o(i.app_walkTaskInit)
 <LI><a href="#[52]">fanTest</a> from gui_oled.o(i.fanTest) referenced from gui_oled.o(i.menuInit)
 <LI><a href="#[54]">fireChoose</a> from gui_oled.o(i.fireChoose) referenced from gui_oled.o(i.menuInit)
 <LI><a href="#[47]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[57]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[56]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[50]">testSr04Function</a> from gui_oled.o(i.testSr04Function) referenced from gui_oled.o(i.menuInit)
 <LI><a href="#[55]">testWalkFuction</a> from gui_oled.o(i.testWalkFuction) referenced from gui_oled.o(i.menuInit)
 <LI><a href="#[53]">workChoose</a> from gui_oled.o(i.workChoose) referenced from gui_oled.o(i.menuInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[58]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[150]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[151]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[152]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a8]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[153]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadc_average
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadc_average
</UL>

<P><STRONG><a name="[115]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadc_average
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
</UL>

<P><STRONG><a name="[154]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadc_average
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSr04Data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adShowData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[156]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[157]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[5c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[64]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[63]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[159]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[15a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>ADC_Configuration</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, driver_linearmovement.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC_Configuration &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[75]"></a>ADC_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[78]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[73]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[74]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[77]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7b]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[79]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>BSP_GPIO_EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, bsp_exti.o(i.BSP_GPIO_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_GPIO_EXTI_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TO_NVIC_IRQChannel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TO_EXTI_PortSource
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TO_EXTI_PinSource
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TO_EXTI_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
</UL>

<P><STRONG><a name="[72]"></a>BSP_GPIO_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_gpio.o(i.BSP_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_RCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_FanMotorGPIOConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[84]"></a>BSP_GPIO_RCC_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPIO_RCC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[86]"></a>BSP_TIM_INT_Init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bsp_timer.o(i.BSP_TIM_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_TIM_INT_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TO_NVIC_IRQChannel
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_RCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
</UL>

<P><STRONG><a name="[87]"></a>BSP_TIM_RCC_Init</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, bsp_timer.o(i.BSP_TIM_RCC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6e]"></a>DMA_DeInit</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6f]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, driver_echo.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EXTI4_IRQHandler &rArr; app_echoGetDistance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TO_EXTI_Line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>EXTI9_5_IRQDivision</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, driver_echo.o(i.EXTI9_5_IRQDivision))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI9_5_IRQDivision &rArr; app_echoGetDistance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TO_EXTI_Line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_echo.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI9_5_IRQDivision &rArr; app_echoGetDistance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQDivision
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQDivision
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQDivision
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[112]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[91]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[94]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[114]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[93]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[111]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[92]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[85]"></a>GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_GPIO_Config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitPhotoelectricSwitchHard
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitKeyHard
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_GPIO_Config
</UL>

<P><STRONG><a name="[11b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverPhotoelectricSwitchNowStateUpdate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverKeyNowStateUpdate
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[80]"></a>GPIO_TO_EXTI_Line</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, bsp_exti.o(i.GPIO_TO_EXTI_Line))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQDivision
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_TO_EXTI_PinSource</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, bsp_exti.o(i.GPIO_TO_EXTI_PinSource))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_TO_EXTI_PortSource</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bsp_exti.o(i.GPIO_TO_EXTI_PortSource))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[82]"></a>GPIO_TO_NVIC_IRQChannel</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, bsp_exti.o(i.GPIO_TO_NVIC_IRQChannel))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[4a]"></a>GUIUpdate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gui.o(i.GUIUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUIUpdate &rArr; menuUpdate &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(i.GUI_Init)
</UL>
<P><STRONG><a name="[98]"></a>GUI_Init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gui.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_OLEDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[99]"></a>GUI_OLEDInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui.o(i.GUI_OLEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_OLEDInit &rArr; menuInit &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[109]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[9c]"></a>OLED_Clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, driver_oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workChoose
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testWalkFuction
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireChoose
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanTest
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[124]"></a>OLED_Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver_oled.o(i.OLED_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
</UL>

<P><STRONG><a name="[9e]"></a>OLED_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, driver_oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[9f]"></a>OLED_ShowChar</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, driver_oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInit
</UL>

<P><STRONG><a name="[a0]"></a>OLED_ShowNum</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, driver_oled.o(i.OLED_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSr04Data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adShowData
</UL>

<P><STRONG><a name="[a2]"></a>OLED_ShowString</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, driver_oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workChoose
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testWalkFuction
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireChoose
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanTest
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adFunction
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInit
</UL>

<P><STRONG><a name="[9d]"></a>OLED_WR_Byte</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, driver_oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>

<P><STRONG><a name="[6d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[8c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_GPIO_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_RCC_Init
</UL>

<P><STRONG><a name="[71]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_GPIO_Config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitPhotoelectricSwitchHard
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitKeyHard
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_RCC_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_RCC_Init
</UL>

<P><STRONG><a name="[bc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a5]"></a>RS485_InitTXE</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_uart_fifo.o(i.RS485_InitTXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS485_InitTXE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>TIM23_GPIO_Config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, driver_steering_engine_speed.o(i.TIM23_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM23_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitSteeringEngineSpeed
</UL>

<P><STRONG><a name="[ac]"></a>TIM23_PWM_Init</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, driver_steering_engine_speed.o(i.TIM23_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM23_PWM_Init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitSteeringEngineSpeed
</UL>

<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, driver_echo.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[125]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
</UL>

<P><STRONG><a name="[b7]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoOpentime
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[b6]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
</UL>

<P><STRONG><a name="[ad]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[ae]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[af]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[b0]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[b1]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[b2]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[b3]"></a>TIM_OC4Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[b4]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
</UL>

<P><STRONG><a name="[cd]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkStop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setZero
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>

<P><STRONG><a name="[cf]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkStop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setZero
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
</UL>

<P><STRONG><a name="[8b]"></a>TIM_TO_NVIC_IRQChannel</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_timer.o(i.TIM_TO_NVIC_IRQChannel))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
</UL>

<P><STRONG><a name="[88]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hj_usart_irq.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[ba]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[bb]"></a>USART_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
</UL>

<P><STRONG><a name="[b9]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[51]"></a>adFunction</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gui_oled.o(i.adFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adFunction &rArr; adShowData &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adShowData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_oled.o(i.menuInit)
</UL>
<P><STRONG><a name="[bd]"></a>adShowData</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_oled.o(i.adShowData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adShowData &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adFunction
</UL>

<P><STRONG><a name="[bf]"></a>app_FlashReadUdata</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_flash.o(i.app_FlashReadUdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_FlashReadUdata &rArr; bsp_ReadCpuFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ReadCpuFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ParameterInit
</UL>

<P><STRONG><a name="[c1]"></a>app_FlashWriteUdata</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_flash.o(i.app_FlashWriteUdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_FlashWriteUdata &rArr; bsp_WriteCpuFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testWalkFuction
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ParameterInit
</UL>

<P><STRONG><a name="[c3]"></a>app_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.app_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_Init &rArr; appfindFire_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appfindFire_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkTaskInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputTaskInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkTaskInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ParameterInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>app_LeftWheel</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_walk.o(i.app_LeftWheel))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goStraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>

<P><STRONG><a name="[c6]"></a>app_ParameterInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, app.o(i.app_ParameterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_ParameterInit &rArr; app_FlashWriteUdata &rArr; bsp_WriteCpuFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ReadCpuFlash
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_FlashReadUdata
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_FlashWriteUdata
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[ce]"></a>app_RightWheel</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_walk.o(i.app_RightWheel))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goStraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>

<P><STRONG><a name="[d0]"></a>app_WorkCommandReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_work.o(i.app_WorkCommandReset))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_FanMotorOff
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoRobotTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneRobotTask
</UL>

<P><STRONG><a name="[4b]"></a>app_WorkTask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_work.o(i.app_WorkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_WorkTask &rArr; app_WorkUpdata &rArr; app_outfireTwoRobotTask &rArr; app_outfireTwoWorkDoing &rArr; app_findSeventhFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkUpdata
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_work.o(i.app_WorkTaskInit)
</UL>
<P><STRONG><a name="[ca]"></a>app_WorkTaskInit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_work.o(i.app_WorkTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_WorkTaskInit &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[d2]"></a>app_WorkUpdata</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_work.o(i.app_WorkUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_WorkUpdata &rArr; app_outfireTwoRobotTask &rArr; app_outfireTwoWorkDoing &rArr; app_findSeventhFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rescueRobotTask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoRobotTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneRobotTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkTask
</UL>

<P><STRONG><a name="[d7]"></a>app_behindTurn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_walk.o(i.app_behindTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_behindTurn &rArr; app_turnAngleDirection &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>

<P><STRONG><a name="[d9]"></a>app_calibration</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, app_walk.o(i.app_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_calibration &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSixthFire
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSenventhFire
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromFourthFire
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromEighthFire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
</UL>

<P><STRONG><a name="[8e]"></a>app_echoGetDistance</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, driver_echo.o(i.app_echoGetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_echoGetDistance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoRes
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoOpentime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGettime
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQDivision
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>app_echoGettime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_echo.o(i.app_echoGettime))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[c9]"></a>app_echoInit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_echo.o(i.app_echoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_echoInit &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[dd]"></a>app_echoOpentime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_echo.o(i.app_echoOpentime))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[4c]"></a>app_echoTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_echo.o(i.app_echoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_echoTask &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoUpdata
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_echo.o(i.app_echoInit)
</UL>
<P><STRONG><a name="[de]"></a>app_echoUpdata</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_echo.o(i.app_echoUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_echoUpdata
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoTask
</UL>

<P><STRONG><a name="[e0]"></a>app_fan</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_work.o(i.app_fan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
</UL>

<P><STRONG><a name="[e1]"></a>app_findEighthFire</STRONG> (Thumb, 1204 bytes, Stack size 40 bytes, app_outfirerobottwowork.o(i.app_findEighthFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_findEighthFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkDoing
</UL>

<P><STRONG><a name="[e3]"></a>app_findFire</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, app_walk.o(i.app_findFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_findFire &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
</UL>

<P><STRONG><a name="[4f]"></a>app_findFireTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_findfire.o(i.app_findFireTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_findFireTask &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appfindFireUpdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_findfire.o(i.appfindFire_Init)
</UL>
<P><STRONG><a name="[e7]"></a>app_findFirstFire</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, app_outfirerobotonework.o(i.app_findFirstFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_findFirstFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkDoing
</UL>

<P><STRONG><a name="[e9]"></a>app_findFourthFire</STRONG> (Thumb, 2244 bytes, Stack size 40 bytes, app_outfirerobottwowork.o(i.app_findFourthFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_findFourthFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkDoing
</UL>

<P><STRONG><a name="[ea]"></a>app_findNinthFire</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, app_outfirerobotonework.o(i.app_findNinthFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_findNinthFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkDoing
</UL>

<P><STRONG><a name="[eb]"></a>app_findSecondFire</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, app_outfirerobotonework.o(i.app_findSecondFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_findSecondFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkDoing
</UL>

<P><STRONG><a name="[ec]"></a>app_findSeventhFire</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, app_outfirerobottwowork.o(i.app_findSeventhFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_findSeventhFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkDoing
</UL>

<P><STRONG><a name="[ed]"></a>app_findSixFire</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, app_outfirerobottwowork.o(i.app_findSixFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_findSixFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkDoing
</UL>

<P><STRONG><a name="[ee]"></a>app_findThirdFire</STRONG> (Thumb, 744 bytes, Stack size 40 bytes, app_outfirerobotonework.o(i.app_findThirdFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_findThirdFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFire
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkDoing
</UL>

<P><STRONG><a name="[ef]"></a>app_frontTurn</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, app_walk.o(i.app_frontTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_frontTurn &rArr; app_turnAngleDirection &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>

<P><STRONG><a name="[e5]"></a>app_goBack</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, app_walk.o(i.app_goBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_goBack &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
</UL>

<P><STRONG><a name="[e8]"></a>app_goOtherAction</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, app_walk.o(i.app_goOtherAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_goOtherAction &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
</UL>

<P><STRONG><a name="[f0]"></a>app_goStraight</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_walk.o(i.app_goStraight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_goStraight
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>

<P><STRONG><a name="[4d]"></a>app_inputTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_input.o(i.app_inputTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_inputTask &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputUpdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_input.o(i.app_inputTaskInit)
</UL>
<P><STRONG><a name="[cb]"></a>app_inputTaskInit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_input.o(i.app_inputTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_inputTaskInit &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[f1]"></a>app_inputUpdata</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_input.o(i.app_inputUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_inputUpdata &rArr; driverKeyNowStateUpdate &rArr; driverKeyDetection
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverPhotoelectricSwitchNowStateUpdate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverKeyNowStateUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputTask
</UL>

<P><STRONG><a name="[f7]"></a>app_judgeFunc</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_work.o(i.app_judgeFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_judgeFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkReady
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkReady
</UL>

<P><STRONG><a name="[d5]"></a>app_outfireOneRobotTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_work.o(i.app_outfireOneRobotTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_outfireOneRobotTask &rArr; app_outfireOneWorkDoing &rArr; app_findThirdFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkReady
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkDoing
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkCommandReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkUpdata
</UL>

<P><STRONG><a name="[f4]"></a>app_outfireOneWorkDoing</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_outfirerobotonework.o(i.app_outfireOneWorkDoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_outfireOneWorkDoing &rArr; app_findThirdFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneRobotTask
</UL>

<P><STRONG><a name="[f5]"></a>app_outfireOneWorkReady</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_outfirerobotonework.o(i.app_outfireOneWorkReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_outfireOneWorkReady &rArr; app_judgeFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_judgeFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneRobotTask
</UL>

<P><STRONG><a name="[d6]"></a>app_outfireTwoRobotTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_work.o(i.app_outfireTwoRobotTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_outfireTwoRobotTask &rArr; app_outfireTwoWorkDoing &rArr; app_findSeventhFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkReady
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkDoing
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkCommandReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkUpdata
</UL>

<P><STRONG><a name="[f8]"></a>app_outfireTwoWorkDoing</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, app_outfirerobottwowork.o(i.app_outfireTwoWorkDoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_outfireTwoWorkDoing &rArr; app_findSeventhFire &rArr; checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnHome
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoRobotTask
</UL>

<P><STRONG><a name="[f9]"></a>app_outfireTwoWorkReady</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_outfirerobottwowork.o(i.app_outfireTwoWorkReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_outfireTwoWorkReady &rArr; app_judgeFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_judgeFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoRobotTask
</UL>

<P><STRONG><a name="[d4]"></a>app_rescueRobotTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_work.o(i.app_rescueRobotTask))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkUpdata
</UL>

<P><STRONG><a name="[fb]"></a>app_returnFromEighthFire</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, app_outfirerobottwowork.o(i.app_returnFromEighthFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_returnFromEighthFire &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnHome
</UL>

<P><STRONG><a name="[fc]"></a>app_returnFromFourthFire</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, app_outfirerobottwowork.o(i.app_returnFromFourthFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_returnFromFourthFire &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnHome
</UL>

<P><STRONG><a name="[fd]"></a>app_returnFromSenventhFire</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, app_outfirerobottwowork.o(i.app_returnFromSenventhFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_returnFromSenventhFire &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnHome
</UL>

<P><STRONG><a name="[fe]"></a>app_returnFromSixthFire</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, app_outfirerobottwowork.o(i.app_returnFromSixthFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_returnFromSixthFire &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnHome
</UL>

<P><STRONG><a name="[f6]"></a>app_returnFunc</STRONG> (Thumb, 1152 bytes, Stack size 40 bytes, app_outfirerobotonework.o(i.app_returnFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_returnFunc &rArr; app_goOtherAction &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrationGostraight
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireOneWorkDoing
</UL>

<P><STRONG><a name="[ff]"></a>app_reverseTurn</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, app_walk.o(i.app_reverseTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_reverseTurn &rArr; app_turnAngleDirection &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>

<P><STRONG><a name="[100]"></a>app_setZero</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_walk.o(i.app_setZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_setZero
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>

<P><STRONG><a name="[d8]"></a>app_turnAngleDirection</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, app_walk.o(i.app_turnAngleDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_turnAngleDirection &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reverseTurn
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_frontTurn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_behindTurn
</UL>

<P><STRONG><a name="[101]"></a>app_walkStop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_walk.o(i.app_walkStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_walkStop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>

<P><STRONG><a name="[4e]"></a>app_walkTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_walk.o(i.app_walkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_walkTask &rArr; app_walkWaysChoose &rArr; app_reverseTurn &rArr; app_turnAngleDirection &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkWaysChoose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_walk.o(i.app_walkTaskInit)
</UL>
<P><STRONG><a name="[c8]"></a>app_walkTaskInit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_walk.o(i.app_walkTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_walkTaskInit &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[102]"></a>app_walkWaysChoose</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, app_walk.o(i.app_walkWaysChoose))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = app_walkWaysChoose &rArr; app_reverseTurn &rArr; app_turnAngleDirection &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkStop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_setZero
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reverseTurn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goStraight
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_frontTurn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_behindTurn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkTask
</UL>

<P><STRONG><a name="[e6]"></a>appfindFireUpdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_findfire.o(i.appfindFireUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = appfindFireUpdata &rArr; getadc_average &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getadc_average
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFireTask
</UL>

<P><STRONG><a name="[c7]"></a>appfindFire_Init</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_findfire.o(i.appfindFire_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = appfindFire_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[110]"></a>bsp_CmpCpuFlash</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bsp_cpu_flash.o(i.bsp_CmpCpuFlash))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[113]"></a>bsp_GetSector</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_cpu_flash.o(i.bsp_GetSector))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteCpuFlash
</UL>

<P><STRONG><a name="[c4]"></a>bsp_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_Init &rArr; bsp_InitUart &rArr; RS485_InitTXE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[10b]"></a>bsp_InitLed</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp_led.o(i.bsp_InitLed), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>

<P><STRONG><a name="[10a]"></a>bsp_InitUart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_uart_fifo.o(i.bsp_InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_InitUart &rArr; RS485_InitTXE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_InitTXE
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartVarInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUartNVIC
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[10c]"></a>bsp_LedOff</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_LedOff), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>

<P><STRONG><a name="[c0]"></a>bsp_ReadCpuFlash</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_cpu_flash.o(i.bsp_ReadCpuFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_ReadCpuFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_FlashReadUdata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ParameterInit
</UL>

<P><STRONG><a name="[c2]"></a>bsp_WriteCpuFlash</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, bsp_cpu_flash.o(i.bsp_WriteCpuFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_WriteCpuFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetSector
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CmpCpuFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_FlashWriteUdata
</UL>

<P><STRONG><a name="[e2]"></a>calibrationGostraight</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, app_walk.o(i.calibrationGostraight))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calibrationGostraight &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_RightWheel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_LeftWheel
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSixthFire
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSenventhFire
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromFourthFire
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromEighthFire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
</UL>

<P><STRONG><a name="[e4]"></a>checkFire</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_work.o(i.checkFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = checkFire &rArr; app_fan &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSixFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFourthFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSecondFire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findNinthFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
</UL>

<P><STRONG><a name="[119]"></a>driverKeyDetection</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, driver_key.o(i.driverKeyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = driverKeyDetection
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverKeyReturn
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverKeyNowStateUpdate
</UL>

<P><STRONG><a name="[f3]"></a>driverKeyNowStateUpdate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, driver_key.o(i.driverKeyNowStateUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = driverKeyNowStateUpdate &rArr; driverKeyDetection
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverKeyDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputUpdata
</UL>

<P><STRONG><a name="[11a]"></a>driverKeyReturn</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, driver_key.o(i.driverKeyReturn))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverKeyDetection
</UL>

<P><STRONG><a name="[f2]"></a>driverPhotoelectricSwitchNowStateUpdate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, driver_photoelectric_switch.o(i.driverPhotoelectricSwitchNowStateUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driverPhotoelectricSwitchNowStateUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputUpdata
</UL>

<P><STRONG><a name="[11c]"></a>driver_FanMotorGPIOConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, driver_fan_motor.o(i.driver_FanMotorGPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = driver_FanMotorGPIOConfig &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitFanMotor
</UL>

<P><STRONG><a name="[d1]"></a>driver_FanMotorOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver_fan_motor.o(i.driver_FanMotorOff))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkCommandReset
</UL>

<P><STRONG><a name="[c5]"></a>driver_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, driver.o(i.driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = driver_Init &rArr; ADC_Configuration &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitSteeringEngineSpeed
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitPhotoelectricSwitchHard
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitKeyHard
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitFanMotor
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>

<P><STRONG><a name="[121]"></a>driver_InitFanMotor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, driver_fan_motor.o(i.driver_InitFanMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = driver_InitFanMotor &rArr; driver_FanMotorGPIOConfig &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_FanMotorGPIOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[122]"></a>driver_InitKeyHard</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, driver_key.o(i.driver_InitKeyHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = driver_InitKeyHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[11d]"></a>driver_InitOLED</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, driver_oled.o(i.driver_InitOLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = driver_InitOLED &rArr; OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Delay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveHandle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[11e]"></a>driver_InitPhotoelectricSwitchHard</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, driver_photoelectric_switch.o(i.driver_InitPhotoelectricSwitchHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = driver_InitPhotoelectricSwitchHard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[120]"></a>driver_InitSteeringEngineSpeed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, driver_steering_engine_speed.o(i.driver_InitSteeringEngineSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = driver_InitSteeringEngineSpeed &rArr; TIM23_PWM_Init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_PWM_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM23_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[11f]"></a>driver_echo</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, driver_echo.o(i.driver_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = driver_echo &rArr; BSP_GPIO_EXTI_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM_INT_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_EXTI_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_deviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[da]"></a>echoRes</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, driver_echo.o(i.echoRes))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoGetDistance
</UL>

<P><STRONG><a name="[df]"></a>echo_Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_echo.o(i.echo_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoUpdata
</UL>

<P><STRONG><a name="[126]"></a>echo_deviceInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, driver_echo.o(i.echo_deviceInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_echo
</UL>

<P><STRONG><a name="[52]"></a>fanTest</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gui_oled.o(i.fanTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fanTest &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_oled.o(i.menuInit)
</UL>
<P><STRONG><a name="[54]"></a>fireChoose</STRONG> (Thumb, 918 bytes, Stack size 24 bytes, gui_oled.o(i.fireChoose))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fireChoose &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_oled.o(i.menuInit)
</UL>
<P><STRONG><a name="[103]"></a>getadc_average</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, driver_linearmovement.o(i.getadc_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getadc_average &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appfindFireUpdata
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; app_Init &rArr; appfindFire_Init &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuInit
</UL>

<P><STRONG><a name="[9b]"></a>menuInit</STRONG> (Thumb, 962 bytes, Stack size 40 bytes, gui_oled.o(i.menuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = menuInit &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_OLEDInit
</UL>

<P><STRONG><a name="[97]"></a>menuUpdate</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, gui_oled.o(i.menuUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = menuUpdate &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upHandle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveHandle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nullHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterHandle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backHandle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetGUIState
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdate
</UL>

<P><STRONG><a name="[a1]"></a>oled_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver_oled.o(i.oled_pow))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[12f]"></a>parameterCalibration</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, gui_oled.o(i.parameterCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = parameterCalibration &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_FlashWriteUdata
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveGUIFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testWalkFuction
</UL>

<P><STRONG><a name="[134]"></a>pvPortMalloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[14a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[108]"></a>resetGUIState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui.o(i.resetGUIState))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[fa]"></a>returnHome</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_outfirerobottwowork.o(i.returnHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = returnHome &rArr; app_returnFromFourthFire &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSixthFire
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSenventhFire
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromFourthFire
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromEighthFire
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_outfireTwoWorkDoing
</UL>

<P><STRONG><a name="[130]"></a>saveGUIFinish</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui.o(i.saveGUIFinish))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testWalkFuction
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
</UL>

<P><STRONG><a name="[144]"></a>testSr04Data</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gui_oled.o(i.testSr04Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = testSr04Data &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSr04Function
</UL>

<P><STRONG><a name="[50]"></a>testSr04Function</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gui_oled.o(i.testSr04Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = testSr04Function &rArr; testSr04Data &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSr04Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_oled.o(i.menuInit)
</UL>
<P><STRONG><a name="[55]"></a>testWalkFuction</STRONG> (Thumb, 1400 bytes, Stack size 24 bytes, gui_oled.o(i.testWalkFuction))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = testWalkFuction &rArr; parameterCalibration &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_FlashWriteUdata
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameterCalibration
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveGUIFinish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_oled.o(i.menuInit)
</UL>
<P><STRONG><a name="[13a]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[141]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[13f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[132]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[14b]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[139]"></a>vPortEnterCritical</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[13b]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[135]"></a>vPortFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[148]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[13d]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[d3]"></a>vTaskDelay</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSixthFire
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromSenventhFire
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromFourthFire
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFromEighthFire
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findSeventhFire
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findEighthFire
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_returnFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findThirdFire
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFirstFire
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoTask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkTask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goOtherAction
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_goBack
</UL>

<P><STRONG><a name="[96]"></a>vTaskDelayUntil</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFireTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkTask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
</UL>

<P><STRONG><a name="[12a]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5a]"></a>vTaskSwitchContext</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[123]"></a>wifi_Init</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, hj_usart.o(i.wifi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wifi_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_Init
</UL>

<P><STRONG><a name="[53]"></a>workChoose</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gui_oled.o(i.workChoose))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = workChoose &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_oled.o(i.menuInit)
</UL>
<P><STRONG><a name="[145]"></a>xPortStartScheduler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9a]"></a>xTaskGenericCreate</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appfindFire_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkTaskInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputTaskInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkTaskInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[95]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIUpdate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_findFireTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_echoTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_WorkTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inputTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_walkTask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_turnAngleDirection
</UL>

<P><STRONG><a name="[a7]"></a>xTaskIncrementTick</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[138]"></a>xTaskResumeAll</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[105]"></a>OLEDKeyNoReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_oled.o(i.OLEDKeyNoReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upHandle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveHandle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nullHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterHandle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backHandle
</UL>

<P><STRONG><a name="[104]"></a>backHandle</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui_oled.o(i.backHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = backHandle &rArr; backOn
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backOn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[106]"></a>backOn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_oled.o(i.backOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = backOn
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetGUIState
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backHandle
</UL>

<P><STRONG><a name="[118]"></a>downHandle</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gui_oled.o(i.downHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = downHandle &rArr; OLEDKeyNoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[127]"></a>enterHandle</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gui_oled.o(i.enterHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enterHandle &rArr; OLEDKeyNoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[128]"></a>enterOn</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gui_oled.o(i.enterOn))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterHandle
</UL>

<P><STRONG><a name="[107]"></a>menuReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_oled.o(i.menuReset))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backOn
</UL>

<P><STRONG><a name="[12c]"></a>nullHandle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_oled.o(i.nullHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nullHandle &rArr; OLEDKeyNoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[12e]"></a>saveHandle</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gui_oled.o(i.saveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = saveHandle &rArr; driver_InitOLED &rArr; OLED_Clear &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_InitOLED
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[12d]"></a>upHandle</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_oled.o(i.upHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upHandle &rArr; OLEDKeyNoReset
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDKeyNoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[10f]"></a>ConfigUartNVIC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.ConfigUartNVIC))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[10e]"></a>InitHardUart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.InitHardUart))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[10d]"></a>UartVarInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart_fifo.o(i.UartVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[a9]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[131]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[133]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[136]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[13c]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[57]"></a>prvIdleTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[13e]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[140]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[14c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[56]"></a>prvTaskExitError</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[142]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[143]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
